
GuitarEffectsScanf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000115f4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000950  08011898  08011898  00021898  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080121e8  080121e8  000302ac  2**0
                  CONTENTS
  4 .ARM          00000008  080121e8  080121e8  000221e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080121f0  080121f0  000302ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080121f0  080121f0  000221f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080121f4  080121f4  000221f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  24000000  080121f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  240001ec  080123e4  000301ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  2400024c  08012444  0003024c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000057c0  240002ac  080124a4  000302ac  2**2
                  ALLOC
 12 ._user_heap_stack 00000704  24005a6c  080124a4  00035a6c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000302ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002f105  00000000  00000000  000302da  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000043e1  00000000  00000000  0005f3df  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001c18  00000000  00000000  000637c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001a80  00000000  00000000  000653d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0003c206  00000000  00000000  00066e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00018f9e  00000000  00000000  000a305e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00181257  00000000  00000000  000bbffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0023d253  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008dd0  00000000  00000000  0023d2d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002ac 	.word	0x240002ac
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801187c 	.word	0x0801187c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002b0 	.word	0x240002b0
 80002dc:	0801187c 	.word	0x0801187c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <effectfunc>:
uint32_t dac_buff[BufferSize] = {0};
uint32_t delay_buff[BufferSize*3] = {0};

char name[5] = "START";

void effectfunc(int e1,int e2, int e3, int e4){
 8000690:	b580      	push	{r7, lr}
 8000692:	ed2d 8b02 	vpush	{d8}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
 80006a0:	603b      	str	r3, [r7, #0]

	// First Half Buffer
		if(ADCbuff_Half && DACbuff_Half){
 80006a2:	4b85      	ldr	r3, [pc, #532]	; (80008b8 <effectfunc+0x228>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d030      	beq.n	800070c <effectfunc+0x7c>
 80006aa:	4b84      	ldr	r3, [pc, #528]	; (80008bc <effectfunc+0x22c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d02c      	beq.n	800070c <effectfunc+0x7c>

			inBufPtr = &adc_buff[0];
 80006b2:	4b83      	ldr	r3, [pc, #524]	; (80008c0 <effectfunc+0x230>)
 80006b4:	4a83      	ldr	r2, [pc, #524]	; (80008c4 <effectfunc+0x234>)
 80006b6:	601a      	str	r2, [r3, #0]
			outBufPtr = &dac_buff[DataSize];
 80006b8:	4b83      	ldr	r3, [pc, #524]	; (80008c8 <effectfunc+0x238>)
 80006ba:	4a84      	ldr	r2, [pc, #528]	; (80008cc <effectfunc+0x23c>)
 80006bc:	601a      	str	r2, [r3, #0]

			if(DelayState == 0){
 80006be:	4b84      	ldr	r3, [pc, #528]	; (80008d0 <effectfunc+0x240>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d106      	bne.n	80006d4 <effectfunc+0x44>
				delayPtrRead = &delay_buff[0];
 80006c6:	4b83      	ldr	r3, [pc, #524]	; (80008d4 <effectfunc+0x244>)
 80006c8:	4a83      	ldr	r2, [pc, #524]	; (80008d8 <effectfunc+0x248>)
 80006ca:	601a      	str	r2, [r3, #0]
				delayPtrWrite= &delay_buff[2*BufferSize];
 80006cc:	4b83      	ldr	r3, [pc, #524]	; (80008dc <effectfunc+0x24c>)
 80006ce:	4a84      	ldr	r2, [pc, #528]	; (80008e0 <effectfunc+0x250>)
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	e014      	b.n	80006fe <effectfunc+0x6e>
			}
			else if (DelayState == 1){
 80006d4:	4b7e      	ldr	r3, [pc, #504]	; (80008d0 <effectfunc+0x240>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d106      	bne.n	80006ea <effectfunc+0x5a>
				delayPtrRead = &delay_buff[BufferSize];
 80006dc:	4b7d      	ldr	r3, [pc, #500]	; (80008d4 <effectfunc+0x244>)
 80006de:	4a81      	ldr	r2, [pc, #516]	; (80008e4 <effectfunc+0x254>)
 80006e0:	601a      	str	r2, [r3, #0]
				delayPtrWrite= &delay_buff[0];
 80006e2:	4b7e      	ldr	r3, [pc, #504]	; (80008dc <effectfunc+0x24c>)
 80006e4:	4a7c      	ldr	r2, [pc, #496]	; (80008d8 <effectfunc+0x248>)
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	e009      	b.n	80006fe <effectfunc+0x6e>
			}
			else if(DelayState == 2){
 80006ea:	4b79      	ldr	r3, [pc, #484]	; (80008d0 <effectfunc+0x240>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2b02      	cmp	r3, #2
 80006f0:	d105      	bne.n	80006fe <effectfunc+0x6e>
				delayPtrRead = &delay_buff[(2*BufferSize)];
 80006f2:	4b78      	ldr	r3, [pc, #480]	; (80008d4 <effectfunc+0x244>)
 80006f4:	4a7a      	ldr	r2, [pc, #488]	; (80008e0 <effectfunc+0x250>)
 80006f6:	601a      	str	r2, [r3, #0]
				delayPtrWrite= &delay_buff[BufferSize];
 80006f8:	4b78      	ldr	r3, [pc, #480]	; (80008dc <effectfunc+0x24c>)
 80006fa:	4a7a      	ldr	r2, [pc, #488]	; (80008e4 <effectfunc+0x254>)
 80006fc:	601a      	str	r2, [r3, #0]
			}

			ADCbuff_Half = 0;
 80006fe:	4b6e      	ldr	r3, [pc, #440]	; (80008b8 <effectfunc+0x228>)
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
			DACbuff_Half = 0;
 8000704:	4b6d      	ldr	r3, [pc, #436]	; (80008bc <effectfunc+0x22c>)
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	e033      	b.n	8000774 <effectfunc+0xe4>
		}
		// Second Half Buffer
		else if(ADCbuff_Full && DACbuff_Full){
 800070c:	4b76      	ldr	r3, [pc, #472]	; (80008e8 <effectfunc+0x258>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d02f      	beq.n	8000774 <effectfunc+0xe4>
 8000714:	4b75      	ldr	r3, [pc, #468]	; (80008ec <effectfunc+0x25c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d02b      	beq.n	8000774 <effectfunc+0xe4>
			inBufPtr = &adc_buff[DataSize];
 800071c:	4b68      	ldr	r3, [pc, #416]	; (80008c0 <effectfunc+0x230>)
 800071e:	4a74      	ldr	r2, [pc, #464]	; (80008f0 <effectfunc+0x260>)
 8000720:	601a      	str	r2, [r3, #0]
			outBufPtr = &dac_buff[0];
 8000722:	4b69      	ldr	r3, [pc, #420]	; (80008c8 <effectfunc+0x238>)
 8000724:	4a73      	ldr	r2, [pc, #460]	; (80008f4 <effectfunc+0x264>)
 8000726:	601a      	str	r2, [r3, #0]

			if(DelayState == 0){
 8000728:	4b69      	ldr	r3, [pc, #420]	; (80008d0 <effectfunc+0x240>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d106      	bne.n	800073e <effectfunc+0xae>
				delayPtrRead = &delay_buff[DataSize];
 8000730:	4b68      	ldr	r3, [pc, #416]	; (80008d4 <effectfunc+0x244>)
 8000732:	4a71      	ldr	r2, [pc, #452]	; (80008f8 <effectfunc+0x268>)
 8000734:	601a      	str	r2, [r3, #0]
				delayPtrWrite= &delay_buff[2*BufferSize+DataSize];
 8000736:	4b69      	ldr	r3, [pc, #420]	; (80008dc <effectfunc+0x24c>)
 8000738:	4a70      	ldr	r2, [pc, #448]	; (80008fc <effectfunc+0x26c>)
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	e014      	b.n	8000768 <effectfunc+0xd8>
			}
			else if (DelayState == 1){
 800073e:	4b64      	ldr	r3, [pc, #400]	; (80008d0 <effectfunc+0x240>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d106      	bne.n	8000754 <effectfunc+0xc4>
				delayPtrRead = &delay_buff[BufferSize+DataSize];
 8000746:	4b63      	ldr	r3, [pc, #396]	; (80008d4 <effectfunc+0x244>)
 8000748:	4a6d      	ldr	r2, [pc, #436]	; (8000900 <effectfunc+0x270>)
 800074a:	601a      	str	r2, [r3, #0]
				delayPtrWrite= &delay_buff[DataSize];
 800074c:	4b63      	ldr	r3, [pc, #396]	; (80008dc <effectfunc+0x24c>)
 800074e:	4a6a      	ldr	r2, [pc, #424]	; (80008f8 <effectfunc+0x268>)
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	e009      	b.n	8000768 <effectfunc+0xd8>
			}
			else if (DelayState == 2){
 8000754:	4b5e      	ldr	r3, [pc, #376]	; (80008d0 <effectfunc+0x240>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b02      	cmp	r3, #2
 800075a:	d105      	bne.n	8000768 <effectfunc+0xd8>
				delayPtrRead = &delay_buff[(2*BufferSize+DataSize)];
 800075c:	4b5d      	ldr	r3, [pc, #372]	; (80008d4 <effectfunc+0x244>)
 800075e:	4a67      	ldr	r2, [pc, #412]	; (80008fc <effectfunc+0x26c>)
 8000760:	601a      	str	r2, [r3, #0]
				delayPtrWrite= &delay_buff[BufferSize+DataSize];
 8000762:	4b5e      	ldr	r3, [pc, #376]	; (80008dc <effectfunc+0x24c>)
 8000764:	4a66      	ldr	r2, [pc, #408]	; (8000900 <effectfunc+0x270>)
 8000766:	601a      	str	r2, [r3, #0]
			}


			ADCbuff_Full = 0;
 8000768:	4b5f      	ldr	r3, [pc, #380]	; (80008e8 <effectfunc+0x258>)
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
			DACbuff_Full = 0;
 800076e:	4b5f      	ldr	r3, [pc, #380]	; (80008ec <effectfunc+0x25c>)
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
		}

		for(int i = 0; i < DataSize; i++){
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]
 8000778:	e140      	b.n	80009fc <effectfunc+0x36c>
			// Clean
			outBufPtr[i] = inBufPtr[i]*1.05;
 800077a:	4b51      	ldr	r3, [pc, #324]	; (80008c0 <effectfunc+0x230>)
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	4413      	add	r3, r2
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	ee07 3a90 	vmov	s15, r3
 800078a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800078e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8000898 <effectfunc+0x208>
 8000792:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000796:	4b4c      	ldr	r3, [pc, #304]	; (80008c8 <effectfunc+0x238>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	4413      	add	r3, r2
 80007a0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a4:	ee17 2a90 	vmov	r2, s15
 80007a8:	601a      	str	r2, [r3, #0]

			// Distortion
			if(e4){
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d046      	beq.n	800083e <effectfunc+0x1ae>
				//outBufPtr[i] = 1;
				//for(int idx = 0; idx < 20; idx++){
				//	outBufPtr[i] += ((pow((-sgn_func(outBufPtr[i])*0.1*outBufPtr[i]), idx))/factorial_func(idx));
				//}
				outBufPtr[i] = 0.1*(sgn_func(outBufPtr[i]) * (1 - exp(sgn_func(0.1*outBufPtr[i])*outBufPtr[i])));
 80007b0:	4b45      	ldr	r3, [pc, #276]	; (80008c8 <effectfunc+0x238>)
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	4413      	add	r3, r2
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f92f 	bl	8000a20 <sgn_func>
 80007c2:	ee07 0a90 	vmov	s15, r0
 80007c6:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80007ca:	4b3f      	ldr	r3, [pc, #252]	; (80008c8 <effectfunc+0x238>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	4413      	add	r3, r2
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	ee07 3a90 	vmov	s15, r3
 80007da:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80007de:	ed9f 6b30 	vldr	d6, [pc, #192]	; 80008a0 <effectfunc+0x210>
 80007e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007e6:	eeb0 0b47 	vmov.f64	d0, d7
 80007ea:	f000 f919 	bl	8000a20 <sgn_func>
 80007ee:	4603      	mov	r3, r0
 80007f0:	4619      	mov	r1, r3
 80007f2:	4b35      	ldr	r3, [pc, #212]	; (80008c8 <effectfunc+0x238>)
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	4413      	add	r3, r2
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	fb03 f301 	mul.w	r3, r3, r1
 8000802:	ee07 3a90 	vmov	s15, r3
 8000806:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800080a:	eeb0 0b47 	vmov.f64	d0, d7
 800080e:	f010 f8ff 	bl	8010a10 <exp>
 8000812:	eeb0 6b40 	vmov.f64	d6, d0
 8000816:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800081a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800081e:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000822:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80008a0 <effectfunc+0x210>
 8000826:	ee27 7b06 	vmul.f64	d7, d7, d6
 800082a:	4b27      	ldr	r3, [pc, #156]	; (80008c8 <effectfunc+0x238>)
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	4413      	add	r3, r2
 8000834:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000838:	ee17 2a90 	vmov	r2, s15
 800083c:	601a      	str	r2, [r3, #0]
			}

			// Tremolo
			if(e1){
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d077      	beq.n	8000934 <effectfunc+0x2a4>
				outBufPtr[i] = max(0,sin(2*PI*i/1024))*outBufPtr[i];
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	ee07 3a90 	vmov	s15, r3
 800084e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000852:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80008a8 <effectfunc+0x218>
 8000856:	ee27 7b06 	vmul.f64	d7, d7, d6
 800085a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80008b0 <effectfunc+0x220>
 800085e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000862:	eeb0 0b45 	vmov.f64	d0, d5
 8000866:	f010 f897 	bl	8010998 <sin>
 800086a:	ed87 0b04 	vstr	d0, [r7, #16]
 800086e:	69bb      	ldr	r3, [r7, #24]
 8000870:	ee07 3a90 	vmov	s15, r3
 8000874:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000878:	ed97 6b04 	vldr	d6, [r7, #16]
 800087c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000884:	d53e      	bpl.n	8000904 <effectfunc+0x274>
 8000886:	69bb      	ldr	r3, [r7, #24]
 8000888:	ee07 3a90 	vmov	s15, r3
 800088c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000890:	e03a      	b.n	8000908 <effectfunc+0x278>
 8000892:	bf00      	nop
 8000894:	f3af 8000 	nop.w
 8000898:	cccccccd 	.word	0xcccccccd
 800089c:	3ff0cccc 	.word	0x3ff0cccc
 80008a0:	9999999a 	.word	0x9999999a
 80008a4:	3fb99999 	.word	0x3fb99999
 80008a8:	54442d18 	.word	0x54442d18
 80008ac:	401921fb 	.word	0x401921fb
 80008b0:	00000000 	.word	0x00000000
 80008b4:	40900000 	.word	0x40900000
 80008b8:	240002cc 	.word	0x240002cc
 80008bc:	240002d4 	.word	0x240002d4
 80008c0:	240058e8 	.word	0x240058e8
 80008c4:	240002e0 	.word	0x240002e0
 80008c8:	24005964 	.word	0x24005964
 80008cc:	24001ae0 	.word	0x24001ae0
 80008d0:	240002dc 	.word	0x240002dc
 80008d4:	24005a60 	.word	0x24005a60
 80008d8:	240022e0 	.word	0x240022e0
 80008dc:	240059b8 	.word	0x240059b8
 80008e0:	240042e0 	.word	0x240042e0
 80008e4:	240032e0 	.word	0x240032e0
 80008e8:	240002d0 	.word	0x240002d0
 80008ec:	240002d8 	.word	0x240002d8
 80008f0:	24000ae0 	.word	0x24000ae0
 80008f4:	240012e0 	.word	0x240012e0
 80008f8:	24002ae0 	.word	0x24002ae0
 80008fc:	24004ae0 	.word	0x24004ae0
 8000900:	24003ae0 	.word	0x24003ae0
 8000904:	ed97 7b04 	vldr	d7, [r7, #16]
 8000908:	4b42      	ldr	r3, [pc, #264]	; (8000a14 <effectfunc+0x384>)
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	69fb      	ldr	r3, [r7, #28]
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	4413      	add	r3, r2
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	ee06 3a90 	vmov	s13, r3
 8000918:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800091c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000920:	4b3c      	ldr	r3, [pc, #240]	; (8000a14 <effectfunc+0x384>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	4413      	add	r3, r2
 800092a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800092e:	ee17 2a90 	vmov	r2, s15
 8000932:	601a      	str	r2, [r3, #0]
			}


			if( !e3 && ((e2 && e1)||(e2 && e4) || (e2)) ){
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d11a      	bne.n	8000970 <effectfunc+0x2e0>
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d002      	beq.n	8000946 <effectfunc+0x2b6>
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d108      	bne.n	8000958 <effectfunc+0x2c8>
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d002      	beq.n	8000952 <effectfunc+0x2c2>
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d102      	bne.n	8000958 <effectfunc+0x2c8>
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d00b      	beq.n	8000970 <effectfunc+0x2e0>
				delayPtrWrite[i] = outBufPtr[i];
 8000958:	4b2e      	ldr	r3, [pc, #184]	; (8000a14 <effectfunc+0x384>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	441a      	add	r2, r3
 8000962:	4b2d      	ldr	r3, [pc, #180]	; (8000a18 <effectfunc+0x388>)
 8000964:	6819      	ldr	r1, [r3, #0]
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	440b      	add	r3, r1
 800096c:	6812      	ldr	r2, [r2, #0]
 800096e:	601a      	str	r2, [r3, #0]
			}

			// Delay
			if(e2 || e3){
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d102      	bne.n	800097c <effectfunc+0x2ec>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d027      	beq.n	80009cc <effectfunc+0x33c>
				outBufPtr[i] = 0.75*outBufPtr[i] + 0.5*delayPtrRead[i];
 800097c:	4b25      	ldr	r3, [pc, #148]	; (8000a14 <effectfunc+0x384>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	4413      	add	r3, r2
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	ee07 3a90 	vmov	s15, r3
 800098c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000990:	eeb6 6b08 	vmov.f64	d6, #104	; 0x3f400000  0.750
 8000994:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000998:	4b20      	ldr	r3, [pc, #128]	; (8000a1c <effectfunc+0x38c>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	4413      	add	r3, r2
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	ee07 3a90 	vmov	s15, r3
 80009a8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80009ac:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80009b0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80009b4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80009b8:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <effectfunc+0x384>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	4413      	add	r3, r2
 80009c2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80009c6:	ee17 2a90 	vmov	r2, s15
 80009ca:	601a      	str	r2, [r3, #0]
			}

			if ((e2 && e3) || e3){
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d002      	beq.n	80009d8 <effectfunc+0x348>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d102      	bne.n	80009de <effectfunc+0x34e>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d00b      	beq.n	80009f6 <effectfunc+0x366>
				delayPtrWrite[i] = outBufPtr[i];
 80009de:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <effectfunc+0x384>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	441a      	add	r2, r3
 80009e8:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <effectfunc+0x388>)
 80009ea:	6819      	ldr	r1, [r3, #0]
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	440b      	add	r3, r1
 80009f2:	6812      	ldr	r2, [r2, #0]
 80009f4:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < DataSize; i++){
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	3301      	adds	r3, #1
 80009fa:	61fb      	str	r3, [r7, #28]
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a02:	f6ff aeba 	blt.w	800077a <effectfunc+0xea>


		}


}
 8000a06:	bf00      	nop
 8000a08:	3720      	adds	r7, #32
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	ecbd 8b02 	vpop	{d8}
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	24005964 	.word	0x24005964
 8000a18:	240059b8 	.word	0x240059b8
 8000a1c:	24005a60 	.word	0x24005a60

08000a20 <sgn_func>:
		DACbuff_Full = 0;
	}

}

int sgn_func(uint32_t val) {
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
    return (2550 < val) - (val < 2550);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f640 12f6 	movw	r2, #2550	; 0x9f6
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	bf8c      	ite	hi
 8000a32:	2301      	movhi	r3, #1
 8000a34:	2300      	movls	r3, #0
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	4619      	mov	r1, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f640 12f5 	movw	r2, #2549	; 0x9f5
 8000a40:	4293      	cmp	r3, r2
 8000a42:	bf94      	ite	ls
 8000a44:	2301      	movls	r3, #1
 8000a46:	2300      	movhi	r3, #0
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	1acb      	subs	r3, r1, r3
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a5c:	f001 fb0a 	bl	8002074 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a60:	f000 f85c 	bl	8000b1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a64:	f000 fb44 	bl	80010f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a68:	f000 fb12 	bl	8001090 <MX_DMA_Init>
  MX_ETH_Init();
 8000a6c:	f000 f9ec 	bl	8000e48 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000a70:	f000 fa90 	bl	8000f94 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a74:	f000 fada 	bl	800102c <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000a78:	f000 f93a 	bl	8000cf0 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000a7c:	f000 f9b2 	bl	8000de4 <MX_DAC1_Init>
  MX_TIM1_Init();
 8000a80:	f000 fa34 	bl	8000eec <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  fflush(stdout);
 8000a84:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <main+0x9c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f00b fe74 	bl	800c778 <fflush>
  printf("\r\n");
 8000a90:	4819      	ldr	r0, [pc, #100]	; (8000af8 <main+0xa0>)
 8000a92:	f00c fea9 	bl	800d7e8 <puts>
  printf("\r\n*********************************************\r\n");
 8000a96:	4819      	ldr	r0, [pc, #100]	; (8000afc <main+0xa4>)
 8000a98:	f00c fea6 	bl	800d7e8 <puts>
  printf("\r\n** EE 113 Design: Guitar Effects Processor **\r\n");
 8000a9c:	4818      	ldr	r0, [pc, #96]	; (8000b00 <main+0xa8>)
 8000a9e:	f00c fea3 	bl	800d7e8 <puts>
  printf("\r\n*********************************************\r\n");
 8000aa2:	4816      	ldr	r0, [pc, #88]	; (8000afc <main+0xa4>)
 8000aa4:	f00c fea0 	bl	800d7e8 <puts>

  printf("\r\n");
 8000aa8:	4813      	ldr	r0, [pc, #76]	; (8000af8 <main+0xa0>)
 8000aaa:	f00c fe9d 	bl	800d7e8 <puts>

  printf("\r\n    ** Press s to Start!!! \r\n");
 8000aae:	4815      	ldr	r0, [pc, #84]	; (8000b04 <main+0xac>)
 8000ab0:	f00c fe9a 	bl	800d7e8 <puts>
  while (name[0] != 's')
 8000ab4:	e00a      	b.n	8000acc <main+0x74>
  	  {
        Serial_Scanf(name, 1);
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	4813      	ldr	r0, [pc, #76]	; (8000b08 <main+0xb0>)
 8000aba:	f000 fbfb 	bl	80012b4 <Serial_Scanf>
        if (name[0] != 's')
 8000abe:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <main+0xb0>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b73      	cmp	r3, #115	; 0x73
 8000ac4:	d002      	beq.n	8000acc <main+0x74>
          {
          printf("\r\n !!! Invalid Character, please press s to Start !!! \r\n");
 8000ac6:	4811      	ldr	r0, [pc, #68]	; (8000b0c <main+0xb4>)
 8000ac8:	f00c fe8e 	bl	800d7e8 <puts>
  while (name[0] != 's')
 8000acc:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <main+0xb0>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b73      	cmp	r3, #115	; 0x73
 8000ad2:	d1f0      	bne.n	8000ab6 <main+0x5e>
          }
      }
  Menu();
 8000ad4:	f000 fc58 	bl	8001388 <Menu>

  printf("\r\n");
 8000ad8:	4807      	ldr	r0, [pc, #28]	; (8000af8 <main+0xa0>)
 8000ada:	f00c fe85 	bl	800d7e8 <puts>
  printf("\r\n********************************************");
 8000ade:	480c      	ldr	r0, [pc, #48]	; (8000b10 <main+0xb8>)
 8000ae0:	f00c fe0e 	bl	800d700 <iprintf>
  printf("\r\n** Thank you for using Guitar Effects Processor By Edward and Nick **");
 8000ae4:	480b      	ldr	r0, [pc, #44]	; (8000b14 <main+0xbc>)
 8000ae6:	f00c fe0b 	bl	800d700 <iprintf>
  printf("\r\n********************************************\r\n");
 8000aea:	480b      	ldr	r0, [pc, #44]	; (8000b18 <main+0xc0>)
 8000aec:	f00c fe7c 	bl	800d7e8 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <main+0x98>
 8000af2:	bf00      	nop
 8000af4:	24000018 	.word	0x24000018
 8000af8:	08011898 	.word	0x08011898
 8000afc:	0801189c 	.word	0x0801189c
 8000b00:	080118d0 	.word	0x080118d0
 8000b04:	08011904 	.word	0x08011904
 8000b08:	24000000 	.word	0x24000000
 8000b0c:	08011924 	.word	0x08011924
 8000b10:	0801195c 	.word	0x0801195c
 8000b14:	0801198c 	.word	0x0801198c
 8000b18:	080119d4 	.word	0x080119d4

08000b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b0cc      	sub	sp, #304	; 0x130
 8000b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b22:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000b26:	224c      	movs	r2, #76	; 0x4c
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f00b ff24 	bl	800c978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b30:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b34:	2220      	movs	r2, #32
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f00b ff1d 	bl	800c978 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b3e:	f107 0308 	add.w	r3, r7, #8
 8000b42:	4618      	mov	r0, r3
 8000b44:	23bc      	movs	r3, #188	; 0xbc
 8000b46:	461a      	mov	r2, r3
 8000b48:	2100      	movs	r1, #0
 8000b4a:	f00b ff15 	bl	800c978 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b4e:	2002      	movs	r0, #2
 8000b50:	f006 fd06 	bl	8007560 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	4b61      	ldr	r3, [pc, #388]	; (8000ce0 <SystemClock_Config+0x1c4>)
 8000b5c:	699b      	ldr	r3, [r3, #24]
 8000b5e:	4a60      	ldr	r2, [pc, #384]	; (8000ce0 <SystemClock_Config+0x1c4>)
 8000b60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b64:	6193      	str	r3, [r2, #24]
 8000b66:	4b5e      	ldr	r3, [pc, #376]	; (8000ce0 <SystemClock_Config+0x1c4>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	4b5c      	ldr	r3, [pc, #368]	; (8000ce4 <SystemClock_Config+0x1c8>)
 8000b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b76:	4a5b      	ldr	r2, [pc, #364]	; (8000ce4 <SystemClock_Config+0x1c8>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b7e:	4b59      	ldr	r3, [pc, #356]	; (8000ce4 <SystemClock_Config+0x1c8>)
 8000b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b82:	f003 0201 	and.w	r2, r3, #1
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b8e:	bf00      	nop
 8000b90:	4b53      	ldr	r3, [pc, #332]	; (8000ce0 <SystemClock_Config+0x1c4>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b9c:	d1f8      	bne.n	8000b90 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000b9e:	4b52      	ldr	r3, [pc, #328]	; (8000ce8 <SystemClock_Config+0x1cc>)
 8000ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba2:	f023 0303 	bic.w	r3, r3, #3
 8000ba6:	4a50      	ldr	r2, [pc, #320]	; (8000ce8 <SystemClock_Config+0x1cc>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bb4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000bb8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000bce:	2378      	movs	r3, #120	; 0x78
 8000bd0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000bda:	2314      	movs	r3, #20
 8000bdc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000be0:	2302      	movs	r3, #2
 8000be2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000be6:	230c      	movs	r3, #12
 8000be8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f006 fcf9 	bl	80075f4 <HAL_RCC_OscConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000c08:	f000 fd96 	bl	8001738 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c0c:	233f      	movs	r3, #63	; 0x3f
 8000c0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c12:	2303      	movs	r3, #3
 8000c14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c1e:	2308      	movs	r3, #8
 8000c20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c24:	2340      	movs	r3, #64	; 0x40
 8000c26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c2a:	2340      	movs	r3, #64	; 0x40
 8000c2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c34:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c38:	2340      	movs	r3, #64	; 0x40
 8000c3a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c3e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000c42:	2104      	movs	r1, #4
 8000c44:	4618      	mov	r0, r3
 8000c46:	f007 f8e5 	bl	8007e14 <HAL_RCC_ClockConfig>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <SystemClock_Config+0x138>
  {
    Error_Handler();
 8000c50:	f000 fd72 	bl	8001738 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC
 8000c54:	f107 0308 	add.w	r3, r7, #8
 8000c58:	4a24      	ldr	r2, [pc, #144]	; (8000cec <SystemClock_Config+0x1d0>)
 8000c5a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000c5c:	f107 0308 	add.w	r3, r7, #8
 8000c60:	2201      	movs	r2, #1
 8000c62:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 18;
 8000c64:	f107 0308 	add.w	r3, r7, #8
 8000c68:	2212      	movs	r2, #18
 8000c6a:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 8000c6c:	f107 0308 	add.w	r3, r7, #8
 8000c70:	2201      	movs	r2, #1
 8000c72:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000c74:	f107 0308 	add.w	r3, r7, #8
 8000c78:	2202      	movs	r2, #2
 8000c7a:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c7c:	f107 0308 	add.w	r3, r7, #8
 8000c80:	2202      	movs	r2, #2
 8000c82:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000c84:	f107 0308 	add.w	r3, r7, #8
 8000c88:	22c0      	movs	r2, #192	; 0xc0
 8000c8a:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000c8c:	f107 0308 	add.w	r3, r7, #8
 8000c90:	2220      	movs	r2, #32
 8000c92:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8000c94:	f107 0308 	add.w	r3, r7, #8
 8000c98:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8000c9c:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c9e:	f107 0308 	add.w	r3, r7, #8
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000ca6:	f107 0308 	add.w	r3, r7, #8
 8000caa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000cae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000cb2:	f107 0308 	add.w	r3, r7, #8
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cbc:	f107 0308 	add.w	r3, r7, #8
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f007 fc2b 	bl	800851c <HAL_RCCEx_PeriphCLKConfig>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <SystemClock_Config+0x1b4>
  {
    Error_Handler();
 8000ccc:	f000 fd34 	bl	8001738 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000cd0:	f006 fc80 	bl	80075d4 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000cd4:	bf00      	nop
 8000cd6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	58024800 	.word	0x58024800
 8000ce4:	58000400 	.word	0x58000400
 8000ce8:	58024400 	.word	0x58024400
 8000cec:	000c0002 	.word	0x000c0002

08000cf0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cf6:	f107 031c 	add.w	r3, r7, #28
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d02:	463b      	mov	r3, r7
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
 8000d10:	615a      	str	r2, [r3, #20]
 8000d12:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d14:	4b30      	ldr	r3, [pc, #192]	; (8000dd8 <MX_ADC1_Init+0xe8>)
 8000d16:	4a31      	ldr	r2, [pc, #196]	; (8000ddc <MX_ADC1_Init+0xec>)
 8000d18:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d1a:	4b2f      	ldr	r3, [pc, #188]	; (8000dd8 <MX_ADC1_Init+0xe8>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d20:	4b2d      	ldr	r3, [pc, #180]	; (8000dd8 <MX_ADC1_Init+0xe8>)
 8000d22:	2208      	movs	r2, #8
 8000d24:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d26:	4b2c      	ldr	r3, [pc, #176]	; (8000dd8 <MX_ADC1_Init+0xe8>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d2c:	4b2a      	ldr	r3, [pc, #168]	; (8000dd8 <MX_ADC1_Init+0xe8>)
 8000d2e:	2204      	movs	r2, #4
 8000d30:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d32:	4b29      	ldr	r3, [pc, #164]	; (8000dd8 <MX_ADC1_Init+0xe8>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d38:	4b27      	ldr	r3, [pc, #156]	; (8000dd8 <MX_ADC1_Init+0xe8>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000d3e:	4b26      	ldr	r3, [pc, #152]	; (8000dd8 <MX_ADC1_Init+0xe8>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d44:	4b24      	ldr	r3, [pc, #144]	; (8000dd8 <MX_ADC1_Init+0xe8>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000d4a:	4b23      	ldr	r3, [pc, #140]	; (8000dd8 <MX_ADC1_Init+0xe8>)
 8000d4c:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000d50:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d52:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <MX_ADC1_Init+0xe8>)
 8000d54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d58:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000d5a:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <MX_ADC1_Init+0xe8>)
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d60:	4b1d      	ldr	r3, [pc, #116]	; (8000dd8 <MX_ADC1_Init+0xe8>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d66:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <MX_ADC1_Init+0xe8>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <MX_ADC1_Init+0xe8>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d74:	4818      	ldr	r0, [pc, #96]	; (8000dd8 <MX_ADC1_Init+0xe8>)
 8000d76:	f001 fc5f 	bl	8002638 <HAL_ADC_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000d80:	f000 fcda 	bl	8001738 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d88:	f107 031c 	add.w	r3, r7, #28
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4812      	ldr	r0, [pc, #72]	; (8000dd8 <MX_ADC1_Init+0xe8>)
 8000d90:	f002 fcfa 	bl	8003788 <HAL_ADCEx_MultiModeConfigChannel>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000d9a:	f000 fccd 	bl	8001738 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <MX_ADC1_Init+0xf0>)
 8000da0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000da2:	2306      	movs	r3, #6
 8000da4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000da6:	2300      	movs	r3, #0
 8000da8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000daa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000dae:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000db0:	2304      	movs	r3, #4
 8000db2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000db8:	2300      	movs	r3, #0
 8000dba:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <MX_ADC1_Init+0xe8>)
 8000dc2:	f001 fea7 	bl	8002b14 <HAL_ADC_ConfigChannel>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000dcc:	f000 fcb4 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dd0:	bf00      	nop
 8000dd2:	3728      	adds	r7, #40	; 0x28
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	24005884 	.word	0x24005884
 8000ddc:	40022000 	.word	0x40022000
 8000de0:	3ef08000 	.word	0x3ef08000

08000de4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	; 0x28
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	2224      	movs	r2, #36	; 0x24
 8000dee:	2100      	movs	r1, #0
 8000df0:	4618      	mov	r0, r3
 8000df2:	f00b fdc1 	bl	800c978 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000df6:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <MX_DAC1_Init+0x5c>)
 8000df8:	4a12      	ldr	r2, [pc, #72]	; (8000e44 <MX_DAC1_Init+0x60>)
 8000dfa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000dfc:	4810      	ldr	r0, [pc, #64]	; (8000e40 <MX_DAC1_Init+0x5c>)
 8000dfe:	f002 feac 	bl	8003b5a <HAL_DAC_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000e08:	f000 fc96 	bl	8001738 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T1_TRGO;
 8000e10:	2306      	movs	r3, #6
 8000e12:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	2200      	movs	r2, #0
 8000e24:	4619      	mov	r1, r3
 8000e26:	4806      	ldr	r0, [pc, #24]	; (8000e40 <MX_DAC1_Init+0x5c>)
 8000e28:	f002 ff82 	bl	8003d30 <HAL_DAC_ConfigChannel>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000e32:	f000 fc81 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	3728      	adds	r7, #40	; 0x28
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	24005364 	.word	0x24005364
 8000e44:	40007400 	.word	0x40007400

08000e48 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000e4c:	4b22      	ldr	r3, [pc, #136]	; (8000ed8 <MX_ETH_Init+0x90>)
 8000e4e:	4a23      	ldr	r2, [pc, #140]	; (8000edc <MX_ETH_Init+0x94>)
 8000e50:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8000e52:	4b21      	ldr	r3, [pc, #132]	; (8000ed8 <MX_ETH_Init+0x90>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000e5a:	4b1f      	ldr	r3, [pc, #124]	; (8000ed8 <MX_ETH_Init+0x90>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	2280      	movs	r2, #128	; 0x80
 8000e62:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000e64:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <MX_ETH_Init+0x90>)
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	3302      	adds	r3, #2
 8000e6a:	22e1      	movs	r2, #225	; 0xe1
 8000e6c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <MX_ETH_Init+0x90>)
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	3303      	adds	r3, #3
 8000e74:	2200      	movs	r2, #0
 8000e76:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000e78:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <MX_ETH_Init+0x90>)
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	2200      	movs	r2, #0
 8000e80:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <MX_ETH_Init+0x90>)
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	3305      	adds	r3, #5
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <MX_ETH_Init+0x90>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000e92:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <MX_ETH_Init+0x90>)
 8000e94:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <MX_ETH_Init+0x98>)
 8000e96:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <MX_ETH_Init+0x90>)
 8000e9a:	4a12      	ldr	r2, [pc, #72]	; (8000ee4 <MX_ETH_Init+0x9c>)
 8000e9c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <MX_ETH_Init+0x90>)
 8000ea0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000ea4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000ea6:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <MX_ETH_Init+0x90>)
 8000ea8:	f005 fc18 	bl	80066dc <HAL_ETH_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000eb2:	f000 fc41 	bl	8001738 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000eb6:	2234      	movs	r2, #52	; 0x34
 8000eb8:	2100      	movs	r1, #0
 8000eba:	480b      	ldr	r0, [pc, #44]	; (8000ee8 <MX_ETH_Init+0xa0>)
 8000ebc:	f00b fd5c 	bl	800c978 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000ec0:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <MX_ETH_Init+0xa0>)
 8000ec2:	2221      	movs	r2, #33	; 0x21
 8000ec4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ec6:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <MX_ETH_Init+0xa0>)
 8000ec8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ecc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <MX_ETH_Init+0xa0>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	240059bc 	.word	0x240059bc
 8000edc:	40028000 	.word	0x40028000
 8000ee0:	2400024c 	.word	0x2400024c
 8000ee4:	240001ec 	.word	0x240001ec
 8000ee8:	24005a2c 	.word	0x24005a2c

08000eec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ef2:	f107 0310 	add.w	r3, r7, #16
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f0a:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <MX_TIM1_Init+0xa0>)
 8000f0c:	4a20      	ldr	r2, [pc, #128]	; (8000f90 <MX_TIM1_Init+0xa4>)
 8000f0e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f10:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <MX_TIM1_Init+0xa0>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f16:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <MX_TIM1_Init+0xa0>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <MX_TIM1_Init+0xa0>)
 8000f1e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000f22:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f24:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <MX_TIM1_Init+0xa0>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f2a:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <MX_TIM1_Init+0xa0>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f30:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <MX_TIM1_Init+0xa0>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f36:	4815      	ldr	r0, [pc, #84]	; (8000f8c <MX_TIM1_Init+0xa0>)
 8000f38:	f009 f9b4 	bl	800a2a4 <HAL_TIM_Base_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000f42:	f000 fbf9 	bl	8001738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f4c:	f107 0310 	add.w	r3, r7, #16
 8000f50:	4619      	mov	r1, r3
 8000f52:	480e      	ldr	r0, [pc, #56]	; (8000f8c <MX_TIM1_Init+0xa0>)
 8000f54:	f009 fa2c 	bl	800a3b0 <HAL_TIM_ConfigClockSource>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000f5e:	f000 fbeb 	bl	8001738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f62:	2320      	movs	r3, #32
 8000f64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f66:	2300      	movs	r3, #0
 8000f68:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	4619      	mov	r1, r3
 8000f72:	4806      	ldr	r0, [pc, #24]	; (8000f8c <MX_TIM1_Init+0xa0>)
 8000f74:	f009 fc24 	bl	800a7c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f7e:	f000 fbdb 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	3720      	adds	r7, #32
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	24005968 	.word	0x24005968
 8000f90:	40010000 	.word	0x40010000

08000f94 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f98:	4b22      	ldr	r3, [pc, #136]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000f9a:	4a23      	ldr	r2, [pc, #140]	; (8001028 <MX_USART3_UART_Init+0x94>)
 8000f9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f9e:	4b21      	ldr	r3, [pc, #132]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000fa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fa4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fac:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fb8:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000fba:	220c      	movs	r2, #12
 8000fbc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fbe:	4b19      	ldr	r3, [pc, #100]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc4:	4b17      	ldr	r3, [pc, #92]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fca:	4b16      	ldr	r3, [pc, #88]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fd0:	4b14      	ldr	r3, [pc, #80]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fd6:	4b13      	ldr	r3, [pc, #76]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fdc:	4811      	ldr	r0, [pc, #68]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000fde:	f009 fc77 	bl	800a8d0 <HAL_UART_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000fe8:	f000 fba6 	bl	8001738 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fec:	2100      	movs	r1, #0
 8000fee:	480d      	ldr	r0, [pc, #52]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000ff0:	f00a ff7d 	bl	800beee <HAL_UARTEx_SetTxFifoThreshold>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ffa:	f000 fb9d 	bl	8001738 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ffe:	2100      	movs	r1, #0
 8001000:	4808      	ldr	r0, [pc, #32]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8001002:	f00a ffb2 	bl	800bf6a <HAL_UARTEx_SetRxFifoThreshold>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800100c:	f000 fb94 	bl	8001738 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001010:	4804      	ldr	r0, [pc, #16]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8001012:	f00a ff33 	bl	800be7c <HAL_UARTEx_DisableFifoMode>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800101c:	f000 fb8c 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	24005378 	.word	0x24005378
 8001028:	40004800 	.word	0x40004800

0800102c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001030:	4b15      	ldr	r3, [pc, #84]	; (8001088 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001032:	4a16      	ldr	r2, [pc, #88]	; (800108c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001034:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001036:	4b14      	ldr	r3, [pc, #80]	; (8001088 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001038:	2209      	movs	r2, #9
 800103a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800103e:	2202      	movs	r2, #2
 8001040:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800104a:	2202      	movs	r2, #2
 800104c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001050:	2201      	movs	r2, #1
 8001052:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001056:	2200      	movs	r2, #0
 8001058:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800105c:	2200      	movs	r2, #0
 800105e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001062:	2201      	movs	r2, #1
 8001064:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001068:	2201      	movs	r2, #1
 800106a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800106e:	2200      	movs	r2, #0
 8001070:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001074:	f006 f92b 	bl	80072ce <HAL_PCD_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800107e:	f000 fb5b 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	24005404 	.word	0x24005404
 800108c:	40080000 	.word	0x40080000

08001090 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <MX_DMA_Init+0x5c>)
 8001098:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800109c:	4a13      	ldr	r2, [pc, #76]	; (80010ec <MX_DMA_Init+0x5c>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <MX_DMA_Init+0x5c>)
 80010a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2100      	movs	r1, #0
 80010b8:	200b      	movs	r0, #11
 80010ba:	f002 fd1a 	bl	8003af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80010be:	200b      	movs	r0, #11
 80010c0:	f002 fd31 	bl	8003b26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2100      	movs	r1, #0
 80010c8:	200c      	movs	r0, #12
 80010ca:	f002 fd12 	bl	8003af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80010ce:	200c      	movs	r0, #12
 80010d0:	f002 fd29 	bl	8003b26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2100      	movs	r1, #0
 80010d8:	200d      	movs	r0, #13
 80010da:	f002 fd0a 	bl	8003af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80010de:	200d      	movs	r0, #13
 80010e0:	f002 fd21 	bl	8003b26 <HAL_NVIC_EnableIRQ>

}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	58024400 	.word	0x58024400

080010f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08c      	sub	sp, #48	; 0x30
 80010f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
 8001104:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001106:	4b65      	ldr	r3, [pc, #404]	; (800129c <MX_GPIO_Init+0x1ac>)
 8001108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110c:	4a63      	ldr	r2, [pc, #396]	; (800129c <MX_GPIO_Init+0x1ac>)
 800110e:	f043 0304 	orr.w	r3, r3, #4
 8001112:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001116:	4b61      	ldr	r3, [pc, #388]	; (800129c <MX_GPIO_Init+0x1ac>)
 8001118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111c:	f003 0304 	and.w	r3, r3, #4
 8001120:	61bb      	str	r3, [r7, #24]
 8001122:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001124:	4b5d      	ldr	r3, [pc, #372]	; (800129c <MX_GPIO_Init+0x1ac>)
 8001126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800112a:	4a5c      	ldr	r2, [pc, #368]	; (800129c <MX_GPIO_Init+0x1ac>)
 800112c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001130:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001134:	4b59      	ldr	r3, [pc, #356]	; (800129c <MX_GPIO_Init+0x1ac>)
 8001136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800113a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	4b56      	ldr	r3, [pc, #344]	; (800129c <MX_GPIO_Init+0x1ac>)
 8001144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001148:	4a54      	ldr	r2, [pc, #336]	; (800129c <MX_GPIO_Init+0x1ac>)
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001152:	4b52      	ldr	r3, [pc, #328]	; (800129c <MX_GPIO_Init+0x1ac>)
 8001154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001160:	4b4e      	ldr	r3, [pc, #312]	; (800129c <MX_GPIO_Init+0x1ac>)
 8001162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001166:	4a4d      	ldr	r2, [pc, #308]	; (800129c <MX_GPIO_Init+0x1ac>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001170:	4b4a      	ldr	r3, [pc, #296]	; (800129c <MX_GPIO_Init+0x1ac>)
 8001172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800117e:	4b47      	ldr	r3, [pc, #284]	; (800129c <MX_GPIO_Init+0x1ac>)
 8001180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001184:	4a45      	ldr	r2, [pc, #276]	; (800129c <MX_GPIO_Init+0x1ac>)
 8001186:	f043 0308 	orr.w	r3, r3, #8
 800118a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800118e:	4b43      	ldr	r3, [pc, #268]	; (800129c <MX_GPIO_Init+0x1ac>)
 8001190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001194:	f003 0308 	and.w	r3, r3, #8
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800119c:	4b3f      	ldr	r3, [pc, #252]	; (800129c <MX_GPIO_Init+0x1ac>)
 800119e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a2:	4a3e      	ldr	r2, [pc, #248]	; (800129c <MX_GPIO_Init+0x1ac>)
 80011a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ac:	4b3b      	ldr	r3, [pc, #236]	; (800129c <MX_GPIO_Init+0x1ac>)
 80011ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ba:	4b38      	ldr	r3, [pc, #224]	; (800129c <MX_GPIO_Init+0x1ac>)
 80011bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c0:	4a36      	ldr	r2, [pc, #216]	; (800129c <MX_GPIO_Init+0x1ac>)
 80011c2:	f043 0310 	orr.w	r3, r3, #16
 80011c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ca:	4b34      	ldr	r3, [pc, #208]	; (800129c <MX_GPIO_Init+0x1ac>)
 80011cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d0:	f003 0310 	and.w	r3, r3, #16
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	f244 0101 	movw	r1, #16385	; 0x4001
 80011de:	4830      	ldr	r0, [pc, #192]	; (80012a0 <MX_GPIO_Init+0x1b0>)
 80011e0:	f006 f842 	bl	8007268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ea:	482e      	ldr	r0, [pc, #184]	; (80012a4 <MX_GPIO_Init+0x1b4>)
 80011ec:	f006 f83c 	bl	8007268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2102      	movs	r1, #2
 80011f4:	482c      	ldr	r0, [pc, #176]	; (80012a8 <MX_GPIO_Init+0x1b8>)
 80011f6:	f006 f837 	bl	8007268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001208:	f107 031c 	add.w	r3, r7, #28
 800120c:	4619      	mov	r1, r3
 800120e:	4827      	ldr	r0, [pc, #156]	; (80012ac <MX_GPIO_Init+0x1bc>)
 8001210:	f005 fe7a 	bl	8006f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001214:	f244 0301 	movw	r3, #16385	; 0x4001
 8001218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121a:	2301      	movs	r3, #1
 800121c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001226:	f107 031c 	add.w	r3, r7, #28
 800122a:	4619      	mov	r1, r3
 800122c:	481c      	ldr	r0, [pc, #112]	; (80012a0 <MX_GPIO_Init+0x1b0>)
 800122e:	f005 fe6b 	bl	8006f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001236:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001238:	2301      	movs	r3, #1
 800123a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001240:	2300      	movs	r3, #0
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	4619      	mov	r1, r3
 800124a:	4816      	ldr	r0, [pc, #88]	; (80012a4 <MX_GPIO_Init+0x1b4>)
 800124c:	f005 fe5c 	bl	8006f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : StopButton_Pin */
  GPIO_InitStruct.Pin = StopButton_Pin;
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001254:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <MX_GPIO_Init+0x1c0>)
 8001256:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(StopButton_GPIO_Port, &GPIO_InitStruct);
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	4619      	mov	r1, r3
 8001262:	4810      	ldr	r0, [pc, #64]	; (80012a4 <MX_GPIO_Init+0x1b4>)
 8001264:	f005 fe50 	bl	8006f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001268:	2302      	movs	r3, #2
 800126a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126c:	2301      	movs	r3, #1
 800126e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2300      	movs	r3, #0
 8001276:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001278:	f107 031c 	add.w	r3, r7, #28
 800127c:	4619      	mov	r1, r3
 800127e:	480a      	ldr	r0, [pc, #40]	; (80012a8 <MX_GPIO_Init+0x1b8>)
 8001280:	f005 fe42 	bl	8006f08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001284:	2200      	movs	r2, #0
 8001286:	2100      	movs	r1, #0
 8001288:	2017      	movs	r0, #23
 800128a:	f002 fc32 	bl	8003af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800128e:	2017      	movs	r0, #23
 8001290:	f002 fc49 	bl	8003b26 <HAL_NVIC_EnableIRQ>

}
 8001294:	bf00      	nop
 8001296:	3730      	adds	r7, #48	; 0x30
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	58024400 	.word	0x58024400
 80012a0:	58020400 	.word	0x58020400
 80012a4:	58020c00 	.word	0x58020c00
 80012a8:	58021000 	.word	0x58021000
 80012ac:	58020800 	.word	0x58020800
 80012b0:	11210000 	.word	0x11210000

080012b4 <Serial_Scanf>:

/* USER CODE BEGIN 4 */


int Serial_Scanf(char *ptr, int len)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]

  int DataIdx = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
  uint8_t thechar;
  thechar= ' ';
 80012c2:	2320      	movs	r3, #32
 80012c4:	72fb      	strb	r3, [r7, #11]
  while(thechar!= '\n' && thechar != '\r' && DataIdx<len)
 80012c6:	e013      	b.n	80012f0 <Serial_Scanf+0x3c>
  {
#ifdef __GNUC__
    thechar = __io_getchar();
 80012c8:	f000 f836 	bl	8001338 <__io_getchar>
 80012cc:	4603      	mov	r3, r0
 80012ce:	72fb      	strb	r3, [r7, #11]

#else
    thechar = fgetc(NULL);
#endif
  if ( thechar  >= 0xFF)
 80012d0:	7afb      	ldrb	r3, [r7, #11]
 80012d2:	2bff      	cmp	r3, #255	; 0xff
 80012d4:	d104      	bne.n	80012e0 <Serial_Scanf+0x2c>
  {
    printf("\n\r  !!! Please enter a valid ASCII character \n");
 80012d6:	480e      	ldr	r0, [pc, #56]	; (8001310 <Serial_Scanf+0x5c>)
 80012d8:	f00c fa86 	bl	800d7e8 <puts>
    return 0xFF;
 80012dc:	23ff      	movs	r3, #255	; 0xff
 80012de:	e012      	b.n	8001306 <Serial_Scanf+0x52>
  }
  *ptr++ =thechar;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	1c5a      	adds	r2, r3, #1
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	7afa      	ldrb	r2, [r7, #11]
 80012e8:	701a      	strb	r2, [r3, #0]
  DataIdx+=1;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	3301      	adds	r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
  while(thechar!= '\n' && thechar != '\r' && DataIdx<len)
 80012f0:	7afb      	ldrb	r3, [r7, #11]
 80012f2:	2b0a      	cmp	r3, #10
 80012f4:	d006      	beq.n	8001304 <Serial_Scanf+0x50>
 80012f6:	7afb      	ldrb	r3, [r7, #11]
 80012f8:	2b0d      	cmp	r3, #13
 80012fa:	d003      	beq.n	8001304 <Serial_Scanf+0x50>
 80012fc:	68fa      	ldr	r2, [r7, #12]
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	429a      	cmp	r2, r3
 8001302:	dbe1      	blt.n	80012c8 <Serial_Scanf+0x14>
  }
  return DataIdx;
 8001304:	68fb      	ldr	r3, [r7, #12]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	08011a04 	.word	0x08011a04

08001314 <__io_putchar>:
  * @param  None
  * @retval None
  */

PUTCHAR_PROTOTYPE
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 800131c:	1d39      	adds	r1, r7, #4
 800131e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001322:	2201      	movs	r2, #1
 8001324:	4803      	ldr	r0, [pc, #12]	; (8001334 <__io_putchar+0x20>)
 8001326:	f009 fb23 	bl	800a970 <HAL_UART_Transmit>
  //HAL_Delay(1);
  return ch;
 800132a:	687b      	ldr	r3, [r7, #4]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	24005378 	.word	0x24005378

08001338 <__io_getchar>:



GETCHAR_PROTOTYPE
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	71fb      	strb	r3, [r7, #7]
  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart3);
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <__io_getchar+0x4c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2208      	movs	r2, #8
 8001348:	621a      	str	r2, [r3, #32]
  HAL_Delay(20);
 800134a:	2014      	movs	r0, #20
 800134c:	f000 ff24 	bl	8002198 <HAL_Delay>

  HAL_UART_Receive(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001350:	1df9      	adds	r1, r7, #7
 8001352:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001356:	2201      	movs	r2, #1
 8001358:	480a      	ldr	r0, [pc, #40]	; (8001384 <__io_getchar+0x4c>)
 800135a:	f009 fb9f 	bl	800aa9c <HAL_UART_Receive>
  HAL_Delay(20);
 800135e:	2014      	movs	r0, #20
 8001360:	f000 ff1a 	bl	8002198 <HAL_Delay>

  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001364:	1df9      	adds	r1, r7, #7
 8001366:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800136a:	2201      	movs	r2, #1
 800136c:	4805      	ldr	r0, [pc, #20]	; (8001384 <__io_getchar+0x4c>)
 800136e:	f009 faff 	bl	800a970 <HAL_UART_Transmit>
  HAL_Delay(20);
 8001372:	2014      	movs	r0, #20
 8001374:	f000 ff10 	bl	8002198 <HAL_Delay>

  return ch;
 8001378:	79fb      	ldrb	r3, [r7, #7]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	24005378 	.word	0x24005378

08001388 <Menu>:

void Menu(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b092      	sub	sp, #72	; 0x48
 800138c:	af02      	add	r7, sp, #8
  int menu_option = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	62bb      	str	r3, [r7, #40]	; 0x28
  uint8_t stop_test = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  char menu_select[5];
  char menu1[] ="1";
 8001398:	2331      	movs	r3, #49	; 0x31
 800139a:	833b      	strh	r3, [r7, #24]
  char menu2[] ="2";
 800139c:	2332      	movs	r3, #50	; 0x32
 800139e:	82bb      	strh	r3, [r7, #20]
  char menu3[] ="3";
 80013a0:	2333      	movs	r3, #51	; 0x33
 80013a2:	823b      	strh	r3, [r7, #16]
  char menu4[] ="4";
 80013a4:	2334      	movs	r3, #52	; 0x34
 80013a6:	81bb      	strh	r3, [r7, #12]
  char menu5[] ="5";
 80013a8:	2335      	movs	r3, #53	; 0x35
 80013aa:	813b      	strh	r3, [r7, #8]
  char menu6[] ="6";
 80013ac:	2336      	movs	r3, #54	; 0x36
 80013ae:	80bb      	strh	r3, [r7, #4]
  int e1 = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	63bb      	str	r3, [r7, #56]	; 0x38
  int e2 = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	637b      	str	r3, [r7, #52]	; 0x34
  int e3 = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	633b      	str	r3, [r7, #48]	; 0x30
  int e4 = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c

  char menu_init[] ="0";
 80013c0:	2330      	movs	r3, #48	; 0x30
 80013c2:	803b      	strh	r3, [r7, #0]

  if(HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET,ADC_SINGLE_ENDED) != HAL_OK){
 80013c4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80013c8:	2100      	movs	r1, #0
 80013ca:	4885      	ldr	r0, [pc, #532]	; (80015e0 <Menu+0x258>)
 80013cc:	f002 f978 	bl	80036c0 <HAL_ADCEx_Calibration_Start>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <Menu+0x52>
      	  Error_Handler();
 80013d6:	f000 f9af 	bl	8001738 <Error_Handler>
    }
  HAL_TIM_Base_Start(&htim1);
 80013da:	4882      	ldr	r0, [pc, #520]	; (80015e4 <Menu+0x25c>)
 80013dc:	f008 ffba 	bl	800a354 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_buff, BufferSize) ;
 80013e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013e4:	4980      	ldr	r1, [pc, #512]	; (80015e8 <Menu+0x260>)
 80013e6:	487e      	ldr	r0, [pc, #504]	; (80015e0 <Menu+0x258>)
 80013e8:	f001 fac6 	bl	8002978 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) dac_buff, BufferSize, DAC_ALIGN_12B_R);
 80013ec:	2300      	movs	r3, #0
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013f4:	4a7d      	ldr	r2, [pc, #500]	; (80015ec <Menu+0x264>)
 80013f6:	2100      	movs	r1, #0
 80013f8:	487d      	ldr	r0, [pc, #500]	; (80015f0 <Menu+0x268>)
 80013fa:	f002 fbd1 	bl	8003ba0 <HAL_DAC_Start_DMA>

  printf("\r\n\r\n   Menu Options:");
 80013fe:	487d      	ldr	r0, [pc, #500]	; (80015f4 <Menu+0x26c>)
 8001400:	f00c f97e 	bl	800d700 <iprintf>
  printf("\r\n      1: Tremolo");
 8001404:	487c      	ldr	r0, [pc, #496]	; (80015f8 <Menu+0x270>)
 8001406:	f00c f97b 	bl	800d700 <iprintf>
  printf("   2: Delay");
 800140a:	487c      	ldr	r0, [pc, #496]	; (80015fc <Menu+0x274>)
 800140c:	f00c f978 	bl	800d700 <iprintf>
  printf("   3: Multi-Delay");
 8001410:	487b      	ldr	r0, [pc, #492]	; (8001600 <Menu+0x278>)
 8001412:	f00c f975 	bl	800d700 <iprintf>
  printf("   4: Distortion");
 8001416:	487b      	ldr	r0, [pc, #492]	; (8001604 <Menu+0x27c>)
 8001418:	f00c f972 	bl	800d700 <iprintf>
  printf("   5: Play");
 800141c:	487a      	ldr	r0, [pc, #488]	; (8001608 <Menu+0x280>)
 800141e:	f00c f96f 	bl	800d700 <iprintf>
  printf("   6: Exit \r\n");
 8001422:	487a      	ldr	r0, [pc, #488]	; (800160c <Menu+0x284>)
 8001424:	f00c f9e0 	bl	800d7e8 <puts>

  do
  {
    strcpy(menu_select, menu_init);
 8001428:	463a      	mov	r2, r7
 800142a:	f107 031c 	add.w	r3, r7, #28
 800142e:	4611      	mov	r1, r2
 8001430:	4618      	mov	r0, r3
 8001432:	f00c fa5a 	bl	800d8ea <strcpy>
    int menu_option=0;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	; 0x24


    menu_option = Serial_Scanf(menu_select,1);
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	2101      	movs	r1, #1
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff37 	bl	80012b4 <Serial_Scanf>
 8001446:	6278      	str	r0, [r7, #36]	; 0x24

    printf("\r\n\r\n   Menu Options:");
 8001448:	486a      	ldr	r0, [pc, #424]	; (80015f4 <Menu+0x26c>)
 800144a:	f00c f959 	bl	800d700 <iprintf>
    printf("\r\n      1: Tremolo");
 800144e:	486a      	ldr	r0, [pc, #424]	; (80015f8 <Menu+0x270>)
 8001450:	f00c f956 	bl	800d700 <iprintf>
    printf("   2: Single-Delay");
 8001454:	486e      	ldr	r0, [pc, #440]	; (8001610 <Menu+0x288>)
 8001456:	f00c f953 	bl	800d700 <iprintf>
    printf("   3: Multi-Delay");
 800145a:	4869      	ldr	r0, [pc, #420]	; (8001600 <Menu+0x278>)
 800145c:	f00c f950 	bl	800d700 <iprintf>
    printf("   4: Distortion");
 8001460:	4868      	ldr	r0, [pc, #416]	; (8001604 <Menu+0x27c>)
 8001462:	f00c f94d 	bl	800d700 <iprintf>
    printf("   5: Play");
 8001466:	4868      	ldr	r0, [pc, #416]	; (8001608 <Menu+0x280>)
 8001468:	f00c f94a 	bl	800d700 <iprintf>
    printf("   6: Exit \r\n");
 800146c:	4867      	ldr	r0, [pc, #412]	; (800160c <Menu+0x284>)
 800146e:	f00c f9bb 	bl	800d7e8 <puts>
/* CASE '1' selected */
    if(strncmp(menu_select, menu1, menu_option) == 0)
 8001472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001474:	f107 0118 	add.w	r1, r7, #24
 8001478:	f107 031c 	add.w	r3, r7, #28
 800147c:	4618      	mov	r0, r3
 800147e:	f00c fa3c 	bl	800d8fa <strncmp>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d107      	bne.n	8001498 <Menu+0x110>
    {
        printf("\r\n          ** Tremolo Toggled **\r\n");
 8001488:	4862      	ldr	r0, [pc, #392]	; (8001614 <Menu+0x28c>)
 800148a:	f00c f9ad 	bl	800d7e8 <puts>
        e1 ^= 1;
 800148e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001490:	f083 0301 	eor.w	r3, r3, #1
 8001494:	63bb      	str	r3, [r7, #56]	; 0x38
 8001496:	e057      	b.n	8001548 <Menu+0x1c0>

    }

/* CASE '2' selected */
    else if(strncmp(menu_select, menu2, menu_option) == 0)
 8001498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800149a:	f107 0114 	add.w	r1, r7, #20
 800149e:	f107 031c 	add.w	r3, r7, #28
 80014a2:	4618      	mov	r0, r3
 80014a4:	f00c fa29 	bl	800d8fa <strncmp>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d107      	bne.n	80014be <Menu+0x136>
    {
        printf("\r\n          ** Single-Delay Toggled **\r\n");
 80014ae:	485a      	ldr	r0, [pc, #360]	; (8001618 <Menu+0x290>)
 80014b0:	f00c f99a 	bl	800d7e8 <puts>
        e2 ^= 1;
 80014b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014b6:	f083 0301 	eor.w	r3, r3, #1
 80014ba:	637b      	str	r3, [r7, #52]	; 0x34
 80014bc:	e044      	b.n	8001548 <Menu+0x1c0>


    }

/* CASE '3' selected */
    else if(strncmp(menu_select, menu3, menu_option) == 0)
 80014be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014c0:	f107 0110 	add.w	r1, r7, #16
 80014c4:	f107 031c 	add.w	r3, r7, #28
 80014c8:	4618      	mov	r0, r3
 80014ca:	f00c fa16 	bl	800d8fa <strncmp>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d107      	bne.n	80014e4 <Menu+0x15c>
    {
    	printf("\r\n          ** Multi-Delay Toggled **\r\n");
 80014d4:	4851      	ldr	r0, [pc, #324]	; (800161c <Menu+0x294>)
 80014d6:	f00c f987 	bl	800d7e8 <puts>
    	e3 ^= 1;
 80014da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014dc:	f083 0301 	eor.w	r3, r3, #1
 80014e0:	633b      	str	r3, [r7, #48]	; 0x30
 80014e2:	e031      	b.n	8001548 <Menu+0x1c0>

    }
/* CASE '4' selected */
    else if(strncmp(menu_select, menu4, menu_option) == 0)
 80014e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014e6:	f107 010c 	add.w	r1, r7, #12
 80014ea:	f107 031c 	add.w	r3, r7, #28
 80014ee:	4618      	mov	r0, r3
 80014f0:	f00c fa03 	bl	800d8fa <strncmp>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d107      	bne.n	800150a <Menu+0x182>
    {
    	printf("\r\n          ** Distortion Toggled **\r\n");
 80014fa:	4849      	ldr	r0, [pc, #292]	; (8001620 <Menu+0x298>)
 80014fc:	f00c f974 	bl	800d7e8 <puts>
    	e4 ^= 1;
 8001500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001502:	f083 0301 	eor.w	r3, r3, #1
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001508:	e01e      	b.n	8001548 <Menu+0x1c0>

    }
/* CASE '5' selected */
    else if(strncmp(menu_select, menu5, menu_option) == 0)
 800150a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800150c:	f107 0108 	add.w	r1, r7, #8
 8001510:	f107 031c 	add.w	r3, r7, #28
 8001514:	4618      	mov	r0, r3
 8001516:	f00c f9f0 	bl	800d8fa <strncmp>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d013      	beq.n	8001548 <Menu+0x1c0>


    }

/* CASE 'Exit' selected */
    else if(strncmp(menu_select, menu6, menu_option) == 0)
 8001520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001522:	1d39      	adds	r1, r7, #4
 8001524:	f107 031c 	add.w	r3, r7, #28
 8001528:	4618      	mov	r0, r3
 800152a:	f00c f9e6 	bl	800d8fa <strncmp>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d106      	bne.n	8001542 <Menu+0x1ba>
    {
        printf("\n\r          >> Effect processor shutdown. <<\n\r");
 8001534:	483b      	ldr	r0, [pc, #236]	; (8001624 <Menu+0x29c>)
 8001536:	f00c f8e3 	bl	800d700 <iprintf>
        stop_test=1;
 800153a:	2301      	movs	r3, #1
 800153c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001540:	e002      	b.n	8001548 <Menu+0x1c0>
    }

/* CASE wrong selection */
    else
    {
        printf("\r\n                !! INVALID CHOICE\r\n");
 8001542:	4839      	ldr	r0, [pc, #228]	; (8001628 <Menu+0x2a0>)
 8001544:	f00c f950 	bl	800d7e8 <puts>
    }

    printf("\r\n");
 8001548:	4838      	ldr	r0, [pc, #224]	; (800162c <Menu+0x2a4>)
 800154a:	f00c f94d 	bl	800d7e8 <puts>
    printf("\r\nSettings:      Tremolo: %d",e1);
 800154e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001550:	4837      	ldr	r0, [pc, #220]	; (8001630 <Menu+0x2a8>)
 8001552:	f00c f8d5 	bl	800d700 <iprintf>
    printf("   Single-Delay: %d",e2);
 8001556:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001558:	4836      	ldr	r0, [pc, #216]	; (8001634 <Menu+0x2ac>)
 800155a:	f00c f8d1 	bl	800d700 <iprintf>
    printf("   Multi-Delay: %d",e3);
 800155e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001560:	4835      	ldr	r0, [pc, #212]	; (8001638 <Menu+0x2b0>)
 8001562:	f00c f8cd 	bl	800d700 <iprintf>
    printf("   Distortion: %d\r\n",e4);
 8001566:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001568:	4834      	ldr	r0, [pc, #208]	; (800163c <Menu+0x2b4>)
 800156a:	f00c f8c9 	bl	800d700 <iprintf>

if (button_state){
 800156e:	4b34      	ldr	r3, [pc, #208]	; (8001640 <Menu+0x2b8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d023      	beq.n	80015be <Menu+0x236>
	printf("\r\n Playing: Click Button to Change Selections\r\n");
 8001576:	4833      	ldr	r0, [pc, #204]	; (8001644 <Menu+0x2bc>)
 8001578:	f00c f936 	bl	800d7e8 <puts>
	while(button_state){
 800157c:	e005      	b.n	800158a <Menu+0x202>
		effectfunc(e1,e2,e3,e4);
 800157e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001582:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001584:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001586:	f7ff f883 	bl	8000690 <effectfunc>
	while(button_state){
 800158a:	4b2d      	ldr	r3, [pc, #180]	; (8001640 <Menu+0x2b8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f5      	bne.n	800157e <Menu+0x1f6>
	}
	printf("\r\n\r\n   Menu Options:");
 8001592:	4818      	ldr	r0, [pc, #96]	; (80015f4 <Menu+0x26c>)
 8001594:	f00c f8b4 	bl	800d700 <iprintf>
	printf("\r\n      1: Tremolo");
 8001598:	4817      	ldr	r0, [pc, #92]	; (80015f8 <Menu+0x270>)
 800159a:	f00c f8b1 	bl	800d700 <iprintf>
	printf("   2: Single-Delay");
 800159e:	481c      	ldr	r0, [pc, #112]	; (8001610 <Menu+0x288>)
 80015a0:	f00c f8ae 	bl	800d700 <iprintf>
	printf("   3: Multi-Delay");
 80015a4:	4816      	ldr	r0, [pc, #88]	; (8001600 <Menu+0x278>)
 80015a6:	f00c f8ab 	bl	800d700 <iprintf>
	printf("   4: Distortion");
 80015aa:	4816      	ldr	r0, [pc, #88]	; (8001604 <Menu+0x27c>)
 80015ac:	f00c f8a8 	bl	800d700 <iprintf>
	printf("   5: Play");
 80015b0:	4815      	ldr	r0, [pc, #84]	; (8001608 <Menu+0x280>)
 80015b2:	f00c f8a5 	bl	800d700 <iprintf>
	printf("   6: Exit \r\n");
 80015b6:	4815      	ldr	r0, [pc, #84]	; (800160c <Menu+0x284>)
 80015b8:	f00c f916 	bl	800d7e8 <puts>
 80015bc:	e006      	b.n	80015cc <Menu+0x244>
}
else if (!button_state){
 80015be:	4b20      	ldr	r3, [pc, #128]	; (8001640 <Menu+0x2b8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d102      	bne.n	80015cc <Menu+0x244>
	printf("\r\n Click Button and then Select 5 to Start Playback\r\n");
 80015c6:	4820      	ldr	r0, [pc, #128]	; (8001648 <Menu+0x2c0>)
 80015c8:	f00c f90e 	bl	800d7e8 <puts>
}



  } while (stop_test != 1);
 80015cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	f47f af29 	bne.w	8001428 <Menu+0xa0>
}
 80015d6:	bf00      	nop
 80015d8:	3740      	adds	r7, #64	; 0x40
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	24005884 	.word	0x24005884
 80015e4:	24005968 	.word	0x24005968
 80015e8:	240002e0 	.word	0x240002e0
 80015ec:	240012e0 	.word	0x240012e0
 80015f0:	24005364 	.word	0x24005364
 80015f4:	08011a34 	.word	0x08011a34
 80015f8:	08011a4c 	.word	0x08011a4c
 80015fc:	08011a60 	.word	0x08011a60
 8001600:	08011a6c 	.word	0x08011a6c
 8001604:	08011a80 	.word	0x08011a80
 8001608:	08011a94 	.word	0x08011a94
 800160c:	08011aa0 	.word	0x08011aa0
 8001610:	08011ab0 	.word	0x08011ab0
 8001614:	08011ac4 	.word	0x08011ac4
 8001618:	08011ae8 	.word	0x08011ae8
 800161c:	08011b10 	.word	0x08011b10
 8001620:	08011b38 	.word	0x08011b38
 8001624:	08011b60 	.word	0x08011b60
 8001628:	08011b90 	.word	0x08011b90
 800162c:	08011898 	.word	0x08011898
 8001630:	08011bb8 	.word	0x08011bb8
 8001634:	08011bd8 	.word	0x08011bd8
 8001638:	08011bec 	.word	0x08011bec
 800163c:	08011c00 	.word	0x08011c00
 8001640:	240002c8 	.word	0x240002c8
 8001644:	08011c14 	.word	0x08011c14
 8001648:	08011c44 	.word	0x08011c44

0800164c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == StopButton_Pin){ //check interrupt for specific pin
 8001656:	88fb      	ldrh	r3, [r7, #6]
 8001658:	2b80      	cmp	r3, #128	; 0x80
 800165a:	d111      	bne.n	8001680 <HAL_GPIO_EXTI_Callback+0x34>
		button_state ^= 1;
 800165c:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <HAL_GPIO_EXTI_Callback+0x3c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f083 0301 	eor.w	r3, r3, #1
 8001664:	4a08      	ldr	r2, [pc, #32]	; (8001688 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001666:	6013      	str	r3, [r2, #0]
		memset(adc_buff,0,sizeof(adc_buff));
 8001668:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800166c:	2100      	movs	r1, #0
 800166e:	4807      	ldr	r0, [pc, #28]	; (800168c <HAL_GPIO_EXTI_Callback+0x40>)
 8001670:	f00b f982 	bl	800c978 <memset>
		memset(dac_buff,0,sizeof(dac_buff));
 8001674:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001678:	2100      	movs	r1, #0
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <HAL_GPIO_EXTI_Callback+0x44>)
 800167c:	f00b f97c 	bl	800c978 <memset>
	}
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	240002c8 	.word	0x240002c8
 800168c:	240002e0 	.word	0x240002e0
 8001690:	240012e0 	.word	0x240012e0

08001694 <HAL_DAC_ConvCpltCallbackCh1>:


void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	DACbuff_Full = 1;
 800169c:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <HAL_DAC_ConvCpltCallbackCh1+0x1c>)
 800169e:	2201      	movs	r2, #1
 80016a0:	601a      	str	r2, [r3, #0]
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	240002d8 	.word	0x240002d8

080016b4 <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	DACbuff_Half = 1;
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <HAL_DAC_ConvHalfCpltCallbackCh1+0x1c>)
 80016be:	2201      	movs	r2, #1
 80016c0:	601a      	str	r2, [r3, #0]

}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	240002d4 	.word	0x240002d4

080016d4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	ADCbuff_Full = 1;
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <HAL_ADC_ConvCpltCallback+0x38>)
 80016de:	2201      	movs	r2, #1
 80016e0:	601a      	str	r2, [r3, #0]
	DelayState = (DelayState + 1) % 3;
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <HAL_ADC_ConvCpltCallback+0x3c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	1c59      	adds	r1, r3, #1
 80016e8:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <HAL_ADC_ConvCpltCallback+0x40>)
 80016ea:	fb83 3201 	smull	r3, r2, r3, r1
 80016ee:	17cb      	asrs	r3, r1, #31
 80016f0:	1ad2      	subs	r2, r2, r3
 80016f2:	4613      	mov	r3, r2
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	4413      	add	r3, r2
 80016f8:	1aca      	subs	r2, r1, r3
 80016fa:	4b05      	ldr	r3, [pc, #20]	; (8001710 <HAL_ADC_ConvCpltCallback+0x3c>)
 80016fc:	601a      	str	r2, [r3, #0]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	240002d0 	.word	0x240002d0
 8001710:	240002dc 	.word	0x240002dc
 8001714:	55555556 	.word	0x55555556

08001718 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
	ADCbuff_Half = 1;
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8001722:	2201      	movs	r2, #1
 8001724:	601a      	str	r2, [r3, #0]

}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	240002cc 	.word	0x240002cc

08001738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	 HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800173c:	2201      	movs	r2, #1
 800173e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001742:	4802      	ldr	r0, [pc, #8]	; (800174c <Error_Handler+0x14>)
 8001744:	f005 fd90 	bl	8007268 <HAL_GPIO_WritePin>
  /* USER CODE END Error_Handler_Debug */
}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	58020400 	.word	0x58020400

08001750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001756:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <HAL_MspInit+0x30>)
 8001758:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800175c:	4a08      	ldr	r2, [pc, #32]	; (8001780 <HAL_MspInit+0x30>)
 800175e:	f043 0302 	orr.w	r3, r3, #2
 8001762:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001766:	4b06      	ldr	r3, [pc, #24]	; (8001780 <HAL_MspInit+0x30>)
 8001768:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	607b      	str	r3, [r7, #4]
 8001772:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	58024400 	.word	0x58024400

08001784 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08a      	sub	sp, #40	; 0x28
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a30      	ldr	r2, [pc, #192]	; (8001864 <HAL_ADC_MspInit+0xe0>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d159      	bne.n	800185a <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80017a6:	4b30      	ldr	r3, [pc, #192]	; (8001868 <HAL_ADC_MspInit+0xe4>)
 80017a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017ac:	4a2e      	ldr	r2, [pc, #184]	; (8001868 <HAL_ADC_MspInit+0xe4>)
 80017ae:	f043 0320 	orr.w	r3, r3, #32
 80017b2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80017b6:	4b2c      	ldr	r3, [pc, #176]	; (8001868 <HAL_ADC_MspInit+0xe4>)
 80017b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017bc:	f003 0320 	and.w	r3, r3, #32
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c4:	4b28      	ldr	r3, [pc, #160]	; (8001868 <HAL_ADC_MspInit+0xe4>)
 80017c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ca:	4a27      	ldr	r2, [pc, #156]	; (8001868 <HAL_ADC_MspInit+0xe4>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017d4:	4b24      	ldr	r3, [pc, #144]	; (8001868 <HAL_ADC_MspInit+0xe4>)
 80017d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017e2:	2308      	movs	r3, #8
 80017e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017e6:	2303      	movs	r3, #3
 80017e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	4619      	mov	r1, r3
 80017f4:	481d      	ldr	r0, [pc, #116]	; (800186c <HAL_ADC_MspInit+0xe8>)
 80017f6:	f005 fb87 	bl	8006f08 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream1;
 80017fa:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <HAL_ADC_MspInit+0xec>)
 80017fc:	4a1d      	ldr	r2, [pc, #116]	; (8001874 <HAL_ADC_MspInit+0xf0>)
 80017fe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001800:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <HAL_ADC_MspInit+0xec>)
 8001802:	2209      	movs	r2, #9
 8001804:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001806:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <HAL_ADC_MspInit+0xec>)
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800180c:	4b18      	ldr	r3, [pc, #96]	; (8001870 <HAL_ADC_MspInit+0xec>)
 800180e:	2200      	movs	r2, #0
 8001810:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001812:	4b17      	ldr	r3, [pc, #92]	; (8001870 <HAL_ADC_MspInit+0xec>)
 8001814:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001818:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <HAL_ADC_MspInit+0xec>)
 800181c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001820:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001822:	4b13      	ldr	r3, [pc, #76]	; (8001870 <HAL_ADC_MspInit+0xec>)
 8001824:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001828:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800182a:	4b11      	ldr	r3, [pc, #68]	; (8001870 <HAL_ADC_MspInit+0xec>)
 800182c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001830:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <HAL_ADC_MspInit+0xec>)
 8001834:	2200      	movs	r2, #0
 8001836:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001838:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <HAL_ADC_MspInit+0xec>)
 800183a:	2200      	movs	r2, #0
 800183c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800183e:	480c      	ldr	r0, [pc, #48]	; (8001870 <HAL_ADC_MspInit+0xec>)
 8001840:	f002 fc30 	bl	80040a4 <HAL_DMA_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 800184a:	f7ff ff75 	bl	8001738 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a07      	ldr	r2, [pc, #28]	; (8001870 <HAL_ADC_MspInit+0xec>)
 8001852:	64da      	str	r2, [r3, #76]	; 0x4c
 8001854:	4a06      	ldr	r2, [pc, #24]	; (8001870 <HAL_ADC_MspInit+0xec>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800185a:	bf00      	nop
 800185c:	3728      	adds	r7, #40	; 0x28
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40022000 	.word	0x40022000
 8001868:	58024400 	.word	0x58024400
 800186c:	58020000 	.word	0x58020000
 8001870:	240058ec 	.word	0x240058ec
 8001874:	40020028 	.word	0x40020028

08001878 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	; 0x28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a30      	ldr	r2, [pc, #192]	; (8001958 <HAL_DAC_MspInit+0xe0>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d159      	bne.n	800194e <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800189a:	4b30      	ldr	r3, [pc, #192]	; (800195c <HAL_DAC_MspInit+0xe4>)
 800189c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018a0:	4a2e      	ldr	r2, [pc, #184]	; (800195c <HAL_DAC_MspInit+0xe4>)
 80018a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80018a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018aa:	4b2c      	ldr	r3, [pc, #176]	; (800195c <HAL_DAC_MspInit+0xe4>)
 80018ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b8:	4b28      	ldr	r3, [pc, #160]	; (800195c <HAL_DAC_MspInit+0xe4>)
 80018ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018be:	4a27      	ldr	r2, [pc, #156]	; (800195c <HAL_DAC_MspInit+0xe4>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018c8:	4b24      	ldr	r3, [pc, #144]	; (800195c <HAL_DAC_MspInit+0xe4>)
 80018ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018d6:	2310      	movs	r3, #16
 80018d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018da:	2303      	movs	r3, #3
 80018dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e2:	f107 0314 	add.w	r3, r7, #20
 80018e6:	4619      	mov	r1, r3
 80018e8:	481d      	ldr	r0, [pc, #116]	; (8001960 <HAL_DAC_MspInit+0xe8>)
 80018ea:	f005 fb0d 	bl	8006f08 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream2;
 80018ee:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <HAL_DAC_MspInit+0xec>)
 80018f0:	4a1d      	ldr	r2, [pc, #116]	; (8001968 <HAL_DAC_MspInit+0xf0>)
 80018f2:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80018f4:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <HAL_DAC_MspInit+0xec>)
 80018f6:	2243      	movs	r2, #67	; 0x43
 80018f8:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018fa:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <HAL_DAC_MspInit+0xec>)
 80018fc:	2240      	movs	r2, #64	; 0x40
 80018fe:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001900:	4b18      	ldr	r3, [pc, #96]	; (8001964 <HAL_DAC_MspInit+0xec>)
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001906:	4b17      	ldr	r3, [pc, #92]	; (8001964 <HAL_DAC_MspInit+0xec>)
 8001908:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800190c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <HAL_DAC_MspInit+0xec>)
 8001910:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001914:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001916:	4b13      	ldr	r3, [pc, #76]	; (8001964 <HAL_DAC_MspInit+0xec>)
 8001918:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800191c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800191e:	4b11      	ldr	r3, [pc, #68]	; (8001964 <HAL_DAC_MspInit+0xec>)
 8001920:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001924:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001926:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <HAL_DAC_MspInit+0xec>)
 8001928:	2200      	movs	r2, #0
 800192a:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800192c:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <HAL_DAC_MspInit+0xec>)
 800192e:	2200      	movs	r2, #0
 8001930:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001932:	480c      	ldr	r0, [pc, #48]	; (8001964 <HAL_DAC_MspInit+0xec>)
 8001934:	f002 fbb6 	bl	80040a4 <HAL_DMA_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800193e:	f7ff fefb 	bl	8001738 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a07      	ldr	r2, [pc, #28]	; (8001964 <HAL_DAC_MspInit+0xec>)
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	4a06      	ldr	r2, [pc, #24]	; (8001964 <HAL_DAC_MspInit+0xec>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800194e:	bf00      	nop
 8001950:	3728      	adds	r7, #40	; 0x28
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40007400 	.word	0x40007400
 800195c:	58024400 	.word	0x58024400
 8001960:	58020000 	.word	0x58020000
 8001964:	2400580c 	.word	0x2400580c
 8001968:	40020040 	.word	0x40020040

0800196c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08e      	sub	sp, #56	; 0x38
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a59      	ldr	r2, [pc, #356]	; (8001af0 <HAL_ETH_MspInit+0x184>)
 800198a:	4293      	cmp	r3, r2
 800198c:	f040 80ab 	bne.w	8001ae6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001990:	4b58      	ldr	r3, [pc, #352]	; (8001af4 <HAL_ETH_MspInit+0x188>)
 8001992:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001996:	4a57      	ldr	r2, [pc, #348]	; (8001af4 <HAL_ETH_MspInit+0x188>)
 8001998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800199c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80019a0:	4b54      	ldr	r3, [pc, #336]	; (8001af4 <HAL_ETH_MspInit+0x188>)
 80019a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019aa:	623b      	str	r3, [r7, #32]
 80019ac:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80019ae:	4b51      	ldr	r3, [pc, #324]	; (8001af4 <HAL_ETH_MspInit+0x188>)
 80019b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019b4:	4a4f      	ldr	r2, [pc, #316]	; (8001af4 <HAL_ETH_MspInit+0x188>)
 80019b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80019be:	4b4d      	ldr	r3, [pc, #308]	; (8001af4 <HAL_ETH_MspInit+0x188>)
 80019c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c8:	61fb      	str	r3, [r7, #28]
 80019ca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80019cc:	4b49      	ldr	r3, [pc, #292]	; (8001af4 <HAL_ETH_MspInit+0x188>)
 80019ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019d2:	4a48      	ldr	r2, [pc, #288]	; (8001af4 <HAL_ETH_MspInit+0x188>)
 80019d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80019dc:	4b45      	ldr	r3, [pc, #276]	; (8001af4 <HAL_ETH_MspInit+0x188>)
 80019de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e6:	61bb      	str	r3, [r7, #24]
 80019e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ea:	4b42      	ldr	r3, [pc, #264]	; (8001af4 <HAL_ETH_MspInit+0x188>)
 80019ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f0:	4a40      	ldr	r2, [pc, #256]	; (8001af4 <HAL_ETH_MspInit+0x188>)
 80019f2:	f043 0304 	orr.w	r3, r3, #4
 80019f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019fa:	4b3e      	ldr	r3, [pc, #248]	; (8001af4 <HAL_ETH_MspInit+0x188>)
 80019fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	617b      	str	r3, [r7, #20]
 8001a06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a08:	4b3a      	ldr	r3, [pc, #232]	; (8001af4 <HAL_ETH_MspInit+0x188>)
 8001a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0e:	4a39      	ldr	r2, [pc, #228]	; (8001af4 <HAL_ETH_MspInit+0x188>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a18:	4b36      	ldr	r3, [pc, #216]	; (8001af4 <HAL_ETH_MspInit+0x188>)
 8001a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a26:	4b33      	ldr	r3, [pc, #204]	; (8001af4 <HAL_ETH_MspInit+0x188>)
 8001a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a2c:	4a31      	ldr	r2, [pc, #196]	; (8001af4 <HAL_ETH_MspInit+0x188>)
 8001a2e:	f043 0302 	orr.w	r3, r3, #2
 8001a32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a36:	4b2f      	ldr	r3, [pc, #188]	; (8001af4 <HAL_ETH_MspInit+0x188>)
 8001a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a44:	4b2b      	ldr	r3, [pc, #172]	; (8001af4 <HAL_ETH_MspInit+0x188>)
 8001a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a4a:	4a2a      	ldr	r2, [pc, #168]	; (8001af4 <HAL_ETH_MspInit+0x188>)
 8001a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a54:	4b27      	ldr	r3, [pc, #156]	; (8001af4 <HAL_ETH_MspInit+0x188>)
 8001a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001a62:	2332      	movs	r3, #50	; 0x32
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a66:	2302      	movs	r3, #2
 8001a68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a72:	230b      	movs	r3, #11
 8001a74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	481e      	ldr	r0, [pc, #120]	; (8001af8 <HAL_ETH_MspInit+0x18c>)
 8001a7e:	f005 fa43 	bl	8006f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001a82:	2386      	movs	r3, #134	; 0x86
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a86:	2302      	movs	r3, #2
 8001a88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a92:	230b      	movs	r3, #11
 8001a94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4817      	ldr	r0, [pc, #92]	; (8001afc <HAL_ETH_MspInit+0x190>)
 8001a9e:	f005 fa33 	bl	8006f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001aa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ab4:	230b      	movs	r3, #11
 8001ab6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001abc:	4619      	mov	r1, r3
 8001abe:	4810      	ldr	r0, [pc, #64]	; (8001b00 <HAL_ETH_MspInit+0x194>)
 8001ac0:	f005 fa22 	bl	8006f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001ac4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aca:	2302      	movs	r3, #2
 8001acc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ad6:	230b      	movs	r3, #11
 8001ad8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4808      	ldr	r0, [pc, #32]	; (8001b04 <HAL_ETH_MspInit+0x198>)
 8001ae2:	f005 fa11 	bl	8006f08 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001ae6:	bf00      	nop
 8001ae8:	3738      	adds	r7, #56	; 0x38
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40028000 	.word	0x40028000
 8001af4:	58024400 	.word	0x58024400
 8001af8:	58020800 	.word	0x58020800
 8001afc:	58020000 	.word	0x58020000
 8001b00:	58020400 	.word	0x58020400
 8001b04:	58021800 	.word	0x58021800

08001b08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <HAL_TIM_Base_MspInit+0x3c>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d10e      	bne.n	8001b38 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_TIM_Base_MspInit+0x40>)
 8001b1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b20:	4a09      	ldr	r2, [pc, #36]	; (8001b48 <HAL_TIM_Base_MspInit+0x40>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b2a:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <HAL_TIM_Base_MspInit+0x40>)
 8001b2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b38:	bf00      	nop
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	40010000 	.word	0x40010000
 8001b48:	58024400 	.word	0x58024400

08001b4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08a      	sub	sp, #40	; 0x28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a35      	ldr	r2, [pc, #212]	; (8001c40 <HAL_UART_MspInit+0xf4>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d164      	bne.n	8001c38 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b6e:	4b35      	ldr	r3, [pc, #212]	; (8001c44 <HAL_UART_MspInit+0xf8>)
 8001b70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b74:	4a33      	ldr	r2, [pc, #204]	; (8001c44 <HAL_UART_MspInit+0xf8>)
 8001b76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b7a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b7e:	4b31      	ldr	r3, [pc, #196]	; (8001c44 <HAL_UART_MspInit+0xf8>)
 8001b80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b8c:	4b2d      	ldr	r3, [pc, #180]	; (8001c44 <HAL_UART_MspInit+0xf8>)
 8001b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b92:	4a2c      	ldr	r2, [pc, #176]	; (8001c44 <HAL_UART_MspInit+0xf8>)
 8001b94:	f043 0308 	orr.w	r3, r3, #8
 8001b98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b9c:	4b29      	ldr	r3, [pc, #164]	; (8001c44 <HAL_UART_MspInit+0xf8>)
 8001b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001baa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bbc:	2307      	movs	r3, #7
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bc0:	f107 0314 	add.w	r3, r7, #20
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4820      	ldr	r0, [pc, #128]	; (8001c48 <HAL_UART_MspInit+0xfc>)
 8001bc8:	f005 f99e 	bl	8006f08 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001bcc:	4b1f      	ldr	r3, [pc, #124]	; (8001c4c <HAL_UART_MspInit+0x100>)
 8001bce:	4a20      	ldr	r2, [pc, #128]	; (8001c50 <HAL_UART_MspInit+0x104>)
 8001bd0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001bd2:	4b1e      	ldr	r3, [pc, #120]	; (8001c4c <HAL_UART_MspInit+0x100>)
 8001bd4:	222d      	movs	r2, #45	; 0x2d
 8001bd6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bd8:	4b1c      	ldr	r3, [pc, #112]	; (8001c4c <HAL_UART_MspInit+0x100>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bde:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <HAL_UART_MspInit+0x100>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001be4:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <HAL_UART_MspInit+0x100>)
 8001be6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bea:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bec:	4b17      	ldr	r3, [pc, #92]	; (8001c4c <HAL_UART_MspInit+0x100>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bf2:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <HAL_UART_MspInit+0x100>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001bf8:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <HAL_UART_MspInit+0x100>)
 8001bfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bfe:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c00:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <HAL_UART_MspInit+0x100>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c06:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <HAL_UART_MspInit+0x100>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001c0c:	480f      	ldr	r0, [pc, #60]	; (8001c4c <HAL_UART_MspInit+0x100>)
 8001c0e:	f002 fa49 	bl	80040a4 <HAL_DMA_Init>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001c18:	f7ff fd8e 	bl	8001738 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a0b      	ldr	r2, [pc, #44]	; (8001c4c <HAL_UART_MspInit+0x100>)
 8001c20:	679a      	str	r2, [r3, #120]	; 0x78
 8001c22:	4a0a      	ldr	r2, [pc, #40]	; (8001c4c <HAL_UART_MspInit+0x100>)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	2027      	movs	r0, #39	; 0x27
 8001c2e:	f001 ff60 	bl	8003af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c32:	2027      	movs	r0, #39	; 0x27
 8001c34:	f001 ff77 	bl	8003b26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c38:	bf00      	nop
 8001c3a:	3728      	adds	r7, #40	; 0x28
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40004800 	.word	0x40004800
 8001c44:	58024400 	.word	0x58024400
 8001c48:	58020c00 	.word	0x58020c00
 8001c4c:	240052ec 	.word	0x240052ec
 8001c50:	40020010 	.word	0x40020010

08001c54 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08a      	sub	sp, #40	; 0x28
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a21      	ldr	r2, [pc, #132]	; (8001cf8 <HAL_PCD_MspInit+0xa4>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d13b      	bne.n	8001cee <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c76:	4b21      	ldr	r3, [pc, #132]	; (8001cfc <HAL_PCD_MspInit+0xa8>)
 8001c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c7c:	4a1f      	ldr	r2, [pc, #124]	; (8001cfc <HAL_PCD_MspInit+0xa8>)
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c86:	4b1d      	ldr	r3, [pc, #116]	; (8001cfc <HAL_PCD_MspInit+0xa8>)
 8001c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001c94:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001ca6:	230a      	movs	r3, #10
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4813      	ldr	r0, [pc, #76]	; (8001d00 <HAL_PCD_MspInit+0xac>)
 8001cb2:	f005 f929 	bl	8006f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	4619      	mov	r1, r3
 8001cca:	480d      	ldr	r0, [pc, #52]	; (8001d00 <HAL_PCD_MspInit+0xac>)
 8001ccc:	f005 f91c 	bl	8006f08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001cd0:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <HAL_PCD_MspInit+0xa8>)
 8001cd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001cd6:	4a09      	ldr	r2, [pc, #36]	; (8001cfc <HAL_PCD_MspInit+0xa8>)
 8001cd8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001cdc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_PCD_MspInit+0xa8>)
 8001ce2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ce6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001cee:	bf00      	nop
 8001cf0:	3728      	adds	r7, #40	; 0x28
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40080000 	.word	0x40080000
 8001cfc:	58024400 	.word	0x58024400
 8001d00:	58020000 	.word	0x58020000

08001d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d16:	e7fe      	b.n	8001d16 <HardFault_Handler+0x4>

08001d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d1c:	e7fe      	b.n	8001d1c <MemManage_Handler+0x4>

08001d1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d22:	e7fe      	b.n	8001d22 <BusFault_Handler+0x4>

08001d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d28:	e7fe      	b.n	8001d28 <UsageFault_Handler+0x4>

08001d2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d58:	f000 f9fe 	bl	8002158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001d64:	4802      	ldr	r0, [pc, #8]	; (8001d70 <DMA1_Stream0_IRQHandler+0x10>)
 8001d66:	f003 f9a7 	bl	80050b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	240052ec 	.word	0x240052ec

08001d74 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d78:	4802      	ldr	r0, [pc, #8]	; (8001d84 <DMA1_Stream1_IRQHandler+0x10>)
 8001d7a:	f003 f99d 	bl	80050b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	240058ec 	.word	0x240058ec

08001d88 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001d8c:	4802      	ldr	r0, [pc, #8]	; (8001d98 <DMA1_Stream2_IRQHandler+0x10>)
 8001d8e:	f003 f993 	bl	80050b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	2400580c 	.word	0x2400580c

08001d9c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001da0:	2080      	movs	r0, #128	; 0x80
 8001da2:	f005 fa7a 	bl	800729a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001db0:	4802      	ldr	r0, [pc, #8]	; (8001dbc <USART3_IRQHandler+0x10>)
 8001db2:	f008 ff43 	bl	800ac3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	24005378 	.word	0x24005378

08001dc0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	e00a      	b.n	8001de8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001dd2:	f7ff fab1 	bl	8001338 <__io_getchar>
 8001dd6:	4601      	mov	r1, r0
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	1c5a      	adds	r2, r3, #1
 8001ddc:	60ba      	str	r2, [r7, #8]
 8001dde:	b2ca      	uxtb	r2, r1
 8001de0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	3301      	adds	r3, #1
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	dbf0      	blt.n	8001dd2 <_read+0x12>
	}

return len;
 8001df0:	687b      	ldr	r3, [r7, #4]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b086      	sub	sp, #24
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	60f8      	str	r0, [r7, #12]
 8001e02:	60b9      	str	r1, [r7, #8]
 8001e04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	e009      	b.n	8001e20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	1c5a      	adds	r2, r3, #1
 8001e10:	60ba      	str	r2, [r7, #8]
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff fa7d 	bl	8001314 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	dbf1      	blt.n	8001e0c <_write+0x12>
	}
	return len;
 8001e28:	687b      	ldr	r3, [r7, #4]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <_close>:

int _close(int file)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
	return -1;
 8001e3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e5a:	605a      	str	r2, [r3, #4]
	return 0;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <_isatty>:

int _isatty(int file)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
	return 1;
 8001e72:	2301      	movs	r3, #1
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
	return 0;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ea4:	4a14      	ldr	r2, [pc, #80]	; (8001ef8 <_sbrk+0x5c>)
 8001ea6:	4b15      	ldr	r3, [pc, #84]	; (8001efc <_sbrk+0x60>)
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eb0:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <_sbrk+0x64>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d102      	bne.n	8001ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eb8:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <_sbrk+0x64>)
 8001eba:	4a12      	ldr	r2, [pc, #72]	; (8001f04 <_sbrk+0x68>)
 8001ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ebe:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <_sbrk+0x64>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d207      	bcs.n	8001edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ecc:	f00a fb9e 	bl	800c60c <__errno>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	230c      	movs	r3, #12
 8001ed4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001ed6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eda:	e009      	b.n	8001ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001edc:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <_sbrk+0x64>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ee2:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <_sbrk+0x64>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4413      	add	r3, r2
 8001eea:	4a05      	ldr	r2, [pc, #20]	; (8001f00 <_sbrk+0x64>)
 8001eec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eee:	68fb      	ldr	r3, [r7, #12]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	24080000 	.word	0x24080000
 8001efc:	00000500 	.word	0x00000500
 8001f00:	240052e0 	.word	0x240052e0
 8001f04:	24005a70 	.word	0x24005a70

08001f08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f0c:	4b39      	ldr	r3, [pc, #228]	; (8001ff4 <SystemInit+0xec>)
 8001f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f12:	4a38      	ldr	r2, [pc, #224]	; (8001ff4 <SystemInit+0xec>)
 8001f14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001f1c:	4b36      	ldr	r3, [pc, #216]	; (8001ff8 <SystemInit+0xf0>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 030f 	and.w	r3, r3, #15
 8001f24:	2b06      	cmp	r3, #6
 8001f26:	d807      	bhi.n	8001f38 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001f28:	4b33      	ldr	r3, [pc, #204]	; (8001ff8 <SystemInit+0xf0>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f023 030f 	bic.w	r3, r3, #15
 8001f30:	4a31      	ldr	r2, [pc, #196]	; (8001ff8 <SystemInit+0xf0>)
 8001f32:	f043 0307 	orr.w	r3, r3, #7
 8001f36:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001f38:	4b30      	ldr	r3, [pc, #192]	; (8001ffc <SystemInit+0xf4>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a2f      	ldr	r2, [pc, #188]	; (8001ffc <SystemInit+0xf4>)
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001f44:	4b2d      	ldr	r3, [pc, #180]	; (8001ffc <SystemInit+0xf4>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001f4a:	4b2c      	ldr	r3, [pc, #176]	; (8001ffc <SystemInit+0xf4>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	492b      	ldr	r1, [pc, #172]	; (8001ffc <SystemInit+0xf4>)
 8001f50:	4b2b      	ldr	r3, [pc, #172]	; (8002000 <SystemInit+0xf8>)
 8001f52:	4013      	ands	r3, r2
 8001f54:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001f56:	4b28      	ldr	r3, [pc, #160]	; (8001ff8 <SystemInit+0xf0>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	2b07      	cmp	r3, #7
 8001f60:	d907      	bls.n	8001f72 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001f62:	4b25      	ldr	r3, [pc, #148]	; (8001ff8 <SystemInit+0xf0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f023 030f 	bic.w	r3, r3, #15
 8001f6a:	4a23      	ldr	r2, [pc, #140]	; (8001ff8 <SystemInit+0xf0>)
 8001f6c:	f043 0307 	orr.w	r3, r3, #7
 8001f70:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001f72:	4b22      	ldr	r3, [pc, #136]	; (8001ffc <SystemInit+0xf4>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001f78:	4b20      	ldr	r3, [pc, #128]	; (8001ffc <SystemInit+0xf4>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001f7e:	4b1f      	ldr	r3, [pc, #124]	; (8001ffc <SystemInit+0xf4>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001f84:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <SystemInit+0xf4>)
 8001f86:	4a1f      	ldr	r2, [pc, #124]	; (8002004 <SystemInit+0xfc>)
 8001f88:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001f8a:	4b1c      	ldr	r3, [pc, #112]	; (8001ffc <SystemInit+0xf4>)
 8001f8c:	4a1e      	ldr	r2, [pc, #120]	; (8002008 <SystemInit+0x100>)
 8001f8e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001f90:	4b1a      	ldr	r3, [pc, #104]	; (8001ffc <SystemInit+0xf4>)
 8001f92:	4a1e      	ldr	r2, [pc, #120]	; (800200c <SystemInit+0x104>)
 8001f94:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001f96:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <SystemInit+0xf4>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001f9c:	4b17      	ldr	r3, [pc, #92]	; (8001ffc <SystemInit+0xf4>)
 8001f9e:	4a1b      	ldr	r2, [pc, #108]	; (800200c <SystemInit+0x104>)
 8001fa0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001fa2:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <SystemInit+0xf4>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001fa8:	4b14      	ldr	r3, [pc, #80]	; (8001ffc <SystemInit+0xf4>)
 8001faa:	4a18      	ldr	r2, [pc, #96]	; (800200c <SystemInit+0x104>)
 8001fac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001fae:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <SystemInit+0xf4>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <SystemInit+0xf4>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a10      	ldr	r2, [pc, #64]	; (8001ffc <SystemInit+0xf4>)
 8001fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fbe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <SystemInit+0xf4>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001fc6:	4b12      	ldr	r3, [pc, #72]	; (8002010 <SystemInit+0x108>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	4b12      	ldr	r3, [pc, #72]	; (8002014 <SystemInit+0x10c>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fd2:	d202      	bcs.n	8001fda <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001fd4:	4b10      	ldr	r3, [pc, #64]	; (8002018 <SystemInit+0x110>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001fda:	4b10      	ldr	r3, [pc, #64]	; (800201c <SystemInit+0x114>)
 8001fdc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001fe0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fe2:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <SystemInit+0xec>)
 8001fe4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fe8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001fea:	bf00      	nop
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000ed00 	.word	0xe000ed00
 8001ff8:	52002000 	.word	0x52002000
 8001ffc:	58024400 	.word	0x58024400
 8002000:	eaf6ed7f 	.word	0xeaf6ed7f
 8002004:	02020200 	.word	0x02020200
 8002008:	01ff0000 	.word	0x01ff0000
 800200c:	01010280 	.word	0x01010280
 8002010:	5c001000 	.word	0x5c001000
 8002014:	ffff0000 	.word	0xffff0000
 8002018:	51008108 	.word	0x51008108
 800201c:	52004000 	.word	0x52004000

08002020 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002020:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002058 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002024:	f7ff ff70 	bl	8001f08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002028:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800202a:	e003      	b.n	8002034 <LoopCopyDataInit>

0800202c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800202c:	4b0b      	ldr	r3, [pc, #44]	; (800205c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800202e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002030:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002032:	3104      	adds	r1, #4

08002034 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002034:	480a      	ldr	r0, [pc, #40]	; (8002060 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8002036:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8002038:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800203a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800203c:	d3f6      	bcc.n	800202c <CopyDataInit>
  ldr  r2, =_sbss
 800203e:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8002040:	e002      	b.n	8002048 <LoopFillZerobss>

08002042 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002042:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002044:	f842 3b04 	str.w	r3, [r2], #4

08002048 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002048:	4b08      	ldr	r3, [pc, #32]	; (800206c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800204a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800204c:	d3f9      	bcc.n	8002042 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800204e:	f00a fc6f 	bl	800c930 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002052:	f7fe fd01 	bl	8000a58 <main>
  bx  lr    
 8002056:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002058:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800205c:	080121f8 	.word	0x080121f8
  ldr  r0, =_sdata
 8002060:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8002064:	240001ec 	.word	0x240001ec
  ldr  r2, =_sbss
 8002068:	240002ac 	.word	0x240002ac
  ldr  r3, = _ebss
 800206c:	24005a6c 	.word	0x24005a6c

08002070 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002070:	e7fe      	b.n	8002070 <ADC3_IRQHandler>
	...

08002074 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800207a:	2003      	movs	r0, #3
 800207c:	f001 fd2e 	bl	8003adc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002080:	f006 f87e 	bl	8008180 <HAL_RCC_GetSysClockFreq>
 8002084:	4601      	mov	r1, r0
 8002086:	4b15      	ldr	r3, [pc, #84]	; (80020dc <HAL_Init+0x68>)
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	0a1b      	lsrs	r3, r3, #8
 800208c:	f003 030f 	and.w	r3, r3, #15
 8002090:	4a13      	ldr	r2, [pc, #76]	; (80020e0 <HAL_Init+0x6c>)
 8002092:	5cd3      	ldrb	r3, [r2, r3]
 8002094:	f003 031f 	and.w	r3, r3, #31
 8002098:	fa21 f303 	lsr.w	r3, r1, r3
 800209c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800209e:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <HAL_Init+0x68>)
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	4a0e      	ldr	r2, [pc, #56]	; (80020e0 <HAL_Init+0x6c>)
 80020a8:	5cd3      	ldrb	r3, [r2, r3]
 80020aa:	f003 031f 	and.w	r3, r3, #31
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	fa22 f303 	lsr.w	r3, r2, r3
 80020b4:	4a0b      	ldr	r2, [pc, #44]	; (80020e4 <HAL_Init+0x70>)
 80020b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020b8:	4a0b      	ldr	r2, [pc, #44]	; (80020e8 <HAL_Init+0x74>)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020be:	2000      	movs	r0, #0
 80020c0:	f000 f814 	bl	80020ec <HAL_InitTick>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e002      	b.n	80020d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80020ce:	f7ff fb3f 	bl	8001750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	58024400 	.word	0x58024400
 80020e0:	08011c8c 	.word	0x08011c8c
 80020e4:	2400000c 	.word	0x2400000c
 80020e8:	24000008 	.word	0x24000008

080020ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80020f4:	4b15      	ldr	r3, [pc, #84]	; (800214c <HAL_InitTick+0x60>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e021      	b.n	8002144 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002100:	4b13      	ldr	r3, [pc, #76]	; (8002150 <HAL_InitTick+0x64>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4b11      	ldr	r3, [pc, #68]	; (800214c <HAL_InitTick+0x60>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	4619      	mov	r1, r3
 800210a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800210e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002112:	fbb2 f3f3 	udiv	r3, r2, r3
 8002116:	4618      	mov	r0, r3
 8002118:	f001 fd13 	bl	8003b42 <HAL_SYSTICK_Config>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e00e      	b.n	8002144 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b0f      	cmp	r3, #15
 800212a:	d80a      	bhi.n	8002142 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800212c:	2200      	movs	r2, #0
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002134:	f001 fcdd 	bl	8003af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002138:	4a06      	ldr	r2, [pc, #24]	; (8002154 <HAL_InitTick+0x68>)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	e000      	b.n	8002144 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
}
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	24000014 	.word	0x24000014
 8002150:	24000008 	.word	0x24000008
 8002154:	24000010 	.word	0x24000010

08002158 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_IncTick+0x20>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	4b06      	ldr	r3, [pc, #24]	; (800217c <HAL_IncTick+0x24>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4413      	add	r3, r2
 8002168:	4a04      	ldr	r2, [pc, #16]	; (800217c <HAL_IncTick+0x24>)
 800216a:	6013      	str	r3, [r2, #0]
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	24000014 	.word	0x24000014
 800217c:	24005a64 	.word	0x24005a64

08002180 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  return uwTick;
 8002184:	4b03      	ldr	r3, [pc, #12]	; (8002194 <HAL_GetTick+0x14>)
 8002186:	681b      	ldr	r3, [r3, #0]
}
 8002188:	4618      	mov	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	24005a64 	.word	0x24005a64

08002198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021a0:	f7ff ffee 	bl	8002180 <HAL_GetTick>
 80021a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021b0:	d005      	beq.n	80021be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021b2:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <HAL_Delay+0x40>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	461a      	mov	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4413      	add	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021be:	bf00      	nop
 80021c0:	f7ff ffde 	bl	8002180 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d8f7      	bhi.n	80021c0 <HAL_Delay+0x28>
  {
  }
}
 80021d0:	bf00      	nop
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	24000014 	.word	0x24000014

080021dc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80021e0:	4b03      	ldr	r3, [pc, #12]	; (80021f0 <HAL_GetREVID+0x14>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	0c1b      	lsrs	r3, r3, #16
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	5c001000 	.word	0x5c001000

080021f4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002204:	4904      	ldr	r1, [pc, #16]	; (8002218 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4313      	orrs	r3, r2
 800220a:	604b      	str	r3, [r1, #4]
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	58000400 	.word	0x58000400

0800221c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	431a      	orrs	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	609a      	str	r2, [r3, #8]
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
 800224a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	609a      	str	r2, [r3, #8]
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002278:	4618      	mov	r0, r3
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002284:	b480      	push	{r7}
 8002286:	b087      	sub	sp, #28
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
 8002290:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	3360      	adds	r3, #96	; 0x60
 8002296:	461a      	mov	r2, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	430b      	orrs	r3, r1
 80022b2:	431a      	orrs	r2, r3
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80022b8:	bf00      	nop
 80022ba:	371c      	adds	r7, #28
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	f003 031f 	and.w	r3, r3, #31
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	fa01 f303 	lsl.w	r3, r1, r3
 80022e4:	431a      	orrs	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	611a      	str	r2, [r3, #16]
}
 80022ea:	bf00      	nop
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b087      	sub	sp, #28
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	60f8      	str	r0, [r7, #12]
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	3360      	adds	r3, #96	; 0x60
 8002306:	461a      	mov	r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	431a      	orrs	r2, r3
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	601a      	str	r2, [r3, #0]
  }
}
 8002320:	bf00      	nop
 8002322:	371c      	adds	r7, #28
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002352:	b480      	push	{r7}
 8002354:	b087      	sub	sp, #28
 8002356:	af00      	add	r7, sp, #0
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	3330      	adds	r3, #48	; 0x30
 8002362:	461a      	mov	r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	0a1b      	lsrs	r3, r3, #8
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	f003 030c 	and.w	r3, r3, #12
 800236e:	4413      	add	r3, r2
 8002370:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	f003 031f 	and.w	r3, r3, #31
 800237c:	211f      	movs	r1, #31
 800237e:	fa01 f303 	lsl.w	r3, r1, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	401a      	ands	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	0e9b      	lsrs	r3, r3, #26
 800238a:	f003 011f 	and.w	r1, r3, #31
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	f003 031f 	and.w	r3, r3, #31
 8002394:	fa01 f303 	lsl.w	r3, r1, r3
 8002398:	431a      	orrs	r2, r3
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800239e:	bf00      	nop
 80023a0:	371c      	adds	r7, #28
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
 80023b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f023 0203 	bic.w	r2, r3, #3
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	60da      	str	r2, [r3, #12]
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b087      	sub	sp, #28
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	3314      	adds	r3, #20
 80023e0:	461a      	mov	r2, r3
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	0e5b      	lsrs	r3, r3, #25
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	4413      	add	r3, r2
 80023ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	0d1b      	lsrs	r3, r3, #20
 80023f8:	f003 031f 	and.w	r3, r3, #31
 80023fc:	2107      	movs	r1, #7
 80023fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	401a      	ands	r2, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	0d1b      	lsrs	r3, r3, #20
 800240a:	f003 031f 	and.w	r3, r3, #31
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	fa01 f303 	lsl.w	r3, r1, r3
 8002414:	431a      	orrs	r2, r3
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800241a:	bf00      	nop
 800241c:	371c      	adds	r7, #28
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
	...

08002428 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002440:	43db      	mvns	r3, r3
 8002442:	401a      	ands	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f003 0318 	and.w	r3, r3, #24
 800244a:	4908      	ldr	r1, [pc, #32]	; (800246c <LL_ADC_SetChannelSingleDiff+0x44>)
 800244c:	40d9      	lsrs	r1, r3
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	400b      	ands	r3, r1
 8002452:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002456:	431a      	orrs	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800245e:	bf00      	nop
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	000fffff 	.word	0x000fffff

08002470 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 031f 	and.w	r3, r3, #31
}
 8002480:	4618      	mov	r0, r3
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	4b04      	ldr	r3, [pc, #16]	; (80024ac <LL_ADC_DisableDeepPowerDown+0x20>)
 800249a:	4013      	ands	r3, r2
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6093      	str	r3, [r2, #8]
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	5fffffc0 	.word	0x5fffffc0

080024b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024c4:	d101      	bne.n	80024ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <LL_ADC_EnableInternalRegulator+0x24>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	6fffffc0 	.word	0x6fffffc0

08002500 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002510:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002514:	d101      	bne.n	800251a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	4b05      	ldr	r3, [pc, #20]	; (800254c <LL_ADC_Enable+0x24>)
 8002536:	4013      	ands	r3, r2
 8002538:	f043 0201 	orr.w	r2, r3, #1
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	7fffffc0 	.word	0x7fffffc0

08002550 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	4b05      	ldr	r3, [pc, #20]	; (8002574 <LL_ADC_Disable+0x24>)
 800255e:	4013      	ands	r3, r2
 8002560:	f043 0202 	orr.w	r2, r3, #2
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	7fffffc0 	.word	0x7fffffc0

08002578 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b01      	cmp	r3, #1
 800258a:	d101      	bne.n	8002590 <LL_ADC_IsEnabled+0x18>
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <LL_ADC_IsEnabled+0x1a>
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d101      	bne.n	80025b6 <LL_ADC_IsDisableOngoing+0x18>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <LL_ADC_IsDisableOngoing+0x1a>
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <LL_ADC_REG_StartConversion+0x24>)
 80025d2:	4013      	ands	r3, r2
 80025d4:	f043 0204 	orr.w	r2, r3, #4
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	7fffffc0 	.word	0x7fffffc0

080025ec <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d101      	bne.n	8002604 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002600:	2301      	movs	r3, #1
 8002602:	e000      	b.n	8002606 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b08      	cmp	r3, #8
 8002624:	d101      	bne.n	800262a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002638:	b590      	push	{r4, r7, lr}
 800263a:	b089      	sub	sp, #36	; 0x24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002640:	2300      	movs	r3, #0
 8002642:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002644:	2300      	movs	r3, #0
 8002646:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e18e      	b.n	8002970 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265c:	2b00      	cmp	r3, #0
 800265e:	d109      	bne.n	8002674 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7ff f88f 	bl	8001784 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff ff19 	bl	80024b0 <LL_ADC_IsDeepPowerDownEnabled>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d004      	beq.n	800268e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff feff 	bl	800248c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff ff34 	bl	8002500 <LL_ADC_IsInternalRegulatorEnabled>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d113      	bne.n	80026c6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff ff18 	bl	80024d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80026a8:	4b9a      	ldr	r3, [pc, #616]	; (8002914 <HAL_ADC_Init+0x2dc>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	099b      	lsrs	r3, r3, #6
 80026ae:	4a9a      	ldr	r2, [pc, #616]	; (8002918 <HAL_ADC_Init+0x2e0>)
 80026b0:	fba2 2303 	umull	r2, r3, r2, r3
 80026b4:	099b      	lsrs	r3, r3, #6
 80026b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80026b8:	e002      	b.n	80026c0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	3b01      	subs	r3, #1
 80026be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f9      	bne.n	80026ba <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff ff18 	bl	8002500 <LL_ADC_IsInternalRegulatorEnabled>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10d      	bne.n	80026f2 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026da:	f043 0210 	orr.w	r2, r3, #16
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e6:	f043 0201 	orr.w	r2, r3, #1
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff ff78 	bl	80025ec <LL_ADC_REG_IsConversionOngoing>
 80026fc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002702:	f003 0310 	and.w	r3, r3, #16
 8002706:	2b00      	cmp	r3, #0
 8002708:	f040 8129 	bne.w	800295e <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	2b00      	cmp	r3, #0
 8002710:	f040 8125 	bne.w	800295e <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002718:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800271c:	f043 0202 	orr.w	r2, r3, #2
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff ff25 	bl	8002578 <LL_ADC_IsEnabled>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d136      	bne.n	80027a2 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a78      	ldr	r2, [pc, #480]	; (800291c <HAL_ADC_Init+0x2e4>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d004      	beq.n	8002748 <HAL_ADC_Init+0x110>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a77      	ldr	r2, [pc, #476]	; (8002920 <HAL_ADC_Init+0x2e8>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d10e      	bne.n	8002766 <HAL_ADC_Init+0x12e>
 8002748:	4874      	ldr	r0, [pc, #464]	; (800291c <HAL_ADC_Init+0x2e4>)
 800274a:	f7ff ff15 	bl	8002578 <LL_ADC_IsEnabled>
 800274e:	4604      	mov	r4, r0
 8002750:	4873      	ldr	r0, [pc, #460]	; (8002920 <HAL_ADC_Init+0x2e8>)
 8002752:	f7ff ff11 	bl	8002578 <LL_ADC_IsEnabled>
 8002756:	4603      	mov	r3, r0
 8002758:	4323      	orrs	r3, r4
 800275a:	2b00      	cmp	r3, #0
 800275c:	bf0c      	ite	eq
 800275e:	2301      	moveq	r3, #1
 8002760:	2300      	movne	r3, #0
 8002762:	b2db      	uxtb	r3, r3
 8002764:	e008      	b.n	8002778 <HAL_ADC_Init+0x140>
 8002766:	486f      	ldr	r0, [pc, #444]	; (8002924 <HAL_ADC_Init+0x2ec>)
 8002768:	f7ff ff06 	bl	8002578 <LL_ADC_IsEnabled>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	bf0c      	ite	eq
 8002772:	2301      	moveq	r3, #1
 8002774:	2300      	movne	r3, #0
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	d012      	beq.n	80027a2 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a66      	ldr	r2, [pc, #408]	; (800291c <HAL_ADC_Init+0x2e4>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d004      	beq.n	8002790 <HAL_ADC_Init+0x158>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a65      	ldr	r2, [pc, #404]	; (8002920 <HAL_ADC_Init+0x2e8>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d101      	bne.n	8002794 <HAL_ADC_Init+0x15c>
 8002790:	4a65      	ldr	r2, [pc, #404]	; (8002928 <HAL_ADC_Init+0x2f0>)
 8002792:	e000      	b.n	8002796 <HAL_ADC_Init+0x15e>
 8002794:	4a65      	ldr	r2, [pc, #404]	; (800292c <HAL_ADC_Init+0x2f4>)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	4619      	mov	r1, r3
 800279c:	4610      	mov	r0, r2
 800279e:	f7ff fd3d 	bl	800221c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80027a2:	f7ff fd1b 	bl	80021dc <HAL_GetREVID>
 80027a6:	4602      	mov	r2, r0
 80027a8:	f241 0303 	movw	r3, #4099	; 0x1003
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d914      	bls.n	80027da <HAL_ADC_Init+0x1a2>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	2b10      	cmp	r3, #16
 80027b6:	d110      	bne.n	80027da <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	7d5b      	ldrb	r3, [r3, #21]
 80027bc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80027c2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80027c8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	7f1b      	ldrb	r3, [r3, #28]
 80027ce:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80027d0:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80027d2:	f043 030c 	orr.w	r3, r3, #12
 80027d6:	61bb      	str	r3, [r7, #24]
 80027d8:	e00d      	b.n	80027f6 <HAL_ADC_Init+0x1be>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	7d5b      	ldrb	r3, [r3, #21]
 80027de:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80027e4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80027ea:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	7f1b      	ldrb	r3, [r3, #28]
 80027f0:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	7f1b      	ldrb	r3, [r3, #28]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d106      	bne.n	800280c <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	3b01      	subs	r3, #1
 8002804:	045b      	lsls	r3, r3, #17
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	2b00      	cmp	r3, #0
 8002812:	d009      	beq.n	8002828 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002820:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4313      	orrs	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	4b40      	ldr	r3, [pc, #256]	; (8002930 <HAL_ADC_Init+0x2f8>)
 8002830:	4013      	ands	r3, r2
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6812      	ldr	r2, [r2, #0]
 8002836:	69b9      	ldr	r1, [r7, #24]
 8002838:	430b      	orrs	r3, r1
 800283a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fed3 	bl	80025ec <LL_ADC_REG_IsConversionOngoing>
 8002846:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fee0 	bl	8002612 <LL_ADC_INJ_IsConversionOngoing>
 8002852:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d14a      	bne.n	80028f0 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d147      	bne.n	80028f0 <HAL_ADC_Init+0x2b8>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	7d1b      	ldrb	r3, [r3, #20]
 8002864:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800286a:	4313      	orrs	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68da      	ldr	r2, [r3, #12]
 8002874:	4b2f      	ldr	r3, [pc, #188]	; (8002934 <HAL_ADC_Init+0x2fc>)
 8002876:	4013      	ands	r3, r2
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	69b9      	ldr	r1, [r7, #24]
 800287e:	430b      	orrs	r3, r1
 8002880:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002888:	2b01      	cmp	r3, #1
 800288a:	d11b      	bne.n	80028c4 <HAL_ADC_Init+0x28c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	4b27      	ldr	r3, [pc, #156]	; (8002938 <HAL_ADC_Init+0x300>)
 800289a:	4013      	ands	r3, r2
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028a0:	3a01      	subs	r2, #1
 80028a2:	0411      	lsls	r1, r2, #16
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028a8:	4311      	orrs	r1, r2
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80028ae:	4311      	orrs	r1, r2
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80028b4:	430a      	orrs	r2, r1
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f042 0201 	orr.w	r2, r2, #1
 80028c0:	611a      	str	r2, [r3, #16]
 80028c2:	e007      	b.n	80028d4 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691a      	ldr	r2, [r3, #16]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0201 	bic.w	r2, r2, #1
 80028d2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 fd96 	bl	800341c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d121      	bne.n	800293c <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	f023 010f 	bic.w	r1, r3, #15
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	1e5a      	subs	r2, r3, #1
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	631a      	str	r2, [r3, #48]	; 0x30
 8002910:	e01c      	b.n	800294c <HAL_ADC_Init+0x314>
 8002912:	bf00      	nop
 8002914:	24000008 	.word	0x24000008
 8002918:	053e2d63 	.word	0x053e2d63
 800291c:	40022000 	.word	0x40022000
 8002920:	40022100 	.word	0x40022100
 8002924:	58026000 	.word	0x58026000
 8002928:	40022300 	.word	0x40022300
 800292c:	58026300 	.word	0x58026300
 8002930:	fff0c003 	.word	0xfff0c003
 8002934:	ffffbffc 	.word	0xffffbffc
 8002938:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 020f 	bic.w	r2, r2, #15
 800294a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002950:	f023 0303 	bic.w	r3, r3, #3
 8002954:	f043 0201 	orr.w	r2, r3, #1
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	655a      	str	r2, [r3, #84]	; 0x54
 800295c:	e007      	b.n	800296e <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002962:	f043 0210 	orr.w	r2, r3, #16
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800296e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3724      	adds	r7, #36	; 0x24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd90      	pop	{r4, r7, pc}

08002978 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a55      	ldr	r2, [pc, #340]	; (8002ae0 <HAL_ADC_Start_DMA+0x168>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d004      	beq.n	8002998 <HAL_ADC_Start_DMA+0x20>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a54      	ldr	r2, [pc, #336]	; (8002ae4 <HAL_ADC_Start_DMA+0x16c>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d101      	bne.n	800299c <HAL_ADC_Start_DMA+0x24>
 8002998:	4b53      	ldr	r3, [pc, #332]	; (8002ae8 <HAL_ADC_Start_DMA+0x170>)
 800299a:	e000      	b.n	800299e <HAL_ADC_Start_DMA+0x26>
 800299c:	4b53      	ldr	r3, [pc, #332]	; (8002aec <HAL_ADC_Start_DMA+0x174>)
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff fd66 	bl	8002470 <LL_ADC_GetMultimode>
 80029a4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff fe1e 	bl	80025ec <LL_ADC_REG_IsConversionOngoing>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f040 808c 	bne.w	8002ad0 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d101      	bne.n	80029c6 <HAL_ADC_Start_DMA+0x4e>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e087      	b.n	8002ad6 <HAL_ADC_Start_DMA+0x15e>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	2b05      	cmp	r3, #5
 80029d8:	d002      	beq.n	80029e0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	2b09      	cmp	r3, #9
 80029de:	d170      	bne.n	8002ac2 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 fbab 	bl	800313c <ADC_Enable>
 80029e6:	4603      	mov	r3, r0
 80029e8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80029ea:	7dfb      	ldrb	r3, [r7, #23]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d163      	bne.n	8002ab8 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029f4:	4b3e      	ldr	r3, [pc, #248]	; (8002af0 <HAL_ADC_Start_DMA+0x178>)
 80029f6:	4013      	ands	r3, r2
 80029f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a37      	ldr	r2, [pc, #220]	; (8002ae4 <HAL_ADC_Start_DMA+0x16c>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d002      	beq.n	8002a10 <HAL_ADC_Start_DMA+0x98>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	e000      	b.n	8002a12 <HAL_ADC_Start_DMA+0x9a>
 8002a10:	4b33      	ldr	r3, [pc, #204]	; (8002ae0 <HAL_ADC_Start_DMA+0x168>)
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	6812      	ldr	r2, [r2, #0]
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d002      	beq.n	8002a20 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d105      	bne.n	8002a2c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a24:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d006      	beq.n	8002a46 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3c:	f023 0206 	bic.w	r2, r3, #6
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	659a      	str	r2, [r3, #88]	; 0x58
 8002a44:	e002      	b.n	8002a4c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a50:	4a28      	ldr	r2, [pc, #160]	; (8002af4 <HAL_ADC_Start_DMA+0x17c>)
 8002a52:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a58:	4a27      	ldr	r2, [pc, #156]	; (8002af8 <HAL_ADC_Start_DMA+0x180>)
 8002a5a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a60:	4a26      	ldr	r2, [pc, #152]	; (8002afc <HAL_ADC_Start_DMA+0x184>)
 8002a62:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	221c      	movs	r2, #28
 8002a6a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0210 	orr.w	r2, r2, #16
 8002a82:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4610      	mov	r0, r2
 8002a90:	f7ff fc8b 	bl	80023aa <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	3340      	adds	r3, #64	; 0x40
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f001 fe5a 	bl	800475c <HAL_DMA_Start_IT>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff fd87 	bl	80025c4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002ab6:	e00d      	b.n	8002ad4 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002ac0:	e008      	b.n	8002ad4 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002ace:	e001      	b.n	8002ad4 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40022000 	.word	0x40022000
 8002ae4:	40022100 	.word	0x40022100
 8002ae8:	40022300 	.word	0x40022300
 8002aec:	58026300 	.word	0x58026300
 8002af0:	fffff0fe 	.word	0xfffff0fe
 8002af4:	080032f5 	.word	0x080032f5
 8002af8:	080033cd 	.word	0x080033cd
 8002afc:	080033e9 	.word	0x080033e9

08002b00 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b14:	b590      	push	{r4, r7, lr}
 8002b16:	b099      	sub	sp, #100	; 0x64
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	4a99      	ldr	r2, [pc, #612]	; (8002d94 <HAL_ADC_ConfigChannel+0x280>)
 8002b2e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d101      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x2a>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	e2e6      	b.n	800310c <HAL_ADC_ConfigChannel+0x5f8>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff fd4e 	bl	80025ec <LL_ADC_REG_IsConversionOngoing>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f040 82cb 	bne.w	80030ee <HAL_ADC_ConfigChannel+0x5da>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d108      	bne.n	8002b76 <HAL_ADC_ConfigChannel+0x62>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	0e9b      	lsrs	r3, r3, #26
 8002b6a:	f003 031f 	and.w	r3, r3, #31
 8002b6e:	2201      	movs	r2, #1
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	e00f      	b.n	8002b96 <HAL_ADC_ConfigChannel+0x82>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b7e:	fa93 f3a3 	rbit	r3, r3
 8002b82:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b86:	fab3 f383 	clz	r3, r3
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	f003 031f 	and.w	r3, r3, #31
 8002b90:	2201      	movs	r2, #1
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6812      	ldr	r2, [r2, #0]
 8002b9a:	69d1      	ldr	r1, [r2, #28]
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6812      	ldr	r2, [r2, #0]
 8002ba0:	430b      	orrs	r3, r1
 8002ba2:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	6859      	ldr	r1, [r3, #4]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	f7ff fbce 	bl	8002352 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff fd16 	bl	80025ec <LL_ADC_REG_IsConversionOngoing>
 8002bc0:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff fd23 	bl	8002612 <LL_ADC_INJ_IsConversionOngoing>
 8002bcc:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f040 80b3 	bne.w	8002d3c <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f040 80af 	bne.w	8002d3c <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6818      	ldr	r0, [r3, #0]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	6819      	ldr	r1, [r3, #0]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	461a      	mov	r2, r3
 8002bec:	f7ff fbf0 	bl	80023d0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002bf0:	4b69      	ldr	r3, [pc, #420]	; (8002d98 <HAL_ADC_ConfigChannel+0x284>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002bf8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bfc:	d10b      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x102>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	695a      	ldr	r2, [r3, #20]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	089b      	lsrs	r3, r3, #2
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	e01d      	b.n	8002c52 <HAL_ADC_ConfigChannel+0x13e>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f003 0310 	and.w	r3, r3, #16
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10b      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x128>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	695a      	ldr	r2, [r3, #20]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	089b      	lsrs	r3, r3, #2
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	e00a      	b.n	8002c52 <HAL_ADC_ConfigChannel+0x13e>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	695a      	ldr	r2, [r3, #20]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	089b      	lsrs	r3, r3, #2
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	d027      	beq.n	8002cac <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6818      	ldr	r0, [r3, #0]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	6919      	ldr	r1, [r3, #16]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c6a:	f7ff fb0b 	bl	8002284 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	6919      	ldr	r1, [r3, #16]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	7e5b      	ldrb	r3, [r3, #25]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d102      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x170>
 8002c7e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002c82:	e000      	b.n	8002c86 <HAL_ADC_ConfigChannel+0x172>
 8002c84:	2300      	movs	r3, #0
 8002c86:	461a      	mov	r2, r3
 8002c88:	f7ff fb35 	bl	80022f6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6818      	ldr	r0, [r3, #0]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	6919      	ldr	r1, [r3, #16]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	7e1b      	ldrb	r3, [r3, #24]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d102      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x18e>
 8002c9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ca0:	e000      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x190>
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	f7ff fb0d 	bl	80022c4 <LL_ADC_SetDataRightShift>
 8002caa:	e047      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x228>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	069b      	lsls	r3, r3, #26
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d107      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002cce:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	069b      	lsls	r3, r3, #26
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d107      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002cf2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cfa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	069b      	lsls	r3, r3, #26
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d107      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d16:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	069b      	lsls	r3, r3, #26
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d107      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d3a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff fc19 	bl	8002578 <LL_ADC_IsEnabled>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f040 81d9 	bne.w	8003100 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6818      	ldr	r0, [r3, #0]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	6819      	ldr	r1, [r3, #0]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	f7ff fb64 	bl	8002428 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	4a0b      	ldr	r2, [pc, #44]	; (8002d94 <HAL_ADC_ConfigChannel+0x280>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	f040 8101 	bne.w	8002f6e <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10f      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x288>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	0e9b      	lsrs	r3, r3, #26
 8002d82:	3301      	adds	r3, #1
 8002d84:	f003 031f 	and.w	r3, r3, #31
 8002d88:	2b09      	cmp	r3, #9
 8002d8a:	bf94      	ite	ls
 8002d8c:	2301      	movls	r3, #1
 8002d8e:	2300      	movhi	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	e016      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x2ae>
 8002d94:	47ff0000 	.word	0x47ff0000
 8002d98:	5c001000 	.word	0x5c001000
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002da4:	fa93 f3a3 	rbit	r3, r3
 8002da8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dac:	fab3 f383 	clz	r3, r3
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	3301      	adds	r3, #1
 8002db4:	f003 031f 	and.w	r3, r3, #31
 8002db8:	2b09      	cmp	r3, #9
 8002dba:	bf94      	ite	ls
 8002dbc:	2301      	movls	r3, #1
 8002dbe:	2300      	movhi	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d064      	beq.n	8002e90 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d107      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x2ce>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	0e9b      	lsrs	r3, r3, #26
 8002dd8:	3301      	adds	r3, #1
 8002dda:	069b      	lsls	r3, r3, #26
 8002ddc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002de0:	e00e      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x2ec>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dea:	fa93 f3a3 	rbit	r3, r3
 8002dee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df2:	fab3 f383 	clz	r3, r3
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	3301      	adds	r3, #1
 8002dfa:	069b      	lsls	r3, r3, #26
 8002dfc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d109      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x30c>
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	0e9b      	lsrs	r3, r3, #26
 8002e12:	3301      	adds	r3, #1
 8002e14:	f003 031f 	and.w	r3, r3, #31
 8002e18:	2101      	movs	r1, #1
 8002e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1e:	e010      	b.n	8002e42 <HAL_ADC_ConfigChannel+0x32e>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e28:	fa93 f3a3 	rbit	r3, r3
 8002e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e30:	fab3 f383 	clz	r3, r3
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	3301      	adds	r3, #1
 8002e38:	f003 031f 	and.w	r3, r3, #31
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e42:	ea42 0103 	orr.w	r1, r2, r3
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10a      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x354>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	0e9b      	lsrs	r3, r3, #26
 8002e58:	3301      	adds	r3, #1
 8002e5a:	f003 021f 	and.w	r2, r3, #31
 8002e5e:	4613      	mov	r3, r2
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	4413      	add	r3, r2
 8002e64:	051b      	lsls	r3, r3, #20
 8002e66:	e011      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x378>
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e70:	fa93 f3a3 	rbit	r3, r3
 8002e74:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	fab3 f383 	clz	r3, r3
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	3301      	adds	r3, #1
 8002e80:	f003 021f 	and.w	r2, r3, #31
 8002e84:	4613      	mov	r3, r2
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	4413      	add	r3, r2
 8002e8a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e8c:	430b      	orrs	r3, r1
 8002e8e:	e069      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d107      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x398>
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	0e9b      	lsrs	r3, r3, #26
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	069b      	lsls	r3, r3, #26
 8002ea6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eaa:	e00e      	b.n	8002eca <HAL_ADC_ConfigChannel+0x3b6>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	fa93 f3a3 	rbit	r3, r3
 8002eb8:	61fb      	str	r3, [r7, #28]
  return result;
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	fab3 f383 	clz	r3, r3
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	069b      	lsls	r3, r3, #26
 8002ec6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d109      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x3d6>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	0e9b      	lsrs	r3, r3, #26
 8002edc:	3301      	adds	r3, #1
 8002ede:	f003 031f 	and.w	r3, r3, #31
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee8:	e010      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x3f8>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	fa93 f3a3 	rbit	r3, r3
 8002ef6:	617b      	str	r3, [r7, #20]
  return result;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	fab3 f383 	clz	r3, r3
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	3301      	adds	r3, #1
 8002f02:	f003 031f 	and.w	r3, r3, #31
 8002f06:	2101      	movs	r1, #1
 8002f08:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0c:	ea42 0103 	orr.w	r1, r2, r3
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10d      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x424>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	0e9b      	lsrs	r3, r3, #26
 8002f22:	3301      	adds	r3, #1
 8002f24:	f003 021f 	and.w	r2, r3, #31
 8002f28:	4613      	mov	r3, r2
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	4413      	add	r3, r2
 8002f2e:	3b1e      	subs	r3, #30
 8002f30:	051b      	lsls	r3, r3, #20
 8002f32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f36:	e014      	b.n	8002f62 <HAL_ADC_ConfigChannel+0x44e>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	fa93 f3a3 	rbit	r3, r3
 8002f44:	60fb      	str	r3, [r7, #12]
  return result;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	fab3 f383 	clz	r3, r3
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	3301      	adds	r3, #1
 8002f50:	f003 021f 	and.w	r2, r3, #31
 8002f54:	4613      	mov	r3, r2
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	4413      	add	r3, r2
 8002f5a:	3b1e      	subs	r3, #30
 8002f5c:	051b      	lsls	r3, r3, #20
 8002f5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f62:	430b      	orrs	r3, r1
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	6892      	ldr	r2, [r2, #8]
 8002f68:	4619      	mov	r1, r3
 8002f6a:	f7ff fa31 	bl	80023d0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f280 80c4 	bge.w	8003100 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a65      	ldr	r2, [pc, #404]	; (8003114 <HAL_ADC_ConfigChannel+0x600>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d004      	beq.n	8002f8c <HAL_ADC_ConfigChannel+0x478>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a64      	ldr	r2, [pc, #400]	; (8003118 <HAL_ADC_ConfigChannel+0x604>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d101      	bne.n	8002f90 <HAL_ADC_ConfigChannel+0x47c>
 8002f8c:	4b63      	ldr	r3, [pc, #396]	; (800311c <HAL_ADC_ConfigChannel+0x608>)
 8002f8e:	e000      	b.n	8002f92 <HAL_ADC_ConfigChannel+0x47e>
 8002f90:	4b63      	ldr	r3, [pc, #396]	; (8003120 <HAL_ADC_ConfigChannel+0x60c>)
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff f968 	bl	8002268 <LL_ADC_GetCommonPathInternalCh>
 8002f98:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a5d      	ldr	r2, [pc, #372]	; (8003114 <HAL_ADC_ConfigChannel+0x600>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d004      	beq.n	8002fae <HAL_ADC_ConfigChannel+0x49a>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a5b      	ldr	r2, [pc, #364]	; (8003118 <HAL_ADC_ConfigChannel+0x604>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d10e      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x4b8>
 8002fae:	4859      	ldr	r0, [pc, #356]	; (8003114 <HAL_ADC_ConfigChannel+0x600>)
 8002fb0:	f7ff fae2 	bl	8002578 <LL_ADC_IsEnabled>
 8002fb4:	4604      	mov	r4, r0
 8002fb6:	4858      	ldr	r0, [pc, #352]	; (8003118 <HAL_ADC_ConfigChannel+0x604>)
 8002fb8:	f7ff fade 	bl	8002578 <LL_ADC_IsEnabled>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	4323      	orrs	r3, r4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	bf0c      	ite	eq
 8002fc4:	2301      	moveq	r3, #1
 8002fc6:	2300      	movne	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	e008      	b.n	8002fde <HAL_ADC_ConfigChannel+0x4ca>
 8002fcc:	4855      	ldr	r0, [pc, #340]	; (8003124 <HAL_ADC_ConfigChannel+0x610>)
 8002fce:	f7ff fad3 	bl	8002578 <LL_ADC_IsEnabled>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	bf0c      	ite	eq
 8002fd8:	2301      	moveq	r3, #1
 8002fda:	2300      	movne	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d07b      	beq.n	80030da <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a50      	ldr	r2, [pc, #320]	; (8003128 <HAL_ADC_ConfigChannel+0x614>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d12e      	bne.n	800304a <HAL_ADC_ConfigChannel+0x536>
 8002fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d129      	bne.n	800304a <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a4a      	ldr	r2, [pc, #296]	; (8003124 <HAL_ADC_ConfigChannel+0x610>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d17f      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a43      	ldr	r2, [pc, #268]	; (8003114 <HAL_ADC_ConfigChannel+0x600>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d004      	beq.n	8003014 <HAL_ADC_ConfigChannel+0x500>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a42      	ldr	r2, [pc, #264]	; (8003118 <HAL_ADC_ConfigChannel+0x604>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d101      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x504>
 8003014:	4a41      	ldr	r2, [pc, #260]	; (800311c <HAL_ADC_ConfigChannel+0x608>)
 8003016:	e000      	b.n	800301a <HAL_ADC_ConfigChannel+0x506>
 8003018:	4a41      	ldr	r2, [pc, #260]	; (8003120 <HAL_ADC_ConfigChannel+0x60c>)
 800301a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800301c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003020:	4619      	mov	r1, r3
 8003022:	4610      	mov	r0, r2
 8003024:	f7ff f90d 	bl	8002242 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003028:	4b40      	ldr	r3, [pc, #256]	; (800312c <HAL_ADC_ConfigChannel+0x618>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	099b      	lsrs	r3, r3, #6
 800302e:	4a40      	ldr	r2, [pc, #256]	; (8003130 <HAL_ADC_ConfigChannel+0x61c>)
 8003030:	fba2 2303 	umull	r2, r3, r2, r3
 8003034:	099b      	lsrs	r3, r3, #6
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800303a:	e002      	b.n	8003042 <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	3b01      	subs	r3, #1
 8003040:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1f9      	bne.n	800303c <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003048:	e05a      	b.n	8003100 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a39      	ldr	r2, [pc, #228]	; (8003134 <HAL_ADC_ConfigChannel+0x620>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d11e      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x57e>
 8003054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003056:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d119      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a30      	ldr	r2, [pc, #192]	; (8003124 <HAL_ADC_ConfigChannel+0x610>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d14b      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a29      	ldr	r2, [pc, #164]	; (8003114 <HAL_ADC_ConfigChannel+0x600>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d004      	beq.n	800307c <HAL_ADC_ConfigChannel+0x568>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a28      	ldr	r2, [pc, #160]	; (8003118 <HAL_ADC_ConfigChannel+0x604>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d101      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x56c>
 800307c:	4a27      	ldr	r2, [pc, #156]	; (800311c <HAL_ADC_ConfigChannel+0x608>)
 800307e:	e000      	b.n	8003082 <HAL_ADC_ConfigChannel+0x56e>
 8003080:	4a27      	ldr	r2, [pc, #156]	; (8003120 <HAL_ADC_ConfigChannel+0x60c>)
 8003082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003084:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003088:	4619      	mov	r1, r3
 800308a:	4610      	mov	r0, r2
 800308c:	f7ff f8d9 	bl	8002242 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003090:	e036      	b.n	8003100 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a28      	ldr	r2, [pc, #160]	; (8003138 <HAL_ADC_ConfigChannel+0x624>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d131      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x5ec>
 800309c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800309e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d12c      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a1e      	ldr	r2, [pc, #120]	; (8003124 <HAL_ADC_ConfigChannel+0x610>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d127      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a17      	ldr	r2, [pc, #92]	; (8003114 <HAL_ADC_ConfigChannel+0x600>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d004      	beq.n	80030c4 <HAL_ADC_ConfigChannel+0x5b0>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a16      	ldr	r2, [pc, #88]	; (8003118 <HAL_ADC_ConfigChannel+0x604>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d101      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x5b4>
 80030c4:	4a15      	ldr	r2, [pc, #84]	; (800311c <HAL_ADC_ConfigChannel+0x608>)
 80030c6:	e000      	b.n	80030ca <HAL_ADC_ConfigChannel+0x5b6>
 80030c8:	4a15      	ldr	r2, [pc, #84]	; (8003120 <HAL_ADC_ConfigChannel+0x60c>)
 80030ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030d0:	4619      	mov	r1, r3
 80030d2:	4610      	mov	r0, r2
 80030d4:	f7ff f8b5 	bl	8002242 <LL_ADC_SetCommonPathInternalCh>
 80030d8:	e012      	b.n	8003100 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030de:	f043 0220 	orr.w	r2, r3, #32
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80030ec:	e008      	b.n	8003100 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f2:	f043 0220 	orr.w	r2, r3, #32
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003108:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800310c:	4618      	mov	r0, r3
 800310e:	3764      	adds	r7, #100	; 0x64
 8003110:	46bd      	mov	sp, r7
 8003112:	bd90      	pop	{r4, r7, pc}
 8003114:	40022000 	.word	0x40022000
 8003118:	40022100 	.word	0x40022100
 800311c:	40022300 	.word	0x40022300
 8003120:	58026300 	.word	0x58026300
 8003124:	58026000 	.word	0x58026000
 8003128:	cb840000 	.word	0xcb840000
 800312c:	24000008 	.word	0x24000008
 8003130:	053e2d63 	.word	0x053e2d63
 8003134:	c7520000 	.word	0xc7520000
 8003138:	cfb80000 	.word	0xcfb80000

0800313c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff fa15 	bl	8002578 <LL_ADC_IsEnabled>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d167      	bne.n	8003224 <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	4b35      	ldr	r3, [pc, #212]	; (8003230 <ADC_Enable+0xf4>)
 800315c:	4013      	ands	r3, r2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00d      	beq.n	800317e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003166:	f043 0210 	orr.w	r2, r3, #16
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003172:	f043 0201 	orr.w	r2, r3, #1
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e053      	b.n	8003226 <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff f9d0 	bl	8002528 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003188:	f7fe fffa 	bl	8002180 <HAL_GetTick>
 800318c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a28      	ldr	r2, [pc, #160]	; (8003234 <ADC_Enable+0xf8>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d004      	beq.n	80031a2 <ADC_Enable+0x66>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a26      	ldr	r2, [pc, #152]	; (8003238 <ADC_Enable+0xfc>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d101      	bne.n	80031a6 <ADC_Enable+0x6a>
 80031a2:	4b26      	ldr	r3, [pc, #152]	; (800323c <ADC_Enable+0x100>)
 80031a4:	e000      	b.n	80031a8 <ADC_Enable+0x6c>
 80031a6:	4b26      	ldr	r3, [pc, #152]	; (8003240 <ADC_Enable+0x104>)
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff f961 	bl	8002470 <LL_ADC_GetMultimode>
 80031ae:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a20      	ldr	r2, [pc, #128]	; (8003238 <ADC_Enable+0xfc>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d002      	beq.n	80031c0 <ADC_Enable+0x84>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	e000      	b.n	80031c2 <ADC_Enable+0x86>
 80031c0:	4b1c      	ldr	r3, [pc, #112]	; (8003234 <ADC_Enable+0xf8>)
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6812      	ldr	r2, [r2, #0]
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d025      	beq.n	8003216 <ADC_Enable+0xda>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d129      	bne.n	8003224 <ADC_Enable+0xe8>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031d0:	e021      	b.n	8003216 <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff f9ce 	bl	8002578 <LL_ADC_IsEnabled>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d104      	bne.n	80031ec <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff f99e 	bl	8002528 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031ec:	f7fe ffc8 	bl	8002180 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d90d      	bls.n	8003216 <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fe:	f043 0210 	orr.w	r2, r3, #16
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320a:	f043 0201 	orr.w	r2, r3, #1
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e007      	b.n	8003226 <ADC_Enable+0xea>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b01      	cmp	r3, #1
 8003222:	d1d6      	bne.n	80031d2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	8000003f 	.word	0x8000003f
 8003234:	40022000 	.word	0x40022000
 8003238:	40022100 	.word	0x40022100
 800323c:	40022300 	.word	0x40022300
 8003240:	58026300 	.word	0x58026300

08003244 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff f9a4 	bl	800259e <LL_ADC_IsDisableOngoing>
 8003256:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff f98b 	bl	8002578 <LL_ADC_IsEnabled>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d040      	beq.n	80032ea <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d13d      	bne.n	80032ea <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 030d 	and.w	r3, r3, #13
 8003278:	2b01      	cmp	r3, #1
 800327a:	d10c      	bne.n	8003296 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff f965 	bl	8002550 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2203      	movs	r2, #3
 800328c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800328e:	f7fe ff77 	bl	8002180 <HAL_GetTick>
 8003292:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003294:	e022      	b.n	80032dc <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329a:	f043 0210 	orr.w	r2, r3, #16
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a6:	f043 0201 	orr.w	r2, r3, #1
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e01c      	b.n	80032ec <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032b2:	f7fe ff65 	bl	8002180 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d90d      	bls.n	80032dc <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c4:	f043 0210 	orr.w	r2, r3, #16
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d0:	f043 0201 	orr.w	r2, r3, #1
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e007      	b.n	80032ec <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1e3      	bne.n	80032b2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003300:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003306:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800330a:	2b00      	cmp	r3, #0
 800330c:	d14b      	bne.n	80033a6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003312:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0308 	and.w	r3, r3, #8
 8003324:	2b00      	cmp	r3, #0
 8003326:	d021      	beq.n	800336c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f7fe fffd 	bl	800232c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d032      	beq.n	800339e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d12b      	bne.n	800339e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800334a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003356:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d11f      	bne.n	800339e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003362:	f043 0201 	orr.w	r2, r3, #1
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	655a      	str	r2, [r3, #84]	; 0x54
 800336a:	e018      	b.n	800339e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d111      	bne.n	800339e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d105      	bne.n	800339e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003396:	f043 0201 	orr.w	r2, r3, #1
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f7fe f998 	bl	80016d4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80033a4:	e00e      	b.n	80033c4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033aa:	f003 0310 	and.w	r3, r3, #16
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f7ff fba4 	bl	8002b00 <HAL_ADC_ErrorCallback>
}
 80033b8:	e004      	b.n	80033c4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	4798      	blx	r3
}
 80033c4:	bf00      	nop
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f7fe f99c 	bl	8001718 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033e0:	bf00      	nop
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003406:	f043 0204 	orr.w	r2, r3, #4
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f7ff fb76 	bl	8002b00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003414:	bf00      	nop
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a70      	ldr	r2, [pc, #448]	; (80035ec <ADC_ConfigureBoostMode+0x1d0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d004      	beq.n	8003438 <ADC_ConfigureBoostMode+0x1c>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a6f      	ldr	r2, [pc, #444]	; (80035f0 <ADC_ConfigureBoostMode+0x1d4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d109      	bne.n	800344c <ADC_ConfigureBoostMode+0x30>
 8003438:	4b6e      	ldr	r3, [pc, #440]	; (80035f4 <ADC_ConfigureBoostMode+0x1d8>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003440:	2b00      	cmp	r3, #0
 8003442:	bf14      	ite	ne
 8003444:	2301      	movne	r3, #1
 8003446:	2300      	moveq	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	e008      	b.n	800345e <ADC_ConfigureBoostMode+0x42>
 800344c:	4b6a      	ldr	r3, [pc, #424]	; (80035f8 <ADC_ConfigureBoostMode+0x1dc>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003454:	2b00      	cmp	r3, #0
 8003456:	bf14      	ite	ne
 8003458:	2301      	movne	r3, #1
 800345a:	2300      	moveq	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d01a      	beq.n	8003498 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003462:	f004 ffff 	bl	8008464 <HAL_RCC_GetHCLKFreq>
 8003466:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003470:	d006      	beq.n	8003480 <ADC_ConfigureBoostMode+0x64>
 8003472:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003476:	d00b      	beq.n	8003490 <ADC_ConfigureBoostMode+0x74>
 8003478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800347c:	d000      	beq.n	8003480 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 800347e:	e05d      	b.n	800353c <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	0c1b      	lsrs	r3, r3, #16
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	fbb2 f3f3 	udiv	r3, r2, r3
 800348c:	60fb      	str	r3, [r7, #12]
        break;
 800348e:	e055      	b.n	800353c <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	089b      	lsrs	r3, r3, #2
 8003494:	60fb      	str	r3, [r7, #12]
        break;
 8003496:	e051      	b.n	800353c <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003498:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800349c:	f005 ff2c 	bl	80092f8 <HAL_RCCEx_GetPeriphCLKFreq>
 80034a0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80034aa:	d02a      	beq.n	8003502 <ADC_ConfigureBoostMode+0xe6>
 80034ac:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80034b0:	d813      	bhi.n	80034da <ADC_ConfigureBoostMode+0xbe>
 80034b2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80034b6:	d024      	beq.n	8003502 <ADC_ConfigureBoostMode+0xe6>
 80034b8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80034bc:	d806      	bhi.n	80034cc <ADC_ConfigureBoostMode+0xb0>
 80034be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034c2:	d01e      	beq.n	8003502 <ADC_ConfigureBoostMode+0xe6>
 80034c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80034c8:	d01b      	beq.n	8003502 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 80034ca:	e037      	b.n	800353c <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 80034cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034d0:	d017      	beq.n	8003502 <ADC_ConfigureBoostMode+0xe6>
 80034d2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80034d6:	d014      	beq.n	8003502 <ADC_ConfigureBoostMode+0xe6>
        break;
 80034d8:	e030      	b.n	800353c <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 80034da:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80034de:	d021      	beq.n	8003524 <ADC_ConfigureBoostMode+0x108>
 80034e0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80034e4:	d806      	bhi.n	80034f4 <ADC_ConfigureBoostMode+0xd8>
 80034e6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80034ea:	d013      	beq.n	8003514 <ADC_ConfigureBoostMode+0xf8>
 80034ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034f0:	d014      	beq.n	800351c <ADC_ConfigureBoostMode+0x100>
        break;
 80034f2:	e023      	b.n	800353c <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 80034f4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80034f8:	d018      	beq.n	800352c <ADC_ConfigureBoostMode+0x110>
 80034fa:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80034fe:	d019      	beq.n	8003534 <ADC_ConfigureBoostMode+0x118>
        break;
 8003500:	e01c      	b.n	800353c <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	0c9b      	lsrs	r3, r3, #18
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003510:	60fb      	str	r3, [r7, #12]
        break;
 8003512:	e013      	b.n	800353c <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	091b      	lsrs	r3, r3, #4
 8003518:	60fb      	str	r3, [r7, #12]
        break;
 800351a:	e00f      	b.n	800353c <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	095b      	lsrs	r3, r3, #5
 8003520:	60fb      	str	r3, [r7, #12]
        break;
 8003522:	e00b      	b.n	800353c <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	099b      	lsrs	r3, r3, #6
 8003528:	60fb      	str	r3, [r7, #12]
        break;
 800352a:	e007      	b.n	800353c <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	09db      	lsrs	r3, r3, #7
 8003530:	60fb      	str	r3, [r7, #12]
        break;
 8003532:	e003      	b.n	800353c <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	0a1b      	lsrs	r3, r3, #8
 8003538:	60fb      	str	r3, [r7, #12]
        break;
 800353a:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800353c:	f7fe fe4e 	bl	80021dc <HAL_GetREVID>
 8003540:	4602      	mov	r2, r0
 8003542:	f241 0303 	movw	r3, #4099	; 0x1003
 8003546:	429a      	cmp	r2, r3
 8003548:	d815      	bhi.n	8003576 <ADC_ConfigureBoostMode+0x15a>
  {
    if (freq > 20000000UL)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4a2b      	ldr	r2, [pc, #172]	; (80035fc <ADC_ConfigureBoostMode+0x1e0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d908      	bls.n	8003564 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003560:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003562:	e03e      	b.n	80035e2 <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003572:	609a      	str	r2, [r3, #8]
}
 8003574:	e035      	b.n	80035e2 <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	085b      	lsrs	r3, r3, #1
 800357a:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4a20      	ldr	r2, [pc, #128]	; (8003600 <ADC_ConfigureBoostMode+0x1e4>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d808      	bhi.n	8003596 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689a      	ldr	r2, [r3, #8]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003592:	609a      	str	r2, [r3, #8]
}
 8003594:	e025      	b.n	80035e2 <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 12500000UL)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	4a1a      	ldr	r2, [pc, #104]	; (8003604 <ADC_ConfigureBoostMode+0x1e8>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d80a      	bhi.n	80035b4 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035b0:	609a      	str	r2, [r3, #8]
}
 80035b2:	e016      	b.n	80035e2 <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 25000000UL)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4a14      	ldr	r2, [pc, #80]	; (8003608 <ADC_ConfigureBoostMode+0x1ec>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d80a      	bhi.n	80035d2 <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ce:	609a      	str	r2, [r3, #8]
}
 80035d0:	e007      	b.n	80035e2 <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80035e0:	609a      	str	r2, [r3, #8]
}
 80035e2:	bf00      	nop
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	40022000 	.word	0x40022000
 80035f0:	40022100 	.word	0x40022100
 80035f4:	40022300 	.word	0x40022300
 80035f8:	58026300 	.word	0x58026300
 80035fc:	01312d00 	.word	0x01312d00
 8003600:	005f5e10 	.word	0x005f5e10
 8003604:	00bebc20 	.word	0x00bebc20
 8003608:	017d7840 	.word	0x017d7840

0800360c <LL_ADC_IsEnabled>:
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b01      	cmp	r3, #1
 800361e:	d101      	bne.n	8003624 <LL_ADC_IsEnabled+0x18>
 8003620:	2301      	movs	r3, #1
 8003622:	e000      	b.n	8003626 <LL_ADC_IsEnabled+0x1a>
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
	...

08003634 <LL_ADC_StartCalibration>:
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	4b09      	ldr	r3, [pc, #36]	; (800366c <LL_ADC_StartCalibration+0x38>)
 8003646:	4013      	ands	r3, r2
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003654:	430a      	orrs	r2, r1
 8003656:	4313      	orrs	r3, r2
 8003658:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	609a      	str	r2, [r3, #8]
}
 8003660:	bf00      	nop
 8003662:	3714      	adds	r7, #20
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	3ffeffc0 	.word	0x3ffeffc0

08003670 <LL_ADC_IsCalibrationOnGoing>:
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003680:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003684:	d101      	bne.n	800368a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003686:	2301      	movs	r3, #1
 8003688:	e000      	b.n	800368c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <LL_ADC_REG_IsConversionOngoing>:
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d101      	bne.n	80036b0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80036ac:	2301      	movs	r3, #1
 80036ae:	e000      	b.n	80036b2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
	...

080036c0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80036cc:	2300      	movs	r3, #0
 80036ce:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d101      	bne.n	80036de <HAL_ADCEx_Calibration_Start+0x1e>
 80036da:	2302      	movs	r3, #2
 80036dc:	e04c      	b.n	8003778 <HAL_ADCEx_Calibration_Start+0xb8>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f7ff fdac 	bl	8003244 <ADC_Disable>
 80036ec:	4603      	mov	r3, r0
 80036ee:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80036f0:	7dfb      	ldrb	r3, [r7, #23]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d135      	bne.n	8003762 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036fa:	4b21      	ldr	r3, [pc, #132]	; (8003780 <HAL_ADCEx_Calibration_Start+0xc0>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	f043 0202 	orr.w	r2, r3, #2
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	68b9      	ldr	r1, [r7, #8]
 800370e:	4618      	mov	r0, r3
 8003710:	f7ff ff90 	bl	8003634 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003714:	e014      	b.n	8003740 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	3301      	adds	r3, #1
 800371a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4a19      	ldr	r2, [pc, #100]	; (8003784 <HAL_ADCEx_Calibration_Start+0xc4>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d90d      	bls.n	8003740 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003728:	f023 0312 	bic.w	r3, r3, #18
 800372c:	f043 0210 	orr.w	r2, r3, #16
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e01b      	b.n	8003778 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff ff93 	bl	8003670 <LL_ADC_IsCalibrationOnGoing>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1e2      	bne.n	8003716 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003754:	f023 0303 	bic.w	r3, r3, #3
 8003758:	f043 0201 	orr.w	r2, r3, #1
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	655a      	str	r2, [r3, #84]	; 0x54
 8003760:	e005      	b.n	800376e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003766:	f043 0210 	orr.w	r2, r3, #16
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003776:	7dfb      	ldrb	r3, [r7, #23]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	ffffeefd 	.word	0xffffeefd
 8003784:	25c3f7ff 	.word	0x25c3f7ff

08003788 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003788:	b590      	push	{r4, r7, lr}
 800378a:	b09f      	sub	sp, #124	; 0x7c
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003792:	2300      	movs	r3, #0
 8003794:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d101      	bne.n	80037a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80037a2:	2302      	movs	r3, #2
 80037a4:	e0ba      	b.n	800391c <HAL_ADCEx_MultiModeConfigChannel+0x194>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a5c      	ldr	r2, [pc, #368]	; (8003924 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d102      	bne.n	80037be <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80037b8:	4b5b      	ldr	r3, [pc, #364]	; (8003928 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80037ba:	60bb      	str	r3, [r7, #8]
 80037bc:	e001      	b.n	80037c2 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80037be:	2300      	movs	r3, #0
 80037c0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10b      	bne.n	80037e0 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037cc:	f043 0220 	orr.w	r2, r3, #32
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e09d      	b.n	800391c <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff ff58 	bl	8003698 <LL_ADC_REG_IsConversionOngoing>
 80037e8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff ff52 	bl	8003698 <LL_ADC_REG_IsConversionOngoing>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d17f      	bne.n	80038fa <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80037fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d17c      	bne.n	80038fa <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a47      	ldr	r2, [pc, #284]	; (8003924 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d004      	beq.n	8003814 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a46      	ldr	r2, [pc, #280]	; (8003928 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d101      	bne.n	8003818 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8003814:	4b45      	ldr	r3, [pc, #276]	; (800392c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003816:	e000      	b.n	800381a <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8003818:	4b45      	ldr	r3, [pc, #276]	; (8003930 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800381a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d039      	beq.n	8003898 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	431a      	orrs	r2, r3
 8003832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003834:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a3a      	ldr	r2, [pc, #232]	; (8003924 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d004      	beq.n	800384a <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a38      	ldr	r2, [pc, #224]	; (8003928 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d10e      	bne.n	8003868 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800384a:	4836      	ldr	r0, [pc, #216]	; (8003924 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800384c:	f7ff fede 	bl	800360c <LL_ADC_IsEnabled>
 8003850:	4604      	mov	r4, r0
 8003852:	4835      	ldr	r0, [pc, #212]	; (8003928 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003854:	f7ff feda 	bl	800360c <LL_ADC_IsEnabled>
 8003858:	4603      	mov	r3, r0
 800385a:	4323      	orrs	r3, r4
 800385c:	2b00      	cmp	r3, #0
 800385e:	bf0c      	ite	eq
 8003860:	2301      	moveq	r3, #1
 8003862:	2300      	movne	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	e008      	b.n	800387a <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8003868:	4832      	ldr	r0, [pc, #200]	; (8003934 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800386a:	f7ff fecf 	bl	800360c <LL_ADC_IsEnabled>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	bf0c      	ite	eq
 8003874:	2301      	moveq	r3, #1
 8003876:	2300      	movne	r3, #0
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d047      	beq.n	800390e <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800387e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	4b2d      	ldr	r3, [pc, #180]	; (8003938 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003884:	4013      	ands	r3, r2
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	6811      	ldr	r1, [r2, #0]
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	6892      	ldr	r2, [r2, #8]
 800388e:	430a      	orrs	r2, r1
 8003890:	431a      	orrs	r2, r3
 8003892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003894:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003896:	e03a      	b.n	800390e <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038a2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a1e      	ldr	r2, [pc, #120]	; (8003924 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d004      	beq.n	80038b8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a1d      	ldr	r2, [pc, #116]	; (8003928 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d10e      	bne.n	80038d6 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 80038b8:	481a      	ldr	r0, [pc, #104]	; (8003924 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80038ba:	f7ff fea7 	bl	800360c <LL_ADC_IsEnabled>
 80038be:	4604      	mov	r4, r0
 80038c0:	4819      	ldr	r0, [pc, #100]	; (8003928 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80038c2:	f7ff fea3 	bl	800360c <LL_ADC_IsEnabled>
 80038c6:	4603      	mov	r3, r0
 80038c8:	4323      	orrs	r3, r4
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	bf0c      	ite	eq
 80038ce:	2301      	moveq	r3, #1
 80038d0:	2300      	movne	r3, #0
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	e008      	b.n	80038e8 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 80038d6:	4817      	ldr	r0, [pc, #92]	; (8003934 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80038d8:	f7ff fe98 	bl	800360c <LL_ADC_IsEnabled>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	bf0c      	ite	eq
 80038e2:	2301      	moveq	r3, #1
 80038e4:	2300      	movne	r3, #0
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d010      	beq.n	800390e <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80038ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	4b11      	ldr	r3, [pc, #68]	; (8003938 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80038f2:	4013      	ands	r3, r2
 80038f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038f6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038f8:	e009      	b.n	800390e <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fe:	f043 0220 	orr.w	r2, r3, #32
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800390c:	e000      	b.n	8003910 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800390e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003918:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800391c:	4618      	mov	r0, r3
 800391e:	377c      	adds	r7, #124	; 0x7c
 8003920:	46bd      	mov	sp, r7
 8003922:	bd90      	pop	{r4, r7, pc}
 8003924:	40022000 	.word	0x40022000
 8003928:	40022100 	.word	0x40022100
 800392c:	40022300 	.word	0x40022300
 8003930:	58026300 	.word	0x58026300
 8003934:	58026000 	.word	0x58026000
 8003938:	fffff0e0 	.word	0xfffff0e0

0800393c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f003 0307 	and.w	r3, r3, #7
 800394a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800394c:	4b0b      	ldr	r3, [pc, #44]	; (800397c <__NVIC_SetPriorityGrouping+0x40>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003958:	4013      	ands	r3, r2
 800395a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003964:	4b06      	ldr	r3, [pc, #24]	; (8003980 <__NVIC_SetPriorityGrouping+0x44>)
 8003966:	4313      	orrs	r3, r2
 8003968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800396a:	4a04      	ldr	r2, [pc, #16]	; (800397c <__NVIC_SetPriorityGrouping+0x40>)
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	60d3      	str	r3, [r2, #12]
}
 8003970:	bf00      	nop
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	e000ed00 	.word	0xe000ed00
 8003980:	05fa0000 	.word	0x05fa0000

08003984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003988:	4b04      	ldr	r3, [pc, #16]	; (800399c <__NVIC_GetPriorityGrouping+0x18>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	0a1b      	lsrs	r3, r3, #8
 800398e:	f003 0307 	and.w	r3, r3, #7
}
 8003992:	4618      	mov	r0, r3
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	e000ed00 	.word	0xe000ed00

080039a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	4603      	mov	r3, r0
 80039a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80039aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	db0b      	blt.n	80039ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039b2:	88fb      	ldrh	r3, [r7, #6]
 80039b4:	f003 021f 	and.w	r2, r3, #31
 80039b8:	4907      	ldr	r1, [pc, #28]	; (80039d8 <__NVIC_EnableIRQ+0x38>)
 80039ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039be:	095b      	lsrs	r3, r3, #5
 80039c0:	2001      	movs	r0, #1
 80039c2:	fa00 f202 	lsl.w	r2, r0, r2
 80039c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	e000e100 	.word	0xe000e100

080039dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	6039      	str	r1, [r7, #0]
 80039e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80039e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	db0a      	blt.n	8003a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	490c      	ldr	r1, [pc, #48]	; (8003a28 <__NVIC_SetPriority+0x4c>)
 80039f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039fa:	0112      	lsls	r2, r2, #4
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	440b      	add	r3, r1
 8003a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a04:	e00a      	b.n	8003a1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	4908      	ldr	r1, [pc, #32]	; (8003a2c <__NVIC_SetPriority+0x50>)
 8003a0c:	88fb      	ldrh	r3, [r7, #6]
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	3b04      	subs	r3, #4
 8003a14:	0112      	lsls	r2, r2, #4
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	440b      	add	r3, r1
 8003a1a:	761a      	strb	r2, [r3, #24]
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	e000e100 	.word	0xe000e100
 8003a2c:	e000ed00 	.word	0xe000ed00

08003a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b089      	sub	sp, #36	; 0x24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f1c3 0307 	rsb	r3, r3, #7
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	bf28      	it	cs
 8003a4e:	2304      	movcs	r3, #4
 8003a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	3304      	adds	r3, #4
 8003a56:	2b06      	cmp	r3, #6
 8003a58:	d902      	bls.n	8003a60 <NVIC_EncodePriority+0x30>
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	3b03      	subs	r3, #3
 8003a5e:	e000      	b.n	8003a62 <NVIC_EncodePriority+0x32>
 8003a60:	2300      	movs	r3, #0
 8003a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	43da      	mvns	r2, r3
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	401a      	ands	r2, r3
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a82:	43d9      	mvns	r1, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a88:	4313      	orrs	r3, r2
         );
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3724      	adds	r7, #36	; 0x24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
	...

08003a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003aa8:	d301      	bcc.n	8003aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e00f      	b.n	8003ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aae:	4a0a      	ldr	r2, [pc, #40]	; (8003ad8 <SysTick_Config+0x40>)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ab6:	210f      	movs	r1, #15
 8003ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003abc:	f7ff ff8e 	bl	80039dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ac0:	4b05      	ldr	r3, [pc, #20]	; (8003ad8 <SysTick_Config+0x40>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ac6:	4b04      	ldr	r3, [pc, #16]	; (8003ad8 <SysTick_Config+0x40>)
 8003ac8:	2207      	movs	r2, #7
 8003aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	e000e010 	.word	0xe000e010

08003adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f7ff ff29 	bl	800393c <__NVIC_SetPriorityGrouping>
}
 8003aea:	bf00      	nop
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b086      	sub	sp, #24
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	4603      	mov	r3, r0
 8003afa:	60b9      	str	r1, [r7, #8]
 8003afc:	607a      	str	r2, [r7, #4]
 8003afe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b00:	f7ff ff40 	bl	8003984 <__NVIC_GetPriorityGrouping>
 8003b04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	68b9      	ldr	r1, [r7, #8]
 8003b0a:	6978      	ldr	r0, [r7, #20]
 8003b0c:	f7ff ff90 	bl	8003a30 <NVIC_EncodePriority>
 8003b10:	4602      	mov	r2, r0
 8003b12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b16:	4611      	mov	r1, r2
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff ff5f 	bl	80039dc <__NVIC_SetPriority>
}
 8003b1e:	bf00      	nop
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b082      	sub	sp, #8
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff ff33 	bl	80039a0 <__NVIC_EnableIRQ>
}
 8003b3a:	bf00      	nop
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b082      	sub	sp, #8
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7ff ffa4 	bl	8003a98 <SysTick_Config>
 8003b50:	4603      	mov	r3, r0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b082      	sub	sp, #8
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e014      	b.n	8003b96 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	791b      	ldrb	r3, [r3, #4]
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d105      	bne.n	8003b82 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f7fd fe7b 	bl	8001878 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2202      	movs	r2, #2
 8003b86:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
 8003bac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	795b      	ldrb	r3, [r3, #5]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d101      	bne.n	8003bbe <HAL_DAC_Start_DMA+0x1e>
 8003bba:	2302      	movs	r3, #2
 8003bbc:	e09e      	b.n	8003cfc <HAL_DAC_Start_DMA+0x15c>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d12a      	bne.n	8003c26 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	4a4b      	ldr	r2, [pc, #300]	; (8003d04 <HAL_DAC_Start_DMA+0x164>)
 8003bd6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	4a4a      	ldr	r2, [pc, #296]	; (8003d08 <HAL_DAC_Start_DMA+0x168>)
 8003bde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	4a49      	ldr	r2, [pc, #292]	; (8003d0c <HAL_DAC_Start_DMA+0x16c>)
 8003be6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003bf6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d009      	beq.n	8003c12 <HAL_DAC_Start_DMA+0x72>
 8003bfe:	2b08      	cmp	r3, #8
 8003c00:	d00c      	beq.n	8003c1c <HAL_DAC_Start_DMA+0x7c>
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d000      	beq.n	8003c08 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003c06:	e039      	b.n	8003c7c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	3308      	adds	r3, #8
 8003c0e:	613b      	str	r3, [r7, #16]
        break;
 8003c10:	e034      	b.n	8003c7c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	330c      	adds	r3, #12
 8003c18:	613b      	str	r3, [r7, #16]
        break;
 8003c1a:	e02f      	b.n	8003c7c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	3310      	adds	r3, #16
 8003c22:	613b      	str	r3, [r7, #16]
        break;
 8003c24:	e02a      	b.n	8003c7c <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	4a39      	ldr	r2, [pc, #228]	; (8003d10 <HAL_DAC_Start_DMA+0x170>)
 8003c2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	4a38      	ldr	r2, [pc, #224]	; (8003d14 <HAL_DAC_Start_DMA+0x174>)
 8003c34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	4a37      	ldr	r2, [pc, #220]	; (8003d18 <HAL_DAC_Start_DMA+0x178>)
 8003c3c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003c4c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	2b04      	cmp	r3, #4
 8003c52:	d009      	beq.n	8003c68 <HAL_DAC_Start_DMA+0xc8>
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d00c      	beq.n	8003c72 <HAL_DAC_Start_DMA+0xd2>
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d000      	beq.n	8003c5e <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003c5c:	e00e      	b.n	8003c7c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	3314      	adds	r3, #20
 8003c64:	613b      	str	r3, [r7, #16]
        break;
 8003c66:	e009      	b.n	8003c7c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	3318      	adds	r3, #24
 8003c6e:	613b      	str	r3, [r7, #16]
        break;
 8003c70:	e004      	b.n	8003c7c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	331c      	adds	r3, #28
 8003c78:	613b      	str	r3, [r7, #16]
        break;
 8003c7a:	bf00      	nop
    }
  }

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d111      	bne.n	8003ca6 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c90:	601a      	str	r2, [r3, #0]

   /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6898      	ldr	r0, [r3, #8]
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	f000 fd5e 	bl	800475c <HAL_DMA_Start_IT>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	75fb      	strb	r3, [r7, #23]
 8003ca4:	e010      	b.n	8003cc8 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003cb4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	68d8      	ldr	r0, [r3, #12]
 8003cba:	6879      	ldr	r1, [r7, #4]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	f000 fd4c 	bl	800475c <HAL_DMA_Start_IT>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003cce:	7dfb      	ldrb	r3, [r7, #23]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10c      	bne.n	8003cee <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6819      	ldr	r1, [r3, #0]
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	f003 0310 	and.w	r3, r3, #16
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	409a      	lsls	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	e005      	b.n	8003cfa <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	f043 0204 	orr.w	r2, r3, #4
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3718      	adds	r7, #24
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	08003f91 	.word	0x08003f91
 8003d08:	08003fb3 	.word	0x08003fb3
 8003d0c:	08003fcf 	.word	0x08003fcf
 8003d10:	08004039 	.word	0x08004039
 8003d14:	0800405b 	.word	0x0800405b
 8003d18:	08004077 	.word	0x08004077

08003d1c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b088      	sub	sp, #32
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	795b      	ldrb	r3, [r3, #5]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d101      	bne.n	8003d48 <HAL_DAC_ConfigChannel+0x18>
 8003d44:	2302      	movs	r3, #2
 8003d46:	e11d      	b.n	8003f84 <HAL_DAC_ConfigChannel+0x254>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2202      	movs	r2, #2
 8003d52:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b04      	cmp	r3, #4
 8003d5a:	d174      	bne.n	8003e46 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003d5c:	f7fe fa10 	bl	8002180 <HAL_GetTick>
 8003d60:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d134      	bne.n	8003dd2 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003d68:	e011      	b.n	8003d8e <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003d6a:	f7fe fa09 	bl	8002180 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d90a      	bls.n	8003d8e <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	f043 0208 	orr.w	r2, r3, #8
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2203      	movs	r2, #3
 8003d88:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e0fa      	b.n	8003f84 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d94:	4b7d      	ldr	r3, [pc, #500]	; (8003f8c <HAL_DAC_ConfigChannel+0x25c>)
 8003d96:	4013      	ands	r3, r2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1e6      	bne.n	8003d6a <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8003d9c:	2001      	movs	r0, #1
 8003d9e:	f7fe f9fb 	bl	8002198 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	6992      	ldr	r2, [r2, #24]
 8003daa:	641a      	str	r2, [r3, #64]	; 0x40
 8003dac:	e01e      	b.n	8003dec <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003dae:	f7fe f9e7 	bl	8002180 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d90a      	bls.n	8003dd2 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	f043 0208 	orr.w	r2, r3, #8
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2203      	movs	r2, #3
 8003dcc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e0d8      	b.n	8003f84 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	dbe8      	blt.n	8003dae <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8003ddc:	2001      	movs	r0, #1
 8003dde:	f7fe f9db 	bl	8002198 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	6992      	ldr	r2, [r2, #24]
 8003dea:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f003 0310 	and.w	r3, r3, #16
 8003df8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003e00:	43db      	mvns	r3, r3
 8003e02:	ea02 0103 	and.w	r1, r2, r3
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	69da      	ldr	r2, [r3, #28]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f003 0310 	and.w	r3, r3, #16
 8003e10:	409a      	lsls	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f003 0310 	and.w	r3, r3, #16
 8003e26:	21ff      	movs	r1, #255	; 0xff
 8003e28:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	ea02 0103 	and.w	r1, r2, r3
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	6a1a      	ldr	r2, [r3, #32]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f003 0310 	and.w	r3, r3, #16
 8003e3c:	409a      	lsls	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d11d      	bne.n	8003e8a <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e54:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f003 0310 	and.w	r3, r3, #16
 8003e5c:	221f      	movs	r2, #31
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	43db      	mvns	r3, r3
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	4013      	ands	r3, r2
 8003e68:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f003 0310 	and.w	r3, r3, #16
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e90:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f003 0310 	and.w	r3, r3, #16
 8003e98:	2207      	movs	r2, #7
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	43db      	mvns	r3, r3
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d102      	bne.n	8003eb4 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61fb      	str	r3, [r7, #28]
 8003eb2:	e00f      	b.n	8003ed4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d102      	bne.n	8003ec2 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	61fb      	str	r3, [r7, #28]
 8003ec0:	e008      	b.n	8003ed4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d102      	bne.n	8003ed0 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	61fb      	str	r3, [r7, #28]
 8003ece:	e001      	b.n	8003ed4 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	69fa      	ldr	r2, [r7, #28]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f003 0310 	and.w	r3, r3, #16
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6819      	ldr	r1, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f003 0310 	and.w	r3, r3, #16
 8003f0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	43da      	mvns	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	400a      	ands	r2, r1
 8003f1a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f003 0310 	and.w	r3, r3, #16
 8003f2a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f32:	43db      	mvns	r3, r3
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	4013      	ands	r3, r2
 8003f38:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f003 0310 	and.w	r3, r3, #16
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6819      	ldr	r1, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f003 0310 	and.w	r3, r3, #16
 8003f66:	22c0      	movs	r2, #192	; 0xc0
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	43da      	mvns	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	400a      	ands	r2, r1
 8003f74:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3720      	adds	r7, #32
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	20008000 	.word	0x20008000

08003f90 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f7fd fb78 	bl	8001694 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	711a      	strb	r2, [r3, #4]
}
 8003faa:	bf00      	nop
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b084      	sub	sp, #16
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbe:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f7fd fb77 	bl	80016b4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003fc6:	bf00      	nop
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b084      	sub	sp, #16
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	f043 0204 	orr.w	r2, r3, #4
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f7ff fe97 	bl	8003d1c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	711a      	strb	r2, [r3, #4]
}
 8003ff4:	bf00      	nop
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004044:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f7ff ffd8 	bl	8003ffc <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2201      	movs	r2, #1
 8004050:	711a      	strb	r2, [r3, #4]
}
 8004052:	bf00      	nop
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b084      	sub	sp, #16
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004066:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f7ff ffd1 	bl	8004010 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800406e:	bf00      	nop
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b084      	sub	sp, #16
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004082:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	f043 0204 	orr.w	r2, r3, #4
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f7ff ffc7 	bl	8004024 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2201      	movs	r2, #1
 800409a:	711a      	strb	r2, [r3, #4]
}
 800409c:	bf00      	nop
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80040ac:	f7fe f868 	bl	8002180 <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e316      	b.n	80046ea <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a66      	ldr	r2, [pc, #408]	; (800425c <HAL_DMA_Init+0x1b8>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d04a      	beq.n	800415c <HAL_DMA_Init+0xb8>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a65      	ldr	r2, [pc, #404]	; (8004260 <HAL_DMA_Init+0x1bc>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d045      	beq.n	800415c <HAL_DMA_Init+0xb8>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a63      	ldr	r2, [pc, #396]	; (8004264 <HAL_DMA_Init+0x1c0>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d040      	beq.n	800415c <HAL_DMA_Init+0xb8>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a62      	ldr	r2, [pc, #392]	; (8004268 <HAL_DMA_Init+0x1c4>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d03b      	beq.n	800415c <HAL_DMA_Init+0xb8>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a60      	ldr	r2, [pc, #384]	; (800426c <HAL_DMA_Init+0x1c8>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d036      	beq.n	800415c <HAL_DMA_Init+0xb8>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a5f      	ldr	r2, [pc, #380]	; (8004270 <HAL_DMA_Init+0x1cc>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d031      	beq.n	800415c <HAL_DMA_Init+0xb8>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a5d      	ldr	r2, [pc, #372]	; (8004274 <HAL_DMA_Init+0x1d0>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d02c      	beq.n	800415c <HAL_DMA_Init+0xb8>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a5c      	ldr	r2, [pc, #368]	; (8004278 <HAL_DMA_Init+0x1d4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d027      	beq.n	800415c <HAL_DMA_Init+0xb8>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a5a      	ldr	r2, [pc, #360]	; (800427c <HAL_DMA_Init+0x1d8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d022      	beq.n	800415c <HAL_DMA_Init+0xb8>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a59      	ldr	r2, [pc, #356]	; (8004280 <HAL_DMA_Init+0x1dc>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d01d      	beq.n	800415c <HAL_DMA_Init+0xb8>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a57      	ldr	r2, [pc, #348]	; (8004284 <HAL_DMA_Init+0x1e0>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d018      	beq.n	800415c <HAL_DMA_Init+0xb8>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a56      	ldr	r2, [pc, #344]	; (8004288 <HAL_DMA_Init+0x1e4>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d013      	beq.n	800415c <HAL_DMA_Init+0xb8>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a54      	ldr	r2, [pc, #336]	; (800428c <HAL_DMA_Init+0x1e8>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d00e      	beq.n	800415c <HAL_DMA_Init+0xb8>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a53      	ldr	r2, [pc, #332]	; (8004290 <HAL_DMA_Init+0x1ec>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d009      	beq.n	800415c <HAL_DMA_Init+0xb8>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a51      	ldr	r2, [pc, #324]	; (8004294 <HAL_DMA_Init+0x1f0>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d004      	beq.n	800415c <HAL_DMA_Init+0xb8>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a50      	ldr	r2, [pc, #320]	; (8004298 <HAL_DMA_Init+0x1f4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d101      	bne.n	8004160 <HAL_DMA_Init+0xbc>
 800415c:	2301      	movs	r3, #1
 800415e:	e000      	b.n	8004162 <HAL_DMA_Init+0xbe>
 8004160:	2300      	movs	r3, #0
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 813b 	beq.w	80043de <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2202      	movs	r2, #2
 8004174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a37      	ldr	r2, [pc, #220]	; (800425c <HAL_DMA_Init+0x1b8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d04a      	beq.n	8004218 <HAL_DMA_Init+0x174>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a36      	ldr	r2, [pc, #216]	; (8004260 <HAL_DMA_Init+0x1bc>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d045      	beq.n	8004218 <HAL_DMA_Init+0x174>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a34      	ldr	r2, [pc, #208]	; (8004264 <HAL_DMA_Init+0x1c0>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d040      	beq.n	8004218 <HAL_DMA_Init+0x174>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a33      	ldr	r2, [pc, #204]	; (8004268 <HAL_DMA_Init+0x1c4>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d03b      	beq.n	8004218 <HAL_DMA_Init+0x174>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a31      	ldr	r2, [pc, #196]	; (800426c <HAL_DMA_Init+0x1c8>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d036      	beq.n	8004218 <HAL_DMA_Init+0x174>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a30      	ldr	r2, [pc, #192]	; (8004270 <HAL_DMA_Init+0x1cc>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d031      	beq.n	8004218 <HAL_DMA_Init+0x174>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a2e      	ldr	r2, [pc, #184]	; (8004274 <HAL_DMA_Init+0x1d0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d02c      	beq.n	8004218 <HAL_DMA_Init+0x174>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a2d      	ldr	r2, [pc, #180]	; (8004278 <HAL_DMA_Init+0x1d4>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d027      	beq.n	8004218 <HAL_DMA_Init+0x174>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a2b      	ldr	r2, [pc, #172]	; (800427c <HAL_DMA_Init+0x1d8>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d022      	beq.n	8004218 <HAL_DMA_Init+0x174>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a2a      	ldr	r2, [pc, #168]	; (8004280 <HAL_DMA_Init+0x1dc>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d01d      	beq.n	8004218 <HAL_DMA_Init+0x174>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a28      	ldr	r2, [pc, #160]	; (8004284 <HAL_DMA_Init+0x1e0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d018      	beq.n	8004218 <HAL_DMA_Init+0x174>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a27      	ldr	r2, [pc, #156]	; (8004288 <HAL_DMA_Init+0x1e4>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d013      	beq.n	8004218 <HAL_DMA_Init+0x174>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a25      	ldr	r2, [pc, #148]	; (800428c <HAL_DMA_Init+0x1e8>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00e      	beq.n	8004218 <HAL_DMA_Init+0x174>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a24      	ldr	r2, [pc, #144]	; (8004290 <HAL_DMA_Init+0x1ec>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d009      	beq.n	8004218 <HAL_DMA_Init+0x174>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a22      	ldr	r2, [pc, #136]	; (8004294 <HAL_DMA_Init+0x1f0>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d004      	beq.n	8004218 <HAL_DMA_Init+0x174>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a21      	ldr	r2, [pc, #132]	; (8004298 <HAL_DMA_Init+0x1f4>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d108      	bne.n	800422a <HAL_DMA_Init+0x186>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0201 	bic.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	e007      	b.n	800423a <HAL_DMA_Init+0x196>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0201 	bic.w	r2, r2, #1
 8004238:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800423a:	e02f      	b.n	800429c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800423c:	f7fd ffa0 	bl	8002180 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b05      	cmp	r3, #5
 8004248:	d928      	bls.n	800429c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2203      	movs	r2, #3
 8004254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e246      	b.n	80046ea <HAL_DMA_Init+0x646>
 800425c:	40020010 	.word	0x40020010
 8004260:	40020028 	.word	0x40020028
 8004264:	40020040 	.word	0x40020040
 8004268:	40020058 	.word	0x40020058
 800426c:	40020070 	.word	0x40020070
 8004270:	40020088 	.word	0x40020088
 8004274:	400200a0 	.word	0x400200a0
 8004278:	400200b8 	.word	0x400200b8
 800427c:	40020410 	.word	0x40020410
 8004280:	40020428 	.word	0x40020428
 8004284:	40020440 	.word	0x40020440
 8004288:	40020458 	.word	0x40020458
 800428c:	40020470 	.word	0x40020470
 8004290:	40020488 	.word	0x40020488
 8004294:	400204a0 	.word	0x400204a0
 8004298:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1c8      	bne.n	800423c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	4b83      	ldr	r3, [pc, #524]	; (80044c4 <HAL_DMA_Init+0x420>)
 80042b6:	4013      	ands	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80042c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042da:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	d107      	bne.n	8004300 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	4313      	orrs	r3, r2
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004300:	4b71      	ldr	r3, [pc, #452]	; (80044c8 <HAL_DMA_Init+0x424>)
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	4b71      	ldr	r3, [pc, #452]	; (80044cc <HAL_DMA_Init+0x428>)
 8004306:	4013      	ands	r3, r2
 8004308:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800430c:	d328      	bcc.n	8004360 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b28      	cmp	r3, #40	; 0x28
 8004314:	d903      	bls.n	800431e <HAL_DMA_Init+0x27a>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	2b2e      	cmp	r3, #46	; 0x2e
 800431c:	d917      	bls.n	800434e <HAL_DMA_Init+0x2aa>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	2b3e      	cmp	r3, #62	; 0x3e
 8004324:	d903      	bls.n	800432e <HAL_DMA_Init+0x28a>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2b42      	cmp	r3, #66	; 0x42
 800432c:	d90f      	bls.n	800434e <HAL_DMA_Init+0x2aa>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b46      	cmp	r3, #70	; 0x46
 8004334:	d903      	bls.n	800433e <HAL_DMA_Init+0x29a>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b48      	cmp	r3, #72	; 0x48
 800433c:	d907      	bls.n	800434e <HAL_DMA_Init+0x2aa>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2b4e      	cmp	r3, #78	; 0x4e
 8004344:	d905      	bls.n	8004352 <HAL_DMA_Init+0x2ae>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b52      	cmp	r3, #82	; 0x52
 800434c:	d801      	bhi.n	8004352 <HAL_DMA_Init+0x2ae>
 800434e:	2301      	movs	r3, #1
 8004350:	e000      	b.n	8004354 <HAL_DMA_Init+0x2b0>
 8004352:	2300      	movs	r3, #0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800435e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f023 0307 	bic.w	r3, r3, #7
 8004376:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	2b04      	cmp	r3, #4
 8004388:	d117      	bne.n	80043ba <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	4313      	orrs	r3, r2
 8004392:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00e      	beq.n	80043ba <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f002 f813 	bl	80063c8 <DMA_CheckFifoParam>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d008      	beq.n	80043ba <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2240      	movs	r2, #64	; 0x40
 80043ac:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e197      	b.n	80046ea <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f001 ff4e 	bl	8006264 <DMA_CalcBaseAndBitshift>
 80043c8:	4603      	mov	r3, r0
 80043ca:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d0:	f003 031f 	and.w	r3, r3, #31
 80043d4:	223f      	movs	r2, #63	; 0x3f
 80043d6:	409a      	lsls	r2, r3
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	609a      	str	r2, [r3, #8]
 80043dc:	e0cd      	b.n	800457a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a3b      	ldr	r2, [pc, #236]	; (80044d0 <HAL_DMA_Init+0x42c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d022      	beq.n	800442e <HAL_DMA_Init+0x38a>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a39      	ldr	r2, [pc, #228]	; (80044d4 <HAL_DMA_Init+0x430>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d01d      	beq.n	800442e <HAL_DMA_Init+0x38a>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a38      	ldr	r2, [pc, #224]	; (80044d8 <HAL_DMA_Init+0x434>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d018      	beq.n	800442e <HAL_DMA_Init+0x38a>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a36      	ldr	r2, [pc, #216]	; (80044dc <HAL_DMA_Init+0x438>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d013      	beq.n	800442e <HAL_DMA_Init+0x38a>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a35      	ldr	r2, [pc, #212]	; (80044e0 <HAL_DMA_Init+0x43c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d00e      	beq.n	800442e <HAL_DMA_Init+0x38a>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a33      	ldr	r2, [pc, #204]	; (80044e4 <HAL_DMA_Init+0x440>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d009      	beq.n	800442e <HAL_DMA_Init+0x38a>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a32      	ldr	r2, [pc, #200]	; (80044e8 <HAL_DMA_Init+0x444>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d004      	beq.n	800442e <HAL_DMA_Init+0x38a>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a30      	ldr	r2, [pc, #192]	; (80044ec <HAL_DMA_Init+0x448>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d101      	bne.n	8004432 <HAL_DMA_Init+0x38e>
 800442e:	2301      	movs	r3, #1
 8004430:	e000      	b.n	8004434 <HAL_DMA_Init+0x390>
 8004432:	2300      	movs	r3, #0
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 8097 	beq.w	8004568 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a24      	ldr	r2, [pc, #144]	; (80044d0 <HAL_DMA_Init+0x42c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d021      	beq.n	8004488 <HAL_DMA_Init+0x3e4>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a22      	ldr	r2, [pc, #136]	; (80044d4 <HAL_DMA_Init+0x430>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d01c      	beq.n	8004488 <HAL_DMA_Init+0x3e4>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a21      	ldr	r2, [pc, #132]	; (80044d8 <HAL_DMA_Init+0x434>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d017      	beq.n	8004488 <HAL_DMA_Init+0x3e4>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a1f      	ldr	r2, [pc, #124]	; (80044dc <HAL_DMA_Init+0x438>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d012      	beq.n	8004488 <HAL_DMA_Init+0x3e4>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a1e      	ldr	r2, [pc, #120]	; (80044e0 <HAL_DMA_Init+0x43c>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d00d      	beq.n	8004488 <HAL_DMA_Init+0x3e4>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a1c      	ldr	r2, [pc, #112]	; (80044e4 <HAL_DMA_Init+0x440>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d008      	beq.n	8004488 <HAL_DMA_Init+0x3e4>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a1b      	ldr	r2, [pc, #108]	; (80044e8 <HAL_DMA_Init+0x444>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d003      	beq.n	8004488 <HAL_DMA_Init+0x3e4>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a19      	ldr	r2, [pc, #100]	; (80044ec <HAL_DMA_Init+0x448>)
 8004486:	4293      	cmp	r3, r2
 8004488:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2202      	movs	r2, #2
 8004496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	4b12      	ldr	r3, [pc, #72]	; (80044f0 <HAL_DMA_Init+0x44c>)
 80044a6:	4013      	ands	r3, r2
 80044a8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	2b40      	cmp	r3, #64	; 0x40
 80044b0:	d020      	beq.n	80044f4 <HAL_DMA_Init+0x450>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	2b80      	cmp	r3, #128	; 0x80
 80044b8:	d102      	bne.n	80044c0 <HAL_DMA_Init+0x41c>
 80044ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044be:	e01a      	b.n	80044f6 <HAL_DMA_Init+0x452>
 80044c0:	2300      	movs	r3, #0
 80044c2:	e018      	b.n	80044f6 <HAL_DMA_Init+0x452>
 80044c4:	fe10803f 	.word	0xfe10803f
 80044c8:	5c001000 	.word	0x5c001000
 80044cc:	ffff0000 	.word	0xffff0000
 80044d0:	58025408 	.word	0x58025408
 80044d4:	5802541c 	.word	0x5802541c
 80044d8:	58025430 	.word	0x58025430
 80044dc:	58025444 	.word	0x58025444
 80044e0:	58025458 	.word	0x58025458
 80044e4:	5802546c 	.word	0x5802546c
 80044e8:	58025480 	.word	0x58025480
 80044ec:	58025494 	.word	0x58025494
 80044f0:	fffe000f 	.word	0xfffe000f
 80044f4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	68d2      	ldr	r2, [r2, #12]
 80044fa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80044fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004504:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800450c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004514:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800451c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004524:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	4313      	orrs	r3, r2
 800452a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	461a      	mov	r2, r3
 800453a:	4b6e      	ldr	r3, [pc, #440]	; (80046f4 <HAL_DMA_Init+0x650>)
 800453c:	4413      	add	r3, r2
 800453e:	4a6e      	ldr	r2, [pc, #440]	; (80046f8 <HAL_DMA_Init+0x654>)
 8004540:	fba2 2303 	umull	r2, r3, r2, r3
 8004544:	091b      	lsrs	r3, r3, #4
 8004546:	009a      	lsls	r2, r3, #2
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f001 fe89 	bl	8006264 <DMA_CalcBaseAndBitshift>
 8004552:	4603      	mov	r3, r0
 8004554:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800455a:	f003 031f 	and.w	r3, r3, #31
 800455e:	2201      	movs	r2, #1
 8004560:	409a      	lsls	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	605a      	str	r2, [r3, #4]
 8004566:	e008      	b.n	800457a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2240      	movs	r2, #64	; 0x40
 800456c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2203      	movs	r2, #3
 8004572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e0b7      	b.n	80046ea <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a5f      	ldr	r2, [pc, #380]	; (80046fc <HAL_DMA_Init+0x658>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d072      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a5d      	ldr	r2, [pc, #372]	; (8004700 <HAL_DMA_Init+0x65c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d06d      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a5c      	ldr	r2, [pc, #368]	; (8004704 <HAL_DMA_Init+0x660>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d068      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a5a      	ldr	r2, [pc, #360]	; (8004708 <HAL_DMA_Init+0x664>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d063      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a59      	ldr	r2, [pc, #356]	; (800470c <HAL_DMA_Init+0x668>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d05e      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a57      	ldr	r2, [pc, #348]	; (8004710 <HAL_DMA_Init+0x66c>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d059      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a56      	ldr	r2, [pc, #344]	; (8004714 <HAL_DMA_Init+0x670>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d054      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a54      	ldr	r2, [pc, #336]	; (8004718 <HAL_DMA_Init+0x674>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d04f      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a53      	ldr	r2, [pc, #332]	; (800471c <HAL_DMA_Init+0x678>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d04a      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a51      	ldr	r2, [pc, #324]	; (8004720 <HAL_DMA_Init+0x67c>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d045      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a50      	ldr	r2, [pc, #320]	; (8004724 <HAL_DMA_Init+0x680>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d040      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a4e      	ldr	r2, [pc, #312]	; (8004728 <HAL_DMA_Init+0x684>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d03b      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a4d      	ldr	r2, [pc, #308]	; (800472c <HAL_DMA_Init+0x688>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d036      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a4b      	ldr	r2, [pc, #300]	; (8004730 <HAL_DMA_Init+0x68c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d031      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a4a      	ldr	r2, [pc, #296]	; (8004734 <HAL_DMA_Init+0x690>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d02c      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a48      	ldr	r2, [pc, #288]	; (8004738 <HAL_DMA_Init+0x694>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d027      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a47      	ldr	r2, [pc, #284]	; (800473c <HAL_DMA_Init+0x698>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d022      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a45      	ldr	r2, [pc, #276]	; (8004740 <HAL_DMA_Init+0x69c>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d01d      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a44      	ldr	r2, [pc, #272]	; (8004744 <HAL_DMA_Init+0x6a0>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d018      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a42      	ldr	r2, [pc, #264]	; (8004748 <HAL_DMA_Init+0x6a4>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d013      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a41      	ldr	r2, [pc, #260]	; (800474c <HAL_DMA_Init+0x6a8>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d00e      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a3f      	ldr	r2, [pc, #252]	; (8004750 <HAL_DMA_Init+0x6ac>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d009      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a3e      	ldr	r2, [pc, #248]	; (8004754 <HAL_DMA_Init+0x6b0>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d004      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a3c      	ldr	r2, [pc, #240]	; (8004758 <HAL_DMA_Init+0x6b4>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d101      	bne.n	800466e <HAL_DMA_Init+0x5ca>
 800466a:	2301      	movs	r3, #1
 800466c:	e000      	b.n	8004670 <HAL_DMA_Init+0x5cc>
 800466e:	2300      	movs	r3, #0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d032      	beq.n	80046da <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f001 ff23 	bl	80064c0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	2b80      	cmp	r3, #128	; 0x80
 8004680:	d102      	bne.n	8004688 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800469c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d010      	beq.n	80046c8 <HAL_DMA_Init+0x624>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2b08      	cmp	r3, #8
 80046ac:	d80c      	bhi.n	80046c8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f001 ffa0 	bl	80065f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80046c4:	605a      	str	r2, [r3, #4]
 80046c6:	e008      	b.n	80046da <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	a7fdabf8 	.word	0xa7fdabf8
 80046f8:	cccccccd 	.word	0xcccccccd
 80046fc:	40020010 	.word	0x40020010
 8004700:	40020028 	.word	0x40020028
 8004704:	40020040 	.word	0x40020040
 8004708:	40020058 	.word	0x40020058
 800470c:	40020070 	.word	0x40020070
 8004710:	40020088 	.word	0x40020088
 8004714:	400200a0 	.word	0x400200a0
 8004718:	400200b8 	.word	0x400200b8
 800471c:	40020410 	.word	0x40020410
 8004720:	40020428 	.word	0x40020428
 8004724:	40020440 	.word	0x40020440
 8004728:	40020458 	.word	0x40020458
 800472c:	40020470 	.word	0x40020470
 8004730:	40020488 	.word	0x40020488
 8004734:	400204a0 	.word	0x400204a0
 8004738:	400204b8 	.word	0x400204b8
 800473c:	58025408 	.word	0x58025408
 8004740:	5802541c 	.word	0x5802541c
 8004744:	58025430 	.word	0x58025430
 8004748:	58025444 	.word	0x58025444
 800474c:	58025458 	.word	0x58025458
 8004750:	5802546c 	.word	0x5802546c
 8004754:	58025480 	.word	0x58025480
 8004758:	58025494 	.word	0x58025494

0800475c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
 8004768:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800476a:	2300      	movs	r3, #0
 800476c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e226      	b.n	8004bc6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800477e:	2b01      	cmp	r3, #1
 8004780:	d101      	bne.n	8004786 <HAL_DMA_Start_IT+0x2a>
 8004782:	2302      	movs	r3, #2
 8004784:	e21f      	b.n	8004bc6 <HAL_DMA_Start_IT+0x46a>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b01      	cmp	r3, #1
 8004798:	f040 820a 	bne.w	8004bb0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a68      	ldr	r2, [pc, #416]	; (8004950 <HAL_DMA_Start_IT+0x1f4>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d04a      	beq.n	800484a <HAL_DMA_Start_IT+0xee>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a66      	ldr	r2, [pc, #408]	; (8004954 <HAL_DMA_Start_IT+0x1f8>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d045      	beq.n	800484a <HAL_DMA_Start_IT+0xee>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a65      	ldr	r2, [pc, #404]	; (8004958 <HAL_DMA_Start_IT+0x1fc>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d040      	beq.n	800484a <HAL_DMA_Start_IT+0xee>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a63      	ldr	r2, [pc, #396]	; (800495c <HAL_DMA_Start_IT+0x200>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d03b      	beq.n	800484a <HAL_DMA_Start_IT+0xee>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a62      	ldr	r2, [pc, #392]	; (8004960 <HAL_DMA_Start_IT+0x204>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d036      	beq.n	800484a <HAL_DMA_Start_IT+0xee>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a60      	ldr	r2, [pc, #384]	; (8004964 <HAL_DMA_Start_IT+0x208>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d031      	beq.n	800484a <HAL_DMA_Start_IT+0xee>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a5f      	ldr	r2, [pc, #380]	; (8004968 <HAL_DMA_Start_IT+0x20c>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d02c      	beq.n	800484a <HAL_DMA_Start_IT+0xee>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a5d      	ldr	r2, [pc, #372]	; (800496c <HAL_DMA_Start_IT+0x210>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d027      	beq.n	800484a <HAL_DMA_Start_IT+0xee>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a5c      	ldr	r2, [pc, #368]	; (8004970 <HAL_DMA_Start_IT+0x214>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d022      	beq.n	800484a <HAL_DMA_Start_IT+0xee>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a5a      	ldr	r2, [pc, #360]	; (8004974 <HAL_DMA_Start_IT+0x218>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d01d      	beq.n	800484a <HAL_DMA_Start_IT+0xee>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a59      	ldr	r2, [pc, #356]	; (8004978 <HAL_DMA_Start_IT+0x21c>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d018      	beq.n	800484a <HAL_DMA_Start_IT+0xee>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a57      	ldr	r2, [pc, #348]	; (800497c <HAL_DMA_Start_IT+0x220>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d013      	beq.n	800484a <HAL_DMA_Start_IT+0xee>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a56      	ldr	r2, [pc, #344]	; (8004980 <HAL_DMA_Start_IT+0x224>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d00e      	beq.n	800484a <HAL_DMA_Start_IT+0xee>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a54      	ldr	r2, [pc, #336]	; (8004984 <HAL_DMA_Start_IT+0x228>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d009      	beq.n	800484a <HAL_DMA_Start_IT+0xee>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a53      	ldr	r2, [pc, #332]	; (8004988 <HAL_DMA_Start_IT+0x22c>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d004      	beq.n	800484a <HAL_DMA_Start_IT+0xee>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a51      	ldr	r2, [pc, #324]	; (800498c <HAL_DMA_Start_IT+0x230>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d108      	bne.n	800485c <HAL_DMA_Start_IT+0x100>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0201 	bic.w	r2, r2, #1
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	e007      	b.n	800486c <HAL_DMA_Start_IT+0x110>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0201 	bic.w	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	68b9      	ldr	r1, [r7, #8]
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f001 fb4a 	bl	8005f0c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a34      	ldr	r2, [pc, #208]	; (8004950 <HAL_DMA_Start_IT+0x1f4>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d04a      	beq.n	8004918 <HAL_DMA_Start_IT+0x1bc>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a33      	ldr	r2, [pc, #204]	; (8004954 <HAL_DMA_Start_IT+0x1f8>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d045      	beq.n	8004918 <HAL_DMA_Start_IT+0x1bc>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a31      	ldr	r2, [pc, #196]	; (8004958 <HAL_DMA_Start_IT+0x1fc>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d040      	beq.n	8004918 <HAL_DMA_Start_IT+0x1bc>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a30      	ldr	r2, [pc, #192]	; (800495c <HAL_DMA_Start_IT+0x200>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d03b      	beq.n	8004918 <HAL_DMA_Start_IT+0x1bc>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a2e      	ldr	r2, [pc, #184]	; (8004960 <HAL_DMA_Start_IT+0x204>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d036      	beq.n	8004918 <HAL_DMA_Start_IT+0x1bc>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a2d      	ldr	r2, [pc, #180]	; (8004964 <HAL_DMA_Start_IT+0x208>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d031      	beq.n	8004918 <HAL_DMA_Start_IT+0x1bc>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a2b      	ldr	r2, [pc, #172]	; (8004968 <HAL_DMA_Start_IT+0x20c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d02c      	beq.n	8004918 <HAL_DMA_Start_IT+0x1bc>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a2a      	ldr	r2, [pc, #168]	; (800496c <HAL_DMA_Start_IT+0x210>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d027      	beq.n	8004918 <HAL_DMA_Start_IT+0x1bc>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a28      	ldr	r2, [pc, #160]	; (8004970 <HAL_DMA_Start_IT+0x214>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d022      	beq.n	8004918 <HAL_DMA_Start_IT+0x1bc>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a27      	ldr	r2, [pc, #156]	; (8004974 <HAL_DMA_Start_IT+0x218>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d01d      	beq.n	8004918 <HAL_DMA_Start_IT+0x1bc>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a25      	ldr	r2, [pc, #148]	; (8004978 <HAL_DMA_Start_IT+0x21c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d018      	beq.n	8004918 <HAL_DMA_Start_IT+0x1bc>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a24      	ldr	r2, [pc, #144]	; (800497c <HAL_DMA_Start_IT+0x220>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d013      	beq.n	8004918 <HAL_DMA_Start_IT+0x1bc>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a22      	ldr	r2, [pc, #136]	; (8004980 <HAL_DMA_Start_IT+0x224>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d00e      	beq.n	8004918 <HAL_DMA_Start_IT+0x1bc>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a21      	ldr	r2, [pc, #132]	; (8004984 <HAL_DMA_Start_IT+0x228>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d009      	beq.n	8004918 <HAL_DMA_Start_IT+0x1bc>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a1f      	ldr	r2, [pc, #124]	; (8004988 <HAL_DMA_Start_IT+0x22c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d004      	beq.n	8004918 <HAL_DMA_Start_IT+0x1bc>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a1e      	ldr	r2, [pc, #120]	; (800498c <HAL_DMA_Start_IT+0x230>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d101      	bne.n	800491c <HAL_DMA_Start_IT+0x1c0>
 8004918:	2301      	movs	r3, #1
 800491a:	e000      	b.n	800491e <HAL_DMA_Start_IT+0x1c2>
 800491c:	2300      	movs	r3, #0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d036      	beq.n	8004990 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f023 021e 	bic.w	r2, r3, #30
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f042 0216 	orr.w	r2, r2, #22
 8004934:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	2b00      	cmp	r3, #0
 800493c:	d03e      	beq.n	80049bc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f042 0208 	orr.w	r2, r2, #8
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	e035      	b.n	80049bc <HAL_DMA_Start_IT+0x260>
 8004950:	40020010 	.word	0x40020010
 8004954:	40020028 	.word	0x40020028
 8004958:	40020040 	.word	0x40020040
 800495c:	40020058 	.word	0x40020058
 8004960:	40020070 	.word	0x40020070
 8004964:	40020088 	.word	0x40020088
 8004968:	400200a0 	.word	0x400200a0
 800496c:	400200b8 	.word	0x400200b8
 8004970:	40020410 	.word	0x40020410
 8004974:	40020428 	.word	0x40020428
 8004978:	40020440 	.word	0x40020440
 800497c:	40020458 	.word	0x40020458
 8004980:	40020470 	.word	0x40020470
 8004984:	40020488 	.word	0x40020488
 8004988:	400204a0 	.word	0x400204a0
 800498c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f023 020e 	bic.w	r2, r3, #14
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 020a 	orr.w	r2, r2, #10
 80049a2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d007      	beq.n	80049bc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f042 0204 	orr.w	r2, r2, #4
 80049ba:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a83      	ldr	r2, [pc, #524]	; (8004bd0 <HAL_DMA_Start_IT+0x474>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d072      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a82      	ldr	r2, [pc, #520]	; (8004bd4 <HAL_DMA_Start_IT+0x478>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d06d      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a80      	ldr	r2, [pc, #512]	; (8004bd8 <HAL_DMA_Start_IT+0x47c>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d068      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a7f      	ldr	r2, [pc, #508]	; (8004bdc <HAL_DMA_Start_IT+0x480>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d063      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a7d      	ldr	r2, [pc, #500]	; (8004be0 <HAL_DMA_Start_IT+0x484>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d05e      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a7c      	ldr	r2, [pc, #496]	; (8004be4 <HAL_DMA_Start_IT+0x488>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d059      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a7a      	ldr	r2, [pc, #488]	; (8004be8 <HAL_DMA_Start_IT+0x48c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d054      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a79      	ldr	r2, [pc, #484]	; (8004bec <HAL_DMA_Start_IT+0x490>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d04f      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a77      	ldr	r2, [pc, #476]	; (8004bf0 <HAL_DMA_Start_IT+0x494>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d04a      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a76      	ldr	r2, [pc, #472]	; (8004bf4 <HAL_DMA_Start_IT+0x498>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d045      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a74      	ldr	r2, [pc, #464]	; (8004bf8 <HAL_DMA_Start_IT+0x49c>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d040      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a73      	ldr	r2, [pc, #460]	; (8004bfc <HAL_DMA_Start_IT+0x4a0>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d03b      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a71      	ldr	r2, [pc, #452]	; (8004c00 <HAL_DMA_Start_IT+0x4a4>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d036      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a70      	ldr	r2, [pc, #448]	; (8004c04 <HAL_DMA_Start_IT+0x4a8>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d031      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a6e      	ldr	r2, [pc, #440]	; (8004c08 <HAL_DMA_Start_IT+0x4ac>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d02c      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a6d      	ldr	r2, [pc, #436]	; (8004c0c <HAL_DMA_Start_IT+0x4b0>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d027      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a6b      	ldr	r2, [pc, #428]	; (8004c10 <HAL_DMA_Start_IT+0x4b4>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d022      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a6a      	ldr	r2, [pc, #424]	; (8004c14 <HAL_DMA_Start_IT+0x4b8>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d01d      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a68      	ldr	r2, [pc, #416]	; (8004c18 <HAL_DMA_Start_IT+0x4bc>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d018      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a67      	ldr	r2, [pc, #412]	; (8004c1c <HAL_DMA_Start_IT+0x4c0>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d013      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a65      	ldr	r2, [pc, #404]	; (8004c20 <HAL_DMA_Start_IT+0x4c4>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d00e      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a64      	ldr	r2, [pc, #400]	; (8004c24 <HAL_DMA_Start_IT+0x4c8>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d009      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a62      	ldr	r2, [pc, #392]	; (8004c28 <HAL_DMA_Start_IT+0x4cc>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d004      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a61      	ldr	r2, [pc, #388]	; (8004c2c <HAL_DMA_Start_IT+0x4d0>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d101      	bne.n	8004ab0 <HAL_DMA_Start_IT+0x354>
 8004aac:	2301      	movs	r3, #1
 8004aae:	e000      	b.n	8004ab2 <HAL_DMA_Start_IT+0x356>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d01a      	beq.n	8004aec <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d007      	beq.n	8004ad4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ace:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ad2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d007      	beq.n	8004aec <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ae6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004aea:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a37      	ldr	r2, [pc, #220]	; (8004bd0 <HAL_DMA_Start_IT+0x474>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d04a      	beq.n	8004b8c <HAL_DMA_Start_IT+0x430>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a36      	ldr	r2, [pc, #216]	; (8004bd4 <HAL_DMA_Start_IT+0x478>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d045      	beq.n	8004b8c <HAL_DMA_Start_IT+0x430>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a34      	ldr	r2, [pc, #208]	; (8004bd8 <HAL_DMA_Start_IT+0x47c>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d040      	beq.n	8004b8c <HAL_DMA_Start_IT+0x430>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a33      	ldr	r2, [pc, #204]	; (8004bdc <HAL_DMA_Start_IT+0x480>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d03b      	beq.n	8004b8c <HAL_DMA_Start_IT+0x430>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a31      	ldr	r2, [pc, #196]	; (8004be0 <HAL_DMA_Start_IT+0x484>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d036      	beq.n	8004b8c <HAL_DMA_Start_IT+0x430>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a30      	ldr	r2, [pc, #192]	; (8004be4 <HAL_DMA_Start_IT+0x488>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d031      	beq.n	8004b8c <HAL_DMA_Start_IT+0x430>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a2e      	ldr	r2, [pc, #184]	; (8004be8 <HAL_DMA_Start_IT+0x48c>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d02c      	beq.n	8004b8c <HAL_DMA_Start_IT+0x430>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a2d      	ldr	r2, [pc, #180]	; (8004bec <HAL_DMA_Start_IT+0x490>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d027      	beq.n	8004b8c <HAL_DMA_Start_IT+0x430>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a2b      	ldr	r2, [pc, #172]	; (8004bf0 <HAL_DMA_Start_IT+0x494>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d022      	beq.n	8004b8c <HAL_DMA_Start_IT+0x430>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a2a      	ldr	r2, [pc, #168]	; (8004bf4 <HAL_DMA_Start_IT+0x498>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d01d      	beq.n	8004b8c <HAL_DMA_Start_IT+0x430>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a28      	ldr	r2, [pc, #160]	; (8004bf8 <HAL_DMA_Start_IT+0x49c>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d018      	beq.n	8004b8c <HAL_DMA_Start_IT+0x430>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a27      	ldr	r2, [pc, #156]	; (8004bfc <HAL_DMA_Start_IT+0x4a0>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d013      	beq.n	8004b8c <HAL_DMA_Start_IT+0x430>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a25      	ldr	r2, [pc, #148]	; (8004c00 <HAL_DMA_Start_IT+0x4a4>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d00e      	beq.n	8004b8c <HAL_DMA_Start_IT+0x430>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a24      	ldr	r2, [pc, #144]	; (8004c04 <HAL_DMA_Start_IT+0x4a8>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d009      	beq.n	8004b8c <HAL_DMA_Start_IT+0x430>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a22      	ldr	r2, [pc, #136]	; (8004c08 <HAL_DMA_Start_IT+0x4ac>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d004      	beq.n	8004b8c <HAL_DMA_Start_IT+0x430>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a21      	ldr	r2, [pc, #132]	; (8004c0c <HAL_DMA_Start_IT+0x4b0>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d108      	bne.n	8004b9e <HAL_DMA_Start_IT+0x442>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 0201 	orr.w	r2, r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	e012      	b.n	8004bc4 <HAL_DMA_Start_IT+0x468>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f042 0201 	orr.w	r2, r2, #1
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	e009      	b.n	8004bc4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bbe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3718      	adds	r7, #24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	40020010 	.word	0x40020010
 8004bd4:	40020028 	.word	0x40020028
 8004bd8:	40020040 	.word	0x40020040
 8004bdc:	40020058 	.word	0x40020058
 8004be0:	40020070 	.word	0x40020070
 8004be4:	40020088 	.word	0x40020088
 8004be8:	400200a0 	.word	0x400200a0
 8004bec:	400200b8 	.word	0x400200b8
 8004bf0:	40020410 	.word	0x40020410
 8004bf4:	40020428 	.word	0x40020428
 8004bf8:	40020440 	.word	0x40020440
 8004bfc:	40020458 	.word	0x40020458
 8004c00:	40020470 	.word	0x40020470
 8004c04:	40020488 	.word	0x40020488
 8004c08:	400204a0 	.word	0x400204a0
 8004c0c:	400204b8 	.word	0x400204b8
 8004c10:	58025408 	.word	0x58025408
 8004c14:	5802541c 	.word	0x5802541c
 8004c18:	58025430 	.word	0x58025430
 8004c1c:	58025444 	.word	0x58025444
 8004c20:	58025458 	.word	0x58025458
 8004c24:	5802546c 	.word	0x5802546c
 8004c28:	58025480 	.word	0x58025480
 8004c2c:	58025494 	.word	0x58025494

08004c30 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e205      	b.n	800504e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d004      	beq.n	8004c58 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2280      	movs	r2, #128	; 0x80
 8004c52:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e1fa      	b.n	800504e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a8c      	ldr	r2, [pc, #560]	; (8004e90 <HAL_DMA_Abort_IT+0x260>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d04a      	beq.n	8004cf8 <HAL_DMA_Abort_IT+0xc8>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a8b      	ldr	r2, [pc, #556]	; (8004e94 <HAL_DMA_Abort_IT+0x264>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d045      	beq.n	8004cf8 <HAL_DMA_Abort_IT+0xc8>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a89      	ldr	r2, [pc, #548]	; (8004e98 <HAL_DMA_Abort_IT+0x268>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d040      	beq.n	8004cf8 <HAL_DMA_Abort_IT+0xc8>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a88      	ldr	r2, [pc, #544]	; (8004e9c <HAL_DMA_Abort_IT+0x26c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d03b      	beq.n	8004cf8 <HAL_DMA_Abort_IT+0xc8>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a86      	ldr	r2, [pc, #536]	; (8004ea0 <HAL_DMA_Abort_IT+0x270>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d036      	beq.n	8004cf8 <HAL_DMA_Abort_IT+0xc8>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a85      	ldr	r2, [pc, #532]	; (8004ea4 <HAL_DMA_Abort_IT+0x274>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d031      	beq.n	8004cf8 <HAL_DMA_Abort_IT+0xc8>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a83      	ldr	r2, [pc, #524]	; (8004ea8 <HAL_DMA_Abort_IT+0x278>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d02c      	beq.n	8004cf8 <HAL_DMA_Abort_IT+0xc8>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a82      	ldr	r2, [pc, #520]	; (8004eac <HAL_DMA_Abort_IT+0x27c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d027      	beq.n	8004cf8 <HAL_DMA_Abort_IT+0xc8>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a80      	ldr	r2, [pc, #512]	; (8004eb0 <HAL_DMA_Abort_IT+0x280>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d022      	beq.n	8004cf8 <HAL_DMA_Abort_IT+0xc8>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a7f      	ldr	r2, [pc, #508]	; (8004eb4 <HAL_DMA_Abort_IT+0x284>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d01d      	beq.n	8004cf8 <HAL_DMA_Abort_IT+0xc8>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a7d      	ldr	r2, [pc, #500]	; (8004eb8 <HAL_DMA_Abort_IT+0x288>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d018      	beq.n	8004cf8 <HAL_DMA_Abort_IT+0xc8>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a7c      	ldr	r2, [pc, #496]	; (8004ebc <HAL_DMA_Abort_IT+0x28c>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d013      	beq.n	8004cf8 <HAL_DMA_Abort_IT+0xc8>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a7a      	ldr	r2, [pc, #488]	; (8004ec0 <HAL_DMA_Abort_IT+0x290>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d00e      	beq.n	8004cf8 <HAL_DMA_Abort_IT+0xc8>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a79      	ldr	r2, [pc, #484]	; (8004ec4 <HAL_DMA_Abort_IT+0x294>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d009      	beq.n	8004cf8 <HAL_DMA_Abort_IT+0xc8>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a77      	ldr	r2, [pc, #476]	; (8004ec8 <HAL_DMA_Abort_IT+0x298>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d004      	beq.n	8004cf8 <HAL_DMA_Abort_IT+0xc8>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a76      	ldr	r2, [pc, #472]	; (8004ecc <HAL_DMA_Abort_IT+0x29c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d101      	bne.n	8004cfc <HAL_DMA_Abort_IT+0xcc>
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e000      	b.n	8004cfe <HAL_DMA_Abort_IT+0xce>
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d065      	beq.n	8004dce <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2204      	movs	r2, #4
 8004d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a60      	ldr	r2, [pc, #384]	; (8004e90 <HAL_DMA_Abort_IT+0x260>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d04a      	beq.n	8004daa <HAL_DMA_Abort_IT+0x17a>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a5e      	ldr	r2, [pc, #376]	; (8004e94 <HAL_DMA_Abort_IT+0x264>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d045      	beq.n	8004daa <HAL_DMA_Abort_IT+0x17a>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a5d      	ldr	r2, [pc, #372]	; (8004e98 <HAL_DMA_Abort_IT+0x268>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d040      	beq.n	8004daa <HAL_DMA_Abort_IT+0x17a>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a5b      	ldr	r2, [pc, #364]	; (8004e9c <HAL_DMA_Abort_IT+0x26c>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d03b      	beq.n	8004daa <HAL_DMA_Abort_IT+0x17a>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a5a      	ldr	r2, [pc, #360]	; (8004ea0 <HAL_DMA_Abort_IT+0x270>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d036      	beq.n	8004daa <HAL_DMA_Abort_IT+0x17a>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a58      	ldr	r2, [pc, #352]	; (8004ea4 <HAL_DMA_Abort_IT+0x274>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d031      	beq.n	8004daa <HAL_DMA_Abort_IT+0x17a>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a57      	ldr	r2, [pc, #348]	; (8004ea8 <HAL_DMA_Abort_IT+0x278>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d02c      	beq.n	8004daa <HAL_DMA_Abort_IT+0x17a>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a55      	ldr	r2, [pc, #340]	; (8004eac <HAL_DMA_Abort_IT+0x27c>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d027      	beq.n	8004daa <HAL_DMA_Abort_IT+0x17a>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a54      	ldr	r2, [pc, #336]	; (8004eb0 <HAL_DMA_Abort_IT+0x280>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d022      	beq.n	8004daa <HAL_DMA_Abort_IT+0x17a>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a52      	ldr	r2, [pc, #328]	; (8004eb4 <HAL_DMA_Abort_IT+0x284>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d01d      	beq.n	8004daa <HAL_DMA_Abort_IT+0x17a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a51      	ldr	r2, [pc, #324]	; (8004eb8 <HAL_DMA_Abort_IT+0x288>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d018      	beq.n	8004daa <HAL_DMA_Abort_IT+0x17a>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a4f      	ldr	r2, [pc, #316]	; (8004ebc <HAL_DMA_Abort_IT+0x28c>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d013      	beq.n	8004daa <HAL_DMA_Abort_IT+0x17a>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a4e      	ldr	r2, [pc, #312]	; (8004ec0 <HAL_DMA_Abort_IT+0x290>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d00e      	beq.n	8004daa <HAL_DMA_Abort_IT+0x17a>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a4c      	ldr	r2, [pc, #304]	; (8004ec4 <HAL_DMA_Abort_IT+0x294>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d009      	beq.n	8004daa <HAL_DMA_Abort_IT+0x17a>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a4b      	ldr	r2, [pc, #300]	; (8004ec8 <HAL_DMA_Abort_IT+0x298>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d004      	beq.n	8004daa <HAL_DMA_Abort_IT+0x17a>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a49      	ldr	r2, [pc, #292]	; (8004ecc <HAL_DMA_Abort_IT+0x29c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d108      	bne.n	8004dbc <HAL_DMA_Abort_IT+0x18c>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 0201 	bic.w	r2, r2, #1
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	e147      	b.n	800504c <HAL_DMA_Abort_IT+0x41c>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 0201 	bic.w	r2, r2, #1
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	e13e      	b.n	800504c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 020e 	bic.w	r2, r2, #14
 8004ddc:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a2b      	ldr	r2, [pc, #172]	; (8004e90 <HAL_DMA_Abort_IT+0x260>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d04a      	beq.n	8004e7e <HAL_DMA_Abort_IT+0x24e>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a29      	ldr	r2, [pc, #164]	; (8004e94 <HAL_DMA_Abort_IT+0x264>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d045      	beq.n	8004e7e <HAL_DMA_Abort_IT+0x24e>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a28      	ldr	r2, [pc, #160]	; (8004e98 <HAL_DMA_Abort_IT+0x268>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d040      	beq.n	8004e7e <HAL_DMA_Abort_IT+0x24e>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a26      	ldr	r2, [pc, #152]	; (8004e9c <HAL_DMA_Abort_IT+0x26c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d03b      	beq.n	8004e7e <HAL_DMA_Abort_IT+0x24e>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a25      	ldr	r2, [pc, #148]	; (8004ea0 <HAL_DMA_Abort_IT+0x270>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d036      	beq.n	8004e7e <HAL_DMA_Abort_IT+0x24e>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a23      	ldr	r2, [pc, #140]	; (8004ea4 <HAL_DMA_Abort_IT+0x274>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d031      	beq.n	8004e7e <HAL_DMA_Abort_IT+0x24e>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a22      	ldr	r2, [pc, #136]	; (8004ea8 <HAL_DMA_Abort_IT+0x278>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d02c      	beq.n	8004e7e <HAL_DMA_Abort_IT+0x24e>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a20      	ldr	r2, [pc, #128]	; (8004eac <HAL_DMA_Abort_IT+0x27c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d027      	beq.n	8004e7e <HAL_DMA_Abort_IT+0x24e>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a1f      	ldr	r2, [pc, #124]	; (8004eb0 <HAL_DMA_Abort_IT+0x280>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d022      	beq.n	8004e7e <HAL_DMA_Abort_IT+0x24e>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a1d      	ldr	r2, [pc, #116]	; (8004eb4 <HAL_DMA_Abort_IT+0x284>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d01d      	beq.n	8004e7e <HAL_DMA_Abort_IT+0x24e>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a1c      	ldr	r2, [pc, #112]	; (8004eb8 <HAL_DMA_Abort_IT+0x288>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d018      	beq.n	8004e7e <HAL_DMA_Abort_IT+0x24e>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a1a      	ldr	r2, [pc, #104]	; (8004ebc <HAL_DMA_Abort_IT+0x28c>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d013      	beq.n	8004e7e <HAL_DMA_Abort_IT+0x24e>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a19      	ldr	r2, [pc, #100]	; (8004ec0 <HAL_DMA_Abort_IT+0x290>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d00e      	beq.n	8004e7e <HAL_DMA_Abort_IT+0x24e>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a17      	ldr	r2, [pc, #92]	; (8004ec4 <HAL_DMA_Abort_IT+0x294>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d009      	beq.n	8004e7e <HAL_DMA_Abort_IT+0x24e>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a16      	ldr	r2, [pc, #88]	; (8004ec8 <HAL_DMA_Abort_IT+0x298>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d004      	beq.n	8004e7e <HAL_DMA_Abort_IT+0x24e>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a14      	ldr	r2, [pc, #80]	; (8004ecc <HAL_DMA_Abort_IT+0x29c>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d128      	bne.n	8004ed0 <HAL_DMA_Abort_IT+0x2a0>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f022 0201 	bic.w	r2, r2, #1
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	e027      	b.n	8004ee0 <HAL_DMA_Abort_IT+0x2b0>
 8004e90:	40020010 	.word	0x40020010
 8004e94:	40020028 	.word	0x40020028
 8004e98:	40020040 	.word	0x40020040
 8004e9c:	40020058 	.word	0x40020058
 8004ea0:	40020070 	.word	0x40020070
 8004ea4:	40020088 	.word	0x40020088
 8004ea8:	400200a0 	.word	0x400200a0
 8004eac:	400200b8 	.word	0x400200b8
 8004eb0:	40020410 	.word	0x40020410
 8004eb4:	40020428 	.word	0x40020428
 8004eb8:	40020440 	.word	0x40020440
 8004ebc:	40020458 	.word	0x40020458
 8004ec0:	40020470 	.word	0x40020470
 8004ec4:	40020488 	.word	0x40020488
 8004ec8:	400204a0 	.word	0x400204a0
 8004ecc:	400204b8 	.word	0x400204b8
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f022 0201 	bic.w	r2, r2, #1
 8004ede:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a5c      	ldr	r2, [pc, #368]	; (8005058 <HAL_DMA_Abort_IT+0x428>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d072      	beq.n	8004fd0 <HAL_DMA_Abort_IT+0x3a0>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a5b      	ldr	r2, [pc, #364]	; (800505c <HAL_DMA_Abort_IT+0x42c>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d06d      	beq.n	8004fd0 <HAL_DMA_Abort_IT+0x3a0>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a59      	ldr	r2, [pc, #356]	; (8005060 <HAL_DMA_Abort_IT+0x430>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d068      	beq.n	8004fd0 <HAL_DMA_Abort_IT+0x3a0>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a58      	ldr	r2, [pc, #352]	; (8005064 <HAL_DMA_Abort_IT+0x434>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d063      	beq.n	8004fd0 <HAL_DMA_Abort_IT+0x3a0>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a56      	ldr	r2, [pc, #344]	; (8005068 <HAL_DMA_Abort_IT+0x438>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d05e      	beq.n	8004fd0 <HAL_DMA_Abort_IT+0x3a0>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a55      	ldr	r2, [pc, #340]	; (800506c <HAL_DMA_Abort_IT+0x43c>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d059      	beq.n	8004fd0 <HAL_DMA_Abort_IT+0x3a0>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a53      	ldr	r2, [pc, #332]	; (8005070 <HAL_DMA_Abort_IT+0x440>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d054      	beq.n	8004fd0 <HAL_DMA_Abort_IT+0x3a0>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a52      	ldr	r2, [pc, #328]	; (8005074 <HAL_DMA_Abort_IT+0x444>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d04f      	beq.n	8004fd0 <HAL_DMA_Abort_IT+0x3a0>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a50      	ldr	r2, [pc, #320]	; (8005078 <HAL_DMA_Abort_IT+0x448>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d04a      	beq.n	8004fd0 <HAL_DMA_Abort_IT+0x3a0>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a4f      	ldr	r2, [pc, #316]	; (800507c <HAL_DMA_Abort_IT+0x44c>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d045      	beq.n	8004fd0 <HAL_DMA_Abort_IT+0x3a0>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a4d      	ldr	r2, [pc, #308]	; (8005080 <HAL_DMA_Abort_IT+0x450>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d040      	beq.n	8004fd0 <HAL_DMA_Abort_IT+0x3a0>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a4c      	ldr	r2, [pc, #304]	; (8005084 <HAL_DMA_Abort_IT+0x454>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d03b      	beq.n	8004fd0 <HAL_DMA_Abort_IT+0x3a0>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a4a      	ldr	r2, [pc, #296]	; (8005088 <HAL_DMA_Abort_IT+0x458>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d036      	beq.n	8004fd0 <HAL_DMA_Abort_IT+0x3a0>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a49      	ldr	r2, [pc, #292]	; (800508c <HAL_DMA_Abort_IT+0x45c>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d031      	beq.n	8004fd0 <HAL_DMA_Abort_IT+0x3a0>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a47      	ldr	r2, [pc, #284]	; (8005090 <HAL_DMA_Abort_IT+0x460>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d02c      	beq.n	8004fd0 <HAL_DMA_Abort_IT+0x3a0>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a46      	ldr	r2, [pc, #280]	; (8005094 <HAL_DMA_Abort_IT+0x464>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d027      	beq.n	8004fd0 <HAL_DMA_Abort_IT+0x3a0>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a44      	ldr	r2, [pc, #272]	; (8005098 <HAL_DMA_Abort_IT+0x468>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d022      	beq.n	8004fd0 <HAL_DMA_Abort_IT+0x3a0>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a43      	ldr	r2, [pc, #268]	; (800509c <HAL_DMA_Abort_IT+0x46c>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d01d      	beq.n	8004fd0 <HAL_DMA_Abort_IT+0x3a0>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a41      	ldr	r2, [pc, #260]	; (80050a0 <HAL_DMA_Abort_IT+0x470>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d018      	beq.n	8004fd0 <HAL_DMA_Abort_IT+0x3a0>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a40      	ldr	r2, [pc, #256]	; (80050a4 <HAL_DMA_Abort_IT+0x474>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d013      	beq.n	8004fd0 <HAL_DMA_Abort_IT+0x3a0>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a3e      	ldr	r2, [pc, #248]	; (80050a8 <HAL_DMA_Abort_IT+0x478>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d00e      	beq.n	8004fd0 <HAL_DMA_Abort_IT+0x3a0>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a3d      	ldr	r2, [pc, #244]	; (80050ac <HAL_DMA_Abort_IT+0x47c>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d009      	beq.n	8004fd0 <HAL_DMA_Abort_IT+0x3a0>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a3b      	ldr	r2, [pc, #236]	; (80050b0 <HAL_DMA_Abort_IT+0x480>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d004      	beq.n	8004fd0 <HAL_DMA_Abort_IT+0x3a0>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a3a      	ldr	r2, [pc, #232]	; (80050b4 <HAL_DMA_Abort_IT+0x484>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d101      	bne.n	8004fd4 <HAL_DMA_Abort_IT+0x3a4>
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e000      	b.n	8004fd6 <HAL_DMA_Abort_IT+0x3a6>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d028      	beq.n	800502c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fe8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fee:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ff4:	f003 031f 	and.w	r3, r3, #31
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	409a      	lsls	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005008:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00c      	beq.n	800502c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800501c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005020:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800502a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005040:	2b00      	cmp	r3, #0
 8005042:	d003      	beq.n	800504c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	40020010 	.word	0x40020010
 800505c:	40020028 	.word	0x40020028
 8005060:	40020040 	.word	0x40020040
 8005064:	40020058 	.word	0x40020058
 8005068:	40020070 	.word	0x40020070
 800506c:	40020088 	.word	0x40020088
 8005070:	400200a0 	.word	0x400200a0
 8005074:	400200b8 	.word	0x400200b8
 8005078:	40020410 	.word	0x40020410
 800507c:	40020428 	.word	0x40020428
 8005080:	40020440 	.word	0x40020440
 8005084:	40020458 	.word	0x40020458
 8005088:	40020470 	.word	0x40020470
 800508c:	40020488 	.word	0x40020488
 8005090:	400204a0 	.word	0x400204a0
 8005094:	400204b8 	.word	0x400204b8
 8005098:	58025408 	.word	0x58025408
 800509c:	5802541c 	.word	0x5802541c
 80050a0:	58025430 	.word	0x58025430
 80050a4:	58025444 	.word	0x58025444
 80050a8:	58025458 	.word	0x58025458
 80050ac:	5802546c 	.word	0x5802546c
 80050b0:	58025480 	.word	0x58025480
 80050b4:	58025494 	.word	0x58025494

080050b8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b08a      	sub	sp, #40	; 0x28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80050c0:	2300      	movs	r3, #0
 80050c2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80050c4:	4b67      	ldr	r3, [pc, #412]	; (8005264 <HAL_DMA_IRQHandler+0x1ac>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a67      	ldr	r2, [pc, #412]	; (8005268 <HAL_DMA_IRQHandler+0x1b0>)
 80050ca:	fba2 2303 	umull	r2, r3, r2, r3
 80050ce:	0a9b      	lsrs	r3, r3, #10
 80050d0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050dc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80050de:	6a3b      	ldr	r3, [r7, #32]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a5f      	ldr	r2, [pc, #380]	; (800526c <HAL_DMA_IRQHandler+0x1b4>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d04a      	beq.n	800518a <HAL_DMA_IRQHandler+0xd2>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a5d      	ldr	r2, [pc, #372]	; (8005270 <HAL_DMA_IRQHandler+0x1b8>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d045      	beq.n	800518a <HAL_DMA_IRQHandler+0xd2>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a5c      	ldr	r2, [pc, #368]	; (8005274 <HAL_DMA_IRQHandler+0x1bc>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d040      	beq.n	800518a <HAL_DMA_IRQHandler+0xd2>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a5a      	ldr	r2, [pc, #360]	; (8005278 <HAL_DMA_IRQHandler+0x1c0>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d03b      	beq.n	800518a <HAL_DMA_IRQHandler+0xd2>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a59      	ldr	r2, [pc, #356]	; (800527c <HAL_DMA_IRQHandler+0x1c4>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d036      	beq.n	800518a <HAL_DMA_IRQHandler+0xd2>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a57      	ldr	r2, [pc, #348]	; (8005280 <HAL_DMA_IRQHandler+0x1c8>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d031      	beq.n	800518a <HAL_DMA_IRQHandler+0xd2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a56      	ldr	r2, [pc, #344]	; (8005284 <HAL_DMA_IRQHandler+0x1cc>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d02c      	beq.n	800518a <HAL_DMA_IRQHandler+0xd2>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a54      	ldr	r2, [pc, #336]	; (8005288 <HAL_DMA_IRQHandler+0x1d0>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d027      	beq.n	800518a <HAL_DMA_IRQHandler+0xd2>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a53      	ldr	r2, [pc, #332]	; (800528c <HAL_DMA_IRQHandler+0x1d4>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d022      	beq.n	800518a <HAL_DMA_IRQHandler+0xd2>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a51      	ldr	r2, [pc, #324]	; (8005290 <HAL_DMA_IRQHandler+0x1d8>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d01d      	beq.n	800518a <HAL_DMA_IRQHandler+0xd2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a50      	ldr	r2, [pc, #320]	; (8005294 <HAL_DMA_IRQHandler+0x1dc>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d018      	beq.n	800518a <HAL_DMA_IRQHandler+0xd2>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a4e      	ldr	r2, [pc, #312]	; (8005298 <HAL_DMA_IRQHandler+0x1e0>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d013      	beq.n	800518a <HAL_DMA_IRQHandler+0xd2>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a4d      	ldr	r2, [pc, #308]	; (800529c <HAL_DMA_IRQHandler+0x1e4>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d00e      	beq.n	800518a <HAL_DMA_IRQHandler+0xd2>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a4b      	ldr	r2, [pc, #300]	; (80052a0 <HAL_DMA_IRQHandler+0x1e8>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d009      	beq.n	800518a <HAL_DMA_IRQHandler+0xd2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a4a      	ldr	r2, [pc, #296]	; (80052a4 <HAL_DMA_IRQHandler+0x1ec>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d004      	beq.n	800518a <HAL_DMA_IRQHandler+0xd2>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a48      	ldr	r2, [pc, #288]	; (80052a8 <HAL_DMA_IRQHandler+0x1f0>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d101      	bne.n	800518e <HAL_DMA_IRQHandler+0xd6>
 800518a:	2301      	movs	r3, #1
 800518c:	e000      	b.n	8005190 <HAL_DMA_IRQHandler+0xd8>
 800518e:	2300      	movs	r3, #0
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 842b 	beq.w	80059ec <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800519a:	f003 031f 	and.w	r3, r3, #31
 800519e:	2208      	movs	r2, #8
 80051a0:	409a      	lsls	r2, r3
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	4013      	ands	r3, r2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 80a2 	beq.w	80052f0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a2e      	ldr	r2, [pc, #184]	; (800526c <HAL_DMA_IRQHandler+0x1b4>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d04a      	beq.n	800524c <HAL_DMA_IRQHandler+0x194>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a2d      	ldr	r2, [pc, #180]	; (8005270 <HAL_DMA_IRQHandler+0x1b8>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d045      	beq.n	800524c <HAL_DMA_IRQHandler+0x194>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a2b      	ldr	r2, [pc, #172]	; (8005274 <HAL_DMA_IRQHandler+0x1bc>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d040      	beq.n	800524c <HAL_DMA_IRQHandler+0x194>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a2a      	ldr	r2, [pc, #168]	; (8005278 <HAL_DMA_IRQHandler+0x1c0>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d03b      	beq.n	800524c <HAL_DMA_IRQHandler+0x194>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a28      	ldr	r2, [pc, #160]	; (800527c <HAL_DMA_IRQHandler+0x1c4>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d036      	beq.n	800524c <HAL_DMA_IRQHandler+0x194>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a27      	ldr	r2, [pc, #156]	; (8005280 <HAL_DMA_IRQHandler+0x1c8>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d031      	beq.n	800524c <HAL_DMA_IRQHandler+0x194>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a25      	ldr	r2, [pc, #148]	; (8005284 <HAL_DMA_IRQHandler+0x1cc>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d02c      	beq.n	800524c <HAL_DMA_IRQHandler+0x194>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a24      	ldr	r2, [pc, #144]	; (8005288 <HAL_DMA_IRQHandler+0x1d0>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d027      	beq.n	800524c <HAL_DMA_IRQHandler+0x194>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a22      	ldr	r2, [pc, #136]	; (800528c <HAL_DMA_IRQHandler+0x1d4>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d022      	beq.n	800524c <HAL_DMA_IRQHandler+0x194>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a21      	ldr	r2, [pc, #132]	; (8005290 <HAL_DMA_IRQHandler+0x1d8>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d01d      	beq.n	800524c <HAL_DMA_IRQHandler+0x194>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a1f      	ldr	r2, [pc, #124]	; (8005294 <HAL_DMA_IRQHandler+0x1dc>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d018      	beq.n	800524c <HAL_DMA_IRQHandler+0x194>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a1e      	ldr	r2, [pc, #120]	; (8005298 <HAL_DMA_IRQHandler+0x1e0>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d013      	beq.n	800524c <HAL_DMA_IRQHandler+0x194>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a1c      	ldr	r2, [pc, #112]	; (800529c <HAL_DMA_IRQHandler+0x1e4>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d00e      	beq.n	800524c <HAL_DMA_IRQHandler+0x194>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a1b      	ldr	r2, [pc, #108]	; (80052a0 <HAL_DMA_IRQHandler+0x1e8>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d009      	beq.n	800524c <HAL_DMA_IRQHandler+0x194>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a19      	ldr	r2, [pc, #100]	; (80052a4 <HAL_DMA_IRQHandler+0x1ec>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d004      	beq.n	800524c <HAL_DMA_IRQHandler+0x194>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a18      	ldr	r2, [pc, #96]	; (80052a8 <HAL_DMA_IRQHandler+0x1f0>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d12f      	bne.n	80052ac <HAL_DMA_IRQHandler+0x1f4>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0304 	and.w	r3, r3, #4
 8005256:	2b00      	cmp	r3, #0
 8005258:	bf14      	ite	ne
 800525a:	2301      	movne	r3, #1
 800525c:	2300      	moveq	r3, #0
 800525e:	b2db      	uxtb	r3, r3
 8005260:	e02e      	b.n	80052c0 <HAL_DMA_IRQHandler+0x208>
 8005262:	bf00      	nop
 8005264:	24000008 	.word	0x24000008
 8005268:	1b4e81b5 	.word	0x1b4e81b5
 800526c:	40020010 	.word	0x40020010
 8005270:	40020028 	.word	0x40020028
 8005274:	40020040 	.word	0x40020040
 8005278:	40020058 	.word	0x40020058
 800527c:	40020070 	.word	0x40020070
 8005280:	40020088 	.word	0x40020088
 8005284:	400200a0 	.word	0x400200a0
 8005288:	400200b8 	.word	0x400200b8
 800528c:	40020410 	.word	0x40020410
 8005290:	40020428 	.word	0x40020428
 8005294:	40020440 	.word	0x40020440
 8005298:	40020458 	.word	0x40020458
 800529c:	40020470 	.word	0x40020470
 80052a0:	40020488 	.word	0x40020488
 80052a4:	400204a0 	.word	0x400204a0
 80052a8:	400204b8 	.word	0x400204b8
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0308 	and.w	r3, r3, #8
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	bf14      	ite	ne
 80052ba:	2301      	movne	r3, #1
 80052bc:	2300      	moveq	r3, #0
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d015      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f022 0204 	bic.w	r2, r2, #4
 80052d2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052d8:	f003 031f 	and.w	r3, r3, #31
 80052dc:	2208      	movs	r2, #8
 80052de:	409a      	lsls	r2, r3
 80052e0:	6a3b      	ldr	r3, [r7, #32]
 80052e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e8:	f043 0201 	orr.w	r2, r3, #1
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f4:	f003 031f 	and.w	r3, r3, #31
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	fa22 f303 	lsr.w	r3, r2, r3
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	d06e      	beq.n	80053e4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a69      	ldr	r2, [pc, #420]	; (80054b0 <HAL_DMA_IRQHandler+0x3f8>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d04a      	beq.n	80053a6 <HAL_DMA_IRQHandler+0x2ee>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a67      	ldr	r2, [pc, #412]	; (80054b4 <HAL_DMA_IRQHandler+0x3fc>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d045      	beq.n	80053a6 <HAL_DMA_IRQHandler+0x2ee>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a66      	ldr	r2, [pc, #408]	; (80054b8 <HAL_DMA_IRQHandler+0x400>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d040      	beq.n	80053a6 <HAL_DMA_IRQHandler+0x2ee>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a64      	ldr	r2, [pc, #400]	; (80054bc <HAL_DMA_IRQHandler+0x404>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d03b      	beq.n	80053a6 <HAL_DMA_IRQHandler+0x2ee>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a63      	ldr	r2, [pc, #396]	; (80054c0 <HAL_DMA_IRQHandler+0x408>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d036      	beq.n	80053a6 <HAL_DMA_IRQHandler+0x2ee>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a61      	ldr	r2, [pc, #388]	; (80054c4 <HAL_DMA_IRQHandler+0x40c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d031      	beq.n	80053a6 <HAL_DMA_IRQHandler+0x2ee>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a60      	ldr	r2, [pc, #384]	; (80054c8 <HAL_DMA_IRQHandler+0x410>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d02c      	beq.n	80053a6 <HAL_DMA_IRQHandler+0x2ee>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a5e      	ldr	r2, [pc, #376]	; (80054cc <HAL_DMA_IRQHandler+0x414>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d027      	beq.n	80053a6 <HAL_DMA_IRQHandler+0x2ee>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a5d      	ldr	r2, [pc, #372]	; (80054d0 <HAL_DMA_IRQHandler+0x418>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d022      	beq.n	80053a6 <HAL_DMA_IRQHandler+0x2ee>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a5b      	ldr	r2, [pc, #364]	; (80054d4 <HAL_DMA_IRQHandler+0x41c>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d01d      	beq.n	80053a6 <HAL_DMA_IRQHandler+0x2ee>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a5a      	ldr	r2, [pc, #360]	; (80054d8 <HAL_DMA_IRQHandler+0x420>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d018      	beq.n	80053a6 <HAL_DMA_IRQHandler+0x2ee>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a58      	ldr	r2, [pc, #352]	; (80054dc <HAL_DMA_IRQHandler+0x424>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d013      	beq.n	80053a6 <HAL_DMA_IRQHandler+0x2ee>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a57      	ldr	r2, [pc, #348]	; (80054e0 <HAL_DMA_IRQHandler+0x428>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d00e      	beq.n	80053a6 <HAL_DMA_IRQHandler+0x2ee>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a55      	ldr	r2, [pc, #340]	; (80054e4 <HAL_DMA_IRQHandler+0x42c>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d009      	beq.n	80053a6 <HAL_DMA_IRQHandler+0x2ee>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a54      	ldr	r2, [pc, #336]	; (80054e8 <HAL_DMA_IRQHandler+0x430>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d004      	beq.n	80053a6 <HAL_DMA_IRQHandler+0x2ee>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a52      	ldr	r2, [pc, #328]	; (80054ec <HAL_DMA_IRQHandler+0x434>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d10a      	bne.n	80053bc <HAL_DMA_IRQHandler+0x304>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	bf14      	ite	ne
 80053b4:	2301      	movne	r3, #1
 80053b6:	2300      	moveq	r3, #0
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	e003      	b.n	80053c4 <HAL_DMA_IRQHandler+0x30c>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2300      	movs	r3, #0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00d      	beq.n	80053e4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053cc:	f003 031f 	and.w	r3, r3, #31
 80053d0:	2201      	movs	r2, #1
 80053d2:	409a      	lsls	r2, r3
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053dc:	f043 0202 	orr.w	r2, r3, #2
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e8:	f003 031f 	and.w	r3, r3, #31
 80053ec:	2204      	movs	r2, #4
 80053ee:	409a      	lsls	r2, r3
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	4013      	ands	r3, r2
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 808f 	beq.w	8005518 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a2c      	ldr	r2, [pc, #176]	; (80054b0 <HAL_DMA_IRQHandler+0x3f8>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d04a      	beq.n	800549a <HAL_DMA_IRQHandler+0x3e2>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a2a      	ldr	r2, [pc, #168]	; (80054b4 <HAL_DMA_IRQHandler+0x3fc>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d045      	beq.n	800549a <HAL_DMA_IRQHandler+0x3e2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a29      	ldr	r2, [pc, #164]	; (80054b8 <HAL_DMA_IRQHandler+0x400>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d040      	beq.n	800549a <HAL_DMA_IRQHandler+0x3e2>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a27      	ldr	r2, [pc, #156]	; (80054bc <HAL_DMA_IRQHandler+0x404>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d03b      	beq.n	800549a <HAL_DMA_IRQHandler+0x3e2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a26      	ldr	r2, [pc, #152]	; (80054c0 <HAL_DMA_IRQHandler+0x408>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d036      	beq.n	800549a <HAL_DMA_IRQHandler+0x3e2>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a24      	ldr	r2, [pc, #144]	; (80054c4 <HAL_DMA_IRQHandler+0x40c>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d031      	beq.n	800549a <HAL_DMA_IRQHandler+0x3e2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a23      	ldr	r2, [pc, #140]	; (80054c8 <HAL_DMA_IRQHandler+0x410>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d02c      	beq.n	800549a <HAL_DMA_IRQHandler+0x3e2>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a21      	ldr	r2, [pc, #132]	; (80054cc <HAL_DMA_IRQHandler+0x414>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d027      	beq.n	800549a <HAL_DMA_IRQHandler+0x3e2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a20      	ldr	r2, [pc, #128]	; (80054d0 <HAL_DMA_IRQHandler+0x418>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d022      	beq.n	800549a <HAL_DMA_IRQHandler+0x3e2>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a1e      	ldr	r2, [pc, #120]	; (80054d4 <HAL_DMA_IRQHandler+0x41c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d01d      	beq.n	800549a <HAL_DMA_IRQHandler+0x3e2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a1d      	ldr	r2, [pc, #116]	; (80054d8 <HAL_DMA_IRQHandler+0x420>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d018      	beq.n	800549a <HAL_DMA_IRQHandler+0x3e2>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a1b      	ldr	r2, [pc, #108]	; (80054dc <HAL_DMA_IRQHandler+0x424>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d013      	beq.n	800549a <HAL_DMA_IRQHandler+0x3e2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a1a      	ldr	r2, [pc, #104]	; (80054e0 <HAL_DMA_IRQHandler+0x428>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d00e      	beq.n	800549a <HAL_DMA_IRQHandler+0x3e2>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a18      	ldr	r2, [pc, #96]	; (80054e4 <HAL_DMA_IRQHandler+0x42c>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d009      	beq.n	800549a <HAL_DMA_IRQHandler+0x3e2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a17      	ldr	r2, [pc, #92]	; (80054e8 <HAL_DMA_IRQHandler+0x430>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d004      	beq.n	800549a <HAL_DMA_IRQHandler+0x3e2>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a15      	ldr	r2, [pc, #84]	; (80054ec <HAL_DMA_IRQHandler+0x434>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d12a      	bne.n	80054f0 <HAL_DMA_IRQHandler+0x438>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0302 	and.w	r3, r3, #2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	bf14      	ite	ne
 80054a8:	2301      	movne	r3, #1
 80054aa:	2300      	moveq	r3, #0
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	e023      	b.n	80054f8 <HAL_DMA_IRQHandler+0x440>
 80054b0:	40020010 	.word	0x40020010
 80054b4:	40020028 	.word	0x40020028
 80054b8:	40020040 	.word	0x40020040
 80054bc:	40020058 	.word	0x40020058
 80054c0:	40020070 	.word	0x40020070
 80054c4:	40020088 	.word	0x40020088
 80054c8:	400200a0 	.word	0x400200a0
 80054cc:	400200b8 	.word	0x400200b8
 80054d0:	40020410 	.word	0x40020410
 80054d4:	40020428 	.word	0x40020428
 80054d8:	40020440 	.word	0x40020440
 80054dc:	40020458 	.word	0x40020458
 80054e0:	40020470 	.word	0x40020470
 80054e4:	40020488 	.word	0x40020488
 80054e8:	400204a0 	.word	0x400204a0
 80054ec:	400204b8 	.word	0x400204b8
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2300      	movs	r3, #0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00d      	beq.n	8005518 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005500:	f003 031f 	and.w	r3, r3, #31
 8005504:	2204      	movs	r2, #4
 8005506:	409a      	lsls	r2, r3
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005510:	f043 0204 	orr.w	r2, r3, #4
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800551c:	f003 031f 	and.w	r3, r3, #31
 8005520:	2210      	movs	r2, #16
 8005522:	409a      	lsls	r2, r3
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	4013      	ands	r3, r2
 8005528:	2b00      	cmp	r3, #0
 800552a:	f000 80a6 	beq.w	800567a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a85      	ldr	r2, [pc, #532]	; (8005748 <HAL_DMA_IRQHandler+0x690>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d04a      	beq.n	80055ce <HAL_DMA_IRQHandler+0x516>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a83      	ldr	r2, [pc, #524]	; (800574c <HAL_DMA_IRQHandler+0x694>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d045      	beq.n	80055ce <HAL_DMA_IRQHandler+0x516>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a82      	ldr	r2, [pc, #520]	; (8005750 <HAL_DMA_IRQHandler+0x698>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d040      	beq.n	80055ce <HAL_DMA_IRQHandler+0x516>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a80      	ldr	r2, [pc, #512]	; (8005754 <HAL_DMA_IRQHandler+0x69c>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d03b      	beq.n	80055ce <HAL_DMA_IRQHandler+0x516>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a7f      	ldr	r2, [pc, #508]	; (8005758 <HAL_DMA_IRQHandler+0x6a0>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d036      	beq.n	80055ce <HAL_DMA_IRQHandler+0x516>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a7d      	ldr	r2, [pc, #500]	; (800575c <HAL_DMA_IRQHandler+0x6a4>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d031      	beq.n	80055ce <HAL_DMA_IRQHandler+0x516>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a7c      	ldr	r2, [pc, #496]	; (8005760 <HAL_DMA_IRQHandler+0x6a8>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d02c      	beq.n	80055ce <HAL_DMA_IRQHandler+0x516>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a7a      	ldr	r2, [pc, #488]	; (8005764 <HAL_DMA_IRQHandler+0x6ac>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d027      	beq.n	80055ce <HAL_DMA_IRQHandler+0x516>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a79      	ldr	r2, [pc, #484]	; (8005768 <HAL_DMA_IRQHandler+0x6b0>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d022      	beq.n	80055ce <HAL_DMA_IRQHandler+0x516>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a77      	ldr	r2, [pc, #476]	; (800576c <HAL_DMA_IRQHandler+0x6b4>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d01d      	beq.n	80055ce <HAL_DMA_IRQHandler+0x516>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a76      	ldr	r2, [pc, #472]	; (8005770 <HAL_DMA_IRQHandler+0x6b8>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d018      	beq.n	80055ce <HAL_DMA_IRQHandler+0x516>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a74      	ldr	r2, [pc, #464]	; (8005774 <HAL_DMA_IRQHandler+0x6bc>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d013      	beq.n	80055ce <HAL_DMA_IRQHandler+0x516>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a73      	ldr	r2, [pc, #460]	; (8005778 <HAL_DMA_IRQHandler+0x6c0>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d00e      	beq.n	80055ce <HAL_DMA_IRQHandler+0x516>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a71      	ldr	r2, [pc, #452]	; (800577c <HAL_DMA_IRQHandler+0x6c4>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d009      	beq.n	80055ce <HAL_DMA_IRQHandler+0x516>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a70      	ldr	r2, [pc, #448]	; (8005780 <HAL_DMA_IRQHandler+0x6c8>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d004      	beq.n	80055ce <HAL_DMA_IRQHandler+0x516>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a6e      	ldr	r2, [pc, #440]	; (8005784 <HAL_DMA_IRQHandler+0x6cc>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d10a      	bne.n	80055e4 <HAL_DMA_IRQHandler+0x52c>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0308 	and.w	r3, r3, #8
 80055d8:	2b00      	cmp	r3, #0
 80055da:	bf14      	ite	ne
 80055dc:	2301      	movne	r3, #1
 80055de:	2300      	moveq	r3, #0
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	e009      	b.n	80055f8 <HAL_DMA_IRQHandler+0x540>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0304 	and.w	r3, r3, #4
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	bf14      	ite	ne
 80055f2:	2301      	movne	r3, #1
 80055f4:	2300      	moveq	r3, #0
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d03e      	beq.n	800567a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005600:	f003 031f 	and.w	r3, r3, #31
 8005604:	2210      	movs	r2, #16
 8005606:	409a      	lsls	r2, r3
 8005608:	6a3b      	ldr	r3, [r7, #32]
 800560a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d018      	beq.n	800564c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d108      	bne.n	800563a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562c:	2b00      	cmp	r3, #0
 800562e:	d024      	beq.n	800567a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	4798      	blx	r3
 8005638:	e01f      	b.n	800567a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800563e:	2b00      	cmp	r3, #0
 8005640:	d01b      	beq.n	800567a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	4798      	blx	r3
 800564a:	e016      	b.n	800567a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005656:	2b00      	cmp	r3, #0
 8005658:	d107      	bne.n	800566a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 0208 	bic.w	r2, r2, #8
 8005668:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800567e:	f003 031f 	and.w	r3, r3, #31
 8005682:	2220      	movs	r2, #32
 8005684:	409a      	lsls	r2, r3
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	4013      	ands	r3, r2
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 8110 	beq.w	80058b0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a2c      	ldr	r2, [pc, #176]	; (8005748 <HAL_DMA_IRQHandler+0x690>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d04a      	beq.n	8005730 <HAL_DMA_IRQHandler+0x678>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a2b      	ldr	r2, [pc, #172]	; (800574c <HAL_DMA_IRQHandler+0x694>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d045      	beq.n	8005730 <HAL_DMA_IRQHandler+0x678>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a29      	ldr	r2, [pc, #164]	; (8005750 <HAL_DMA_IRQHandler+0x698>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d040      	beq.n	8005730 <HAL_DMA_IRQHandler+0x678>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a28      	ldr	r2, [pc, #160]	; (8005754 <HAL_DMA_IRQHandler+0x69c>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d03b      	beq.n	8005730 <HAL_DMA_IRQHandler+0x678>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a26      	ldr	r2, [pc, #152]	; (8005758 <HAL_DMA_IRQHandler+0x6a0>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d036      	beq.n	8005730 <HAL_DMA_IRQHandler+0x678>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a25      	ldr	r2, [pc, #148]	; (800575c <HAL_DMA_IRQHandler+0x6a4>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d031      	beq.n	8005730 <HAL_DMA_IRQHandler+0x678>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a23      	ldr	r2, [pc, #140]	; (8005760 <HAL_DMA_IRQHandler+0x6a8>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d02c      	beq.n	8005730 <HAL_DMA_IRQHandler+0x678>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a22      	ldr	r2, [pc, #136]	; (8005764 <HAL_DMA_IRQHandler+0x6ac>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d027      	beq.n	8005730 <HAL_DMA_IRQHandler+0x678>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a20      	ldr	r2, [pc, #128]	; (8005768 <HAL_DMA_IRQHandler+0x6b0>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d022      	beq.n	8005730 <HAL_DMA_IRQHandler+0x678>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a1f      	ldr	r2, [pc, #124]	; (800576c <HAL_DMA_IRQHandler+0x6b4>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d01d      	beq.n	8005730 <HAL_DMA_IRQHandler+0x678>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a1d      	ldr	r2, [pc, #116]	; (8005770 <HAL_DMA_IRQHandler+0x6b8>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d018      	beq.n	8005730 <HAL_DMA_IRQHandler+0x678>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a1c      	ldr	r2, [pc, #112]	; (8005774 <HAL_DMA_IRQHandler+0x6bc>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d013      	beq.n	8005730 <HAL_DMA_IRQHandler+0x678>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a1a      	ldr	r2, [pc, #104]	; (8005778 <HAL_DMA_IRQHandler+0x6c0>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d00e      	beq.n	8005730 <HAL_DMA_IRQHandler+0x678>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a19      	ldr	r2, [pc, #100]	; (800577c <HAL_DMA_IRQHandler+0x6c4>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d009      	beq.n	8005730 <HAL_DMA_IRQHandler+0x678>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a17      	ldr	r2, [pc, #92]	; (8005780 <HAL_DMA_IRQHandler+0x6c8>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d004      	beq.n	8005730 <HAL_DMA_IRQHandler+0x678>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a16      	ldr	r2, [pc, #88]	; (8005784 <HAL_DMA_IRQHandler+0x6cc>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d12b      	bne.n	8005788 <HAL_DMA_IRQHandler+0x6d0>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0310 	and.w	r3, r3, #16
 800573a:	2b00      	cmp	r3, #0
 800573c:	bf14      	ite	ne
 800573e:	2301      	movne	r3, #1
 8005740:	2300      	moveq	r3, #0
 8005742:	b2db      	uxtb	r3, r3
 8005744:	e02a      	b.n	800579c <HAL_DMA_IRQHandler+0x6e4>
 8005746:	bf00      	nop
 8005748:	40020010 	.word	0x40020010
 800574c:	40020028 	.word	0x40020028
 8005750:	40020040 	.word	0x40020040
 8005754:	40020058 	.word	0x40020058
 8005758:	40020070 	.word	0x40020070
 800575c:	40020088 	.word	0x40020088
 8005760:	400200a0 	.word	0x400200a0
 8005764:	400200b8 	.word	0x400200b8
 8005768:	40020410 	.word	0x40020410
 800576c:	40020428 	.word	0x40020428
 8005770:	40020440 	.word	0x40020440
 8005774:	40020458 	.word	0x40020458
 8005778:	40020470 	.word	0x40020470
 800577c:	40020488 	.word	0x40020488
 8005780:	400204a0 	.word	0x400204a0
 8005784:	400204b8 	.word	0x400204b8
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b00      	cmp	r3, #0
 8005794:	bf14      	ite	ne
 8005796:	2301      	movne	r3, #1
 8005798:	2300      	moveq	r3, #0
 800579a:	b2db      	uxtb	r3, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	f000 8087 	beq.w	80058b0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057a6:	f003 031f 	and.w	r3, r3, #31
 80057aa:	2220      	movs	r2, #32
 80057ac:	409a      	lsls	r2, r3
 80057ae:	6a3b      	ldr	r3, [r7, #32]
 80057b0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	d139      	bne.n	8005832 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f022 0216 	bic.w	r2, r2, #22
 80057cc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	695a      	ldr	r2, [r3, #20]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057dc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d103      	bne.n	80057ee <HAL_DMA_IRQHandler+0x736>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d007      	beq.n	80057fe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f022 0208 	bic.w	r2, r2, #8
 80057fc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005802:	f003 031f 	and.w	r3, r3, #31
 8005806:	223f      	movs	r2, #63	; 0x3f
 8005808:	409a      	lsls	r2, r3
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005822:	2b00      	cmp	r3, #0
 8005824:	f000 834a 	beq.w	8005ebc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	4798      	blx	r3
          }
          return;
 8005830:	e344      	b.n	8005ebc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d018      	beq.n	8005872 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d108      	bne.n	8005860 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005852:	2b00      	cmp	r3, #0
 8005854:	d02c      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	4798      	blx	r3
 800585e:	e027      	b.n	80058b0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005864:	2b00      	cmp	r3, #0
 8005866:	d023      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	4798      	blx	r3
 8005870:	e01e      	b.n	80058b0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10f      	bne.n	80058a0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 0210 	bic.w	r2, r2, #16
 800588e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d003      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 8306 	beq.w	8005ec6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f000 8088 	beq.w	80059d8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2204      	movs	r2, #4
 80058cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a7a      	ldr	r2, [pc, #488]	; (8005ac0 <HAL_DMA_IRQHandler+0xa08>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d04a      	beq.n	8005970 <HAL_DMA_IRQHandler+0x8b8>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a79      	ldr	r2, [pc, #484]	; (8005ac4 <HAL_DMA_IRQHandler+0xa0c>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d045      	beq.n	8005970 <HAL_DMA_IRQHandler+0x8b8>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a77      	ldr	r2, [pc, #476]	; (8005ac8 <HAL_DMA_IRQHandler+0xa10>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d040      	beq.n	8005970 <HAL_DMA_IRQHandler+0x8b8>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a76      	ldr	r2, [pc, #472]	; (8005acc <HAL_DMA_IRQHandler+0xa14>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d03b      	beq.n	8005970 <HAL_DMA_IRQHandler+0x8b8>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a74      	ldr	r2, [pc, #464]	; (8005ad0 <HAL_DMA_IRQHandler+0xa18>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d036      	beq.n	8005970 <HAL_DMA_IRQHandler+0x8b8>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a73      	ldr	r2, [pc, #460]	; (8005ad4 <HAL_DMA_IRQHandler+0xa1c>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d031      	beq.n	8005970 <HAL_DMA_IRQHandler+0x8b8>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a71      	ldr	r2, [pc, #452]	; (8005ad8 <HAL_DMA_IRQHandler+0xa20>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d02c      	beq.n	8005970 <HAL_DMA_IRQHandler+0x8b8>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a70      	ldr	r2, [pc, #448]	; (8005adc <HAL_DMA_IRQHandler+0xa24>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d027      	beq.n	8005970 <HAL_DMA_IRQHandler+0x8b8>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a6e      	ldr	r2, [pc, #440]	; (8005ae0 <HAL_DMA_IRQHandler+0xa28>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d022      	beq.n	8005970 <HAL_DMA_IRQHandler+0x8b8>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a6d      	ldr	r2, [pc, #436]	; (8005ae4 <HAL_DMA_IRQHandler+0xa2c>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d01d      	beq.n	8005970 <HAL_DMA_IRQHandler+0x8b8>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a6b      	ldr	r2, [pc, #428]	; (8005ae8 <HAL_DMA_IRQHandler+0xa30>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d018      	beq.n	8005970 <HAL_DMA_IRQHandler+0x8b8>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a6a      	ldr	r2, [pc, #424]	; (8005aec <HAL_DMA_IRQHandler+0xa34>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d013      	beq.n	8005970 <HAL_DMA_IRQHandler+0x8b8>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a68      	ldr	r2, [pc, #416]	; (8005af0 <HAL_DMA_IRQHandler+0xa38>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d00e      	beq.n	8005970 <HAL_DMA_IRQHandler+0x8b8>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a67      	ldr	r2, [pc, #412]	; (8005af4 <HAL_DMA_IRQHandler+0xa3c>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d009      	beq.n	8005970 <HAL_DMA_IRQHandler+0x8b8>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a65      	ldr	r2, [pc, #404]	; (8005af8 <HAL_DMA_IRQHandler+0xa40>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d004      	beq.n	8005970 <HAL_DMA_IRQHandler+0x8b8>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a64      	ldr	r2, [pc, #400]	; (8005afc <HAL_DMA_IRQHandler+0xa44>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d108      	bne.n	8005982 <HAL_DMA_IRQHandler+0x8ca>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 0201 	bic.w	r2, r2, #1
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	e007      	b.n	8005992 <HAL_DMA_IRQHandler+0x8da>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 0201 	bic.w	r2, r2, #1
 8005990:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	3301      	adds	r3, #1
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800599a:	429a      	cmp	r2, r3
 800599c:	d307      	bcc.n	80059ae <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1f2      	bne.n	8005992 <HAL_DMA_IRQHandler+0x8da>
 80059ac:	e000      	b.n	80059b0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80059ae:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d004      	beq.n	80059d0 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2203      	movs	r2, #3
 80059ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80059ce:	e003      	b.n	80059d8 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 8272 	beq.w	8005ec6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	4798      	blx	r3
 80059ea:	e26c      	b.n	8005ec6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a43      	ldr	r2, [pc, #268]	; (8005b00 <HAL_DMA_IRQHandler+0xa48>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d022      	beq.n	8005a3c <HAL_DMA_IRQHandler+0x984>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a42      	ldr	r2, [pc, #264]	; (8005b04 <HAL_DMA_IRQHandler+0xa4c>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d01d      	beq.n	8005a3c <HAL_DMA_IRQHandler+0x984>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a40      	ldr	r2, [pc, #256]	; (8005b08 <HAL_DMA_IRQHandler+0xa50>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d018      	beq.n	8005a3c <HAL_DMA_IRQHandler+0x984>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a3f      	ldr	r2, [pc, #252]	; (8005b0c <HAL_DMA_IRQHandler+0xa54>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d013      	beq.n	8005a3c <HAL_DMA_IRQHandler+0x984>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a3d      	ldr	r2, [pc, #244]	; (8005b10 <HAL_DMA_IRQHandler+0xa58>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d00e      	beq.n	8005a3c <HAL_DMA_IRQHandler+0x984>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a3c      	ldr	r2, [pc, #240]	; (8005b14 <HAL_DMA_IRQHandler+0xa5c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d009      	beq.n	8005a3c <HAL_DMA_IRQHandler+0x984>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a3a      	ldr	r2, [pc, #232]	; (8005b18 <HAL_DMA_IRQHandler+0xa60>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d004      	beq.n	8005a3c <HAL_DMA_IRQHandler+0x984>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a39      	ldr	r2, [pc, #228]	; (8005b1c <HAL_DMA_IRQHandler+0xa64>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d101      	bne.n	8005a40 <HAL_DMA_IRQHandler+0x988>
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e000      	b.n	8005a42 <HAL_DMA_IRQHandler+0x98a>
 8005a40:	2300      	movs	r3, #0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 823f 	beq.w	8005ec6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a54:	f003 031f 	and.w	r3, r3, #31
 8005a58:	2204      	movs	r2, #4
 8005a5a:	409a      	lsls	r2, r3
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	4013      	ands	r3, r2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 80cd 	beq.w	8005c00 <HAL_DMA_IRQHandler+0xb48>
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	f003 0304 	and.w	r3, r3, #4
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f000 80c7 	beq.w	8005c00 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a76:	f003 031f 	and.w	r3, r3, #31
 8005a7a:	2204      	movs	r2, #4
 8005a7c:	409a      	lsls	r2, r3
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d049      	beq.n	8005b20 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d109      	bne.n	8005aaa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f000 8210 	beq.w	8005ec0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005aa8:	e20a      	b.n	8005ec0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	f000 8206 	beq.w	8005ec0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005abc:	e200      	b.n	8005ec0 <HAL_DMA_IRQHandler+0xe08>
 8005abe:	bf00      	nop
 8005ac0:	40020010 	.word	0x40020010
 8005ac4:	40020028 	.word	0x40020028
 8005ac8:	40020040 	.word	0x40020040
 8005acc:	40020058 	.word	0x40020058
 8005ad0:	40020070 	.word	0x40020070
 8005ad4:	40020088 	.word	0x40020088
 8005ad8:	400200a0 	.word	0x400200a0
 8005adc:	400200b8 	.word	0x400200b8
 8005ae0:	40020410 	.word	0x40020410
 8005ae4:	40020428 	.word	0x40020428
 8005ae8:	40020440 	.word	0x40020440
 8005aec:	40020458 	.word	0x40020458
 8005af0:	40020470 	.word	0x40020470
 8005af4:	40020488 	.word	0x40020488
 8005af8:	400204a0 	.word	0x400204a0
 8005afc:	400204b8 	.word	0x400204b8
 8005b00:	58025408 	.word	0x58025408
 8005b04:	5802541c 	.word	0x5802541c
 8005b08:	58025430 	.word	0x58025430
 8005b0c:	58025444 	.word	0x58025444
 8005b10:	58025458 	.word	0x58025458
 8005b14:	5802546c 	.word	0x5802546c
 8005b18:	58025480 	.word	0x58025480
 8005b1c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	f003 0320 	and.w	r3, r3, #32
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d160      	bne.n	8005bec <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a8c      	ldr	r2, [pc, #560]	; (8005d60 <HAL_DMA_IRQHandler+0xca8>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d04a      	beq.n	8005bca <HAL_DMA_IRQHandler+0xb12>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a8a      	ldr	r2, [pc, #552]	; (8005d64 <HAL_DMA_IRQHandler+0xcac>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d045      	beq.n	8005bca <HAL_DMA_IRQHandler+0xb12>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a89      	ldr	r2, [pc, #548]	; (8005d68 <HAL_DMA_IRQHandler+0xcb0>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d040      	beq.n	8005bca <HAL_DMA_IRQHandler+0xb12>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a87      	ldr	r2, [pc, #540]	; (8005d6c <HAL_DMA_IRQHandler+0xcb4>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d03b      	beq.n	8005bca <HAL_DMA_IRQHandler+0xb12>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a86      	ldr	r2, [pc, #536]	; (8005d70 <HAL_DMA_IRQHandler+0xcb8>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d036      	beq.n	8005bca <HAL_DMA_IRQHandler+0xb12>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a84      	ldr	r2, [pc, #528]	; (8005d74 <HAL_DMA_IRQHandler+0xcbc>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d031      	beq.n	8005bca <HAL_DMA_IRQHandler+0xb12>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a83      	ldr	r2, [pc, #524]	; (8005d78 <HAL_DMA_IRQHandler+0xcc0>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d02c      	beq.n	8005bca <HAL_DMA_IRQHandler+0xb12>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a81      	ldr	r2, [pc, #516]	; (8005d7c <HAL_DMA_IRQHandler+0xcc4>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d027      	beq.n	8005bca <HAL_DMA_IRQHandler+0xb12>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a80      	ldr	r2, [pc, #512]	; (8005d80 <HAL_DMA_IRQHandler+0xcc8>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d022      	beq.n	8005bca <HAL_DMA_IRQHandler+0xb12>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a7e      	ldr	r2, [pc, #504]	; (8005d84 <HAL_DMA_IRQHandler+0xccc>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d01d      	beq.n	8005bca <HAL_DMA_IRQHandler+0xb12>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a7d      	ldr	r2, [pc, #500]	; (8005d88 <HAL_DMA_IRQHandler+0xcd0>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d018      	beq.n	8005bca <HAL_DMA_IRQHandler+0xb12>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a7b      	ldr	r2, [pc, #492]	; (8005d8c <HAL_DMA_IRQHandler+0xcd4>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d013      	beq.n	8005bca <HAL_DMA_IRQHandler+0xb12>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a7a      	ldr	r2, [pc, #488]	; (8005d90 <HAL_DMA_IRQHandler+0xcd8>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d00e      	beq.n	8005bca <HAL_DMA_IRQHandler+0xb12>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a78      	ldr	r2, [pc, #480]	; (8005d94 <HAL_DMA_IRQHandler+0xcdc>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d009      	beq.n	8005bca <HAL_DMA_IRQHandler+0xb12>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a77      	ldr	r2, [pc, #476]	; (8005d98 <HAL_DMA_IRQHandler+0xce0>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d004      	beq.n	8005bca <HAL_DMA_IRQHandler+0xb12>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a75      	ldr	r2, [pc, #468]	; (8005d9c <HAL_DMA_IRQHandler+0xce4>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d108      	bne.n	8005bdc <HAL_DMA_IRQHandler+0xb24>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f022 0208 	bic.w	r2, r2, #8
 8005bd8:	601a      	str	r2, [r3, #0]
 8005bda:	e007      	b.n	8005bec <HAL_DMA_IRQHandler+0xb34>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 0204 	bic.w	r2, r2, #4
 8005bea:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 8165 	beq.w	8005ec0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bfe:	e15f      	b.n	8005ec0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c04:	f003 031f 	and.w	r3, r3, #31
 8005c08:	2202      	movs	r2, #2
 8005c0a:	409a      	lsls	r2, r3
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	4013      	ands	r3, r2
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f000 80c5 	beq.w	8005da0 <HAL_DMA_IRQHandler+0xce8>
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	f003 0302 	and.w	r3, r3, #2
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f000 80bf 	beq.w	8005da0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c26:	f003 031f 	and.w	r3, r3, #31
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	409a      	lsls	r2, r3
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d018      	beq.n	8005c6e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d109      	bne.n	8005c5a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f000 813a 	beq.w	8005ec4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c58:	e134      	b.n	8005ec4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f000 8130 	beq.w	8005ec4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c6c:	e12a      	b.n	8005ec4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	f003 0320 	and.w	r3, r3, #32
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d168      	bne.n	8005d4a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a38      	ldr	r2, [pc, #224]	; (8005d60 <HAL_DMA_IRQHandler+0xca8>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d04a      	beq.n	8005d18 <HAL_DMA_IRQHandler+0xc60>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a37      	ldr	r2, [pc, #220]	; (8005d64 <HAL_DMA_IRQHandler+0xcac>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d045      	beq.n	8005d18 <HAL_DMA_IRQHandler+0xc60>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a35      	ldr	r2, [pc, #212]	; (8005d68 <HAL_DMA_IRQHandler+0xcb0>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d040      	beq.n	8005d18 <HAL_DMA_IRQHandler+0xc60>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a34      	ldr	r2, [pc, #208]	; (8005d6c <HAL_DMA_IRQHandler+0xcb4>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d03b      	beq.n	8005d18 <HAL_DMA_IRQHandler+0xc60>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a32      	ldr	r2, [pc, #200]	; (8005d70 <HAL_DMA_IRQHandler+0xcb8>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d036      	beq.n	8005d18 <HAL_DMA_IRQHandler+0xc60>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a31      	ldr	r2, [pc, #196]	; (8005d74 <HAL_DMA_IRQHandler+0xcbc>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d031      	beq.n	8005d18 <HAL_DMA_IRQHandler+0xc60>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a2f      	ldr	r2, [pc, #188]	; (8005d78 <HAL_DMA_IRQHandler+0xcc0>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d02c      	beq.n	8005d18 <HAL_DMA_IRQHandler+0xc60>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a2e      	ldr	r2, [pc, #184]	; (8005d7c <HAL_DMA_IRQHandler+0xcc4>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d027      	beq.n	8005d18 <HAL_DMA_IRQHandler+0xc60>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a2c      	ldr	r2, [pc, #176]	; (8005d80 <HAL_DMA_IRQHandler+0xcc8>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d022      	beq.n	8005d18 <HAL_DMA_IRQHandler+0xc60>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a2b      	ldr	r2, [pc, #172]	; (8005d84 <HAL_DMA_IRQHandler+0xccc>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d01d      	beq.n	8005d18 <HAL_DMA_IRQHandler+0xc60>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a29      	ldr	r2, [pc, #164]	; (8005d88 <HAL_DMA_IRQHandler+0xcd0>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d018      	beq.n	8005d18 <HAL_DMA_IRQHandler+0xc60>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a28      	ldr	r2, [pc, #160]	; (8005d8c <HAL_DMA_IRQHandler+0xcd4>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d013      	beq.n	8005d18 <HAL_DMA_IRQHandler+0xc60>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a26      	ldr	r2, [pc, #152]	; (8005d90 <HAL_DMA_IRQHandler+0xcd8>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d00e      	beq.n	8005d18 <HAL_DMA_IRQHandler+0xc60>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a25      	ldr	r2, [pc, #148]	; (8005d94 <HAL_DMA_IRQHandler+0xcdc>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d009      	beq.n	8005d18 <HAL_DMA_IRQHandler+0xc60>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a23      	ldr	r2, [pc, #140]	; (8005d98 <HAL_DMA_IRQHandler+0xce0>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d004      	beq.n	8005d18 <HAL_DMA_IRQHandler+0xc60>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a22      	ldr	r2, [pc, #136]	; (8005d9c <HAL_DMA_IRQHandler+0xce4>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d108      	bne.n	8005d2a <HAL_DMA_IRQHandler+0xc72>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 0214 	bic.w	r2, r2, #20
 8005d26:	601a      	str	r2, [r3, #0]
 8005d28:	e007      	b.n	8005d3a <HAL_DMA_IRQHandler+0xc82>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f022 020a 	bic.w	r2, r2, #10
 8005d38:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f000 80b8 	beq.w	8005ec4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d5c:	e0b2      	b.n	8005ec4 <HAL_DMA_IRQHandler+0xe0c>
 8005d5e:	bf00      	nop
 8005d60:	40020010 	.word	0x40020010
 8005d64:	40020028 	.word	0x40020028
 8005d68:	40020040 	.word	0x40020040
 8005d6c:	40020058 	.word	0x40020058
 8005d70:	40020070 	.word	0x40020070
 8005d74:	40020088 	.word	0x40020088
 8005d78:	400200a0 	.word	0x400200a0
 8005d7c:	400200b8 	.word	0x400200b8
 8005d80:	40020410 	.word	0x40020410
 8005d84:	40020428 	.word	0x40020428
 8005d88:	40020440 	.word	0x40020440
 8005d8c:	40020458 	.word	0x40020458
 8005d90:	40020470 	.word	0x40020470
 8005d94:	40020488 	.word	0x40020488
 8005d98:	400204a0 	.word	0x400204a0
 8005d9c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005da4:	f003 031f 	and.w	r3, r3, #31
 8005da8:	2208      	movs	r2, #8
 8005daa:	409a      	lsls	r2, r3
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	4013      	ands	r3, r2
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 8088 	beq.w	8005ec6 <HAL_DMA_IRQHandler+0xe0e>
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	f003 0308 	and.w	r3, r3, #8
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f000 8082 	beq.w	8005ec6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a41      	ldr	r2, [pc, #260]	; (8005ecc <HAL_DMA_IRQHandler+0xe14>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d04a      	beq.n	8005e62 <HAL_DMA_IRQHandler+0xdaa>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a3f      	ldr	r2, [pc, #252]	; (8005ed0 <HAL_DMA_IRQHandler+0xe18>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d045      	beq.n	8005e62 <HAL_DMA_IRQHandler+0xdaa>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a3e      	ldr	r2, [pc, #248]	; (8005ed4 <HAL_DMA_IRQHandler+0xe1c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d040      	beq.n	8005e62 <HAL_DMA_IRQHandler+0xdaa>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a3c      	ldr	r2, [pc, #240]	; (8005ed8 <HAL_DMA_IRQHandler+0xe20>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d03b      	beq.n	8005e62 <HAL_DMA_IRQHandler+0xdaa>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a3b      	ldr	r2, [pc, #236]	; (8005edc <HAL_DMA_IRQHandler+0xe24>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d036      	beq.n	8005e62 <HAL_DMA_IRQHandler+0xdaa>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a39      	ldr	r2, [pc, #228]	; (8005ee0 <HAL_DMA_IRQHandler+0xe28>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d031      	beq.n	8005e62 <HAL_DMA_IRQHandler+0xdaa>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a38      	ldr	r2, [pc, #224]	; (8005ee4 <HAL_DMA_IRQHandler+0xe2c>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d02c      	beq.n	8005e62 <HAL_DMA_IRQHandler+0xdaa>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a36      	ldr	r2, [pc, #216]	; (8005ee8 <HAL_DMA_IRQHandler+0xe30>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d027      	beq.n	8005e62 <HAL_DMA_IRQHandler+0xdaa>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a35      	ldr	r2, [pc, #212]	; (8005eec <HAL_DMA_IRQHandler+0xe34>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d022      	beq.n	8005e62 <HAL_DMA_IRQHandler+0xdaa>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a33      	ldr	r2, [pc, #204]	; (8005ef0 <HAL_DMA_IRQHandler+0xe38>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d01d      	beq.n	8005e62 <HAL_DMA_IRQHandler+0xdaa>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a32      	ldr	r2, [pc, #200]	; (8005ef4 <HAL_DMA_IRQHandler+0xe3c>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d018      	beq.n	8005e62 <HAL_DMA_IRQHandler+0xdaa>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a30      	ldr	r2, [pc, #192]	; (8005ef8 <HAL_DMA_IRQHandler+0xe40>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d013      	beq.n	8005e62 <HAL_DMA_IRQHandler+0xdaa>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a2f      	ldr	r2, [pc, #188]	; (8005efc <HAL_DMA_IRQHandler+0xe44>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d00e      	beq.n	8005e62 <HAL_DMA_IRQHandler+0xdaa>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a2d      	ldr	r2, [pc, #180]	; (8005f00 <HAL_DMA_IRQHandler+0xe48>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d009      	beq.n	8005e62 <HAL_DMA_IRQHandler+0xdaa>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a2c      	ldr	r2, [pc, #176]	; (8005f04 <HAL_DMA_IRQHandler+0xe4c>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d004      	beq.n	8005e62 <HAL_DMA_IRQHandler+0xdaa>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a2a      	ldr	r2, [pc, #168]	; (8005f08 <HAL_DMA_IRQHandler+0xe50>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d108      	bne.n	8005e74 <HAL_DMA_IRQHandler+0xdbc>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 021c 	bic.w	r2, r2, #28
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	e007      	b.n	8005e84 <HAL_DMA_IRQHandler+0xdcc>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f022 020e 	bic.w	r2, r2, #14
 8005e82:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e88:	f003 031f 	and.w	r3, r3, #31
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	409a      	lsls	r2, r3
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d009      	beq.n	8005ec6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	4798      	blx	r3
 8005eba:	e004      	b.n	8005ec6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005ebc:	bf00      	nop
 8005ebe:	e002      	b.n	8005ec6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ec0:	bf00      	nop
 8005ec2:	e000      	b.n	8005ec6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ec4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005ec6:	3728      	adds	r7, #40	; 0x28
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	40020010 	.word	0x40020010
 8005ed0:	40020028 	.word	0x40020028
 8005ed4:	40020040 	.word	0x40020040
 8005ed8:	40020058 	.word	0x40020058
 8005edc:	40020070 	.word	0x40020070
 8005ee0:	40020088 	.word	0x40020088
 8005ee4:	400200a0 	.word	0x400200a0
 8005ee8:	400200b8 	.word	0x400200b8
 8005eec:	40020410 	.word	0x40020410
 8005ef0:	40020428 	.word	0x40020428
 8005ef4:	40020440 	.word	0x40020440
 8005ef8:	40020458 	.word	0x40020458
 8005efc:	40020470 	.word	0x40020470
 8005f00:	40020488 	.word	0x40020488
 8005f04:	400204a0 	.word	0x400204a0
 8005f08:	400204b8 	.word	0x400204b8

08005f0c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b087      	sub	sp, #28
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
 8005f18:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f1e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f24:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a84      	ldr	r2, [pc, #528]	; (800613c <DMA_SetConfig+0x230>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d072      	beq.n	8006016 <DMA_SetConfig+0x10a>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a82      	ldr	r2, [pc, #520]	; (8006140 <DMA_SetConfig+0x234>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d06d      	beq.n	8006016 <DMA_SetConfig+0x10a>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a81      	ldr	r2, [pc, #516]	; (8006144 <DMA_SetConfig+0x238>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d068      	beq.n	8006016 <DMA_SetConfig+0x10a>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a7f      	ldr	r2, [pc, #508]	; (8006148 <DMA_SetConfig+0x23c>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d063      	beq.n	8006016 <DMA_SetConfig+0x10a>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a7e      	ldr	r2, [pc, #504]	; (800614c <DMA_SetConfig+0x240>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d05e      	beq.n	8006016 <DMA_SetConfig+0x10a>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a7c      	ldr	r2, [pc, #496]	; (8006150 <DMA_SetConfig+0x244>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d059      	beq.n	8006016 <DMA_SetConfig+0x10a>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a7b      	ldr	r2, [pc, #492]	; (8006154 <DMA_SetConfig+0x248>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d054      	beq.n	8006016 <DMA_SetConfig+0x10a>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a79      	ldr	r2, [pc, #484]	; (8006158 <DMA_SetConfig+0x24c>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d04f      	beq.n	8006016 <DMA_SetConfig+0x10a>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a78      	ldr	r2, [pc, #480]	; (800615c <DMA_SetConfig+0x250>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d04a      	beq.n	8006016 <DMA_SetConfig+0x10a>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a76      	ldr	r2, [pc, #472]	; (8006160 <DMA_SetConfig+0x254>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d045      	beq.n	8006016 <DMA_SetConfig+0x10a>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a75      	ldr	r2, [pc, #468]	; (8006164 <DMA_SetConfig+0x258>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d040      	beq.n	8006016 <DMA_SetConfig+0x10a>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a73      	ldr	r2, [pc, #460]	; (8006168 <DMA_SetConfig+0x25c>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d03b      	beq.n	8006016 <DMA_SetConfig+0x10a>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a72      	ldr	r2, [pc, #456]	; (800616c <DMA_SetConfig+0x260>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d036      	beq.n	8006016 <DMA_SetConfig+0x10a>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a70      	ldr	r2, [pc, #448]	; (8006170 <DMA_SetConfig+0x264>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d031      	beq.n	8006016 <DMA_SetConfig+0x10a>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a6f      	ldr	r2, [pc, #444]	; (8006174 <DMA_SetConfig+0x268>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d02c      	beq.n	8006016 <DMA_SetConfig+0x10a>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a6d      	ldr	r2, [pc, #436]	; (8006178 <DMA_SetConfig+0x26c>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d027      	beq.n	8006016 <DMA_SetConfig+0x10a>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a6c      	ldr	r2, [pc, #432]	; (800617c <DMA_SetConfig+0x270>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d022      	beq.n	8006016 <DMA_SetConfig+0x10a>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a6a      	ldr	r2, [pc, #424]	; (8006180 <DMA_SetConfig+0x274>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d01d      	beq.n	8006016 <DMA_SetConfig+0x10a>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a69      	ldr	r2, [pc, #420]	; (8006184 <DMA_SetConfig+0x278>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d018      	beq.n	8006016 <DMA_SetConfig+0x10a>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a67      	ldr	r2, [pc, #412]	; (8006188 <DMA_SetConfig+0x27c>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d013      	beq.n	8006016 <DMA_SetConfig+0x10a>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a66      	ldr	r2, [pc, #408]	; (800618c <DMA_SetConfig+0x280>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d00e      	beq.n	8006016 <DMA_SetConfig+0x10a>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a64      	ldr	r2, [pc, #400]	; (8006190 <DMA_SetConfig+0x284>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d009      	beq.n	8006016 <DMA_SetConfig+0x10a>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a63      	ldr	r2, [pc, #396]	; (8006194 <DMA_SetConfig+0x288>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d004      	beq.n	8006016 <DMA_SetConfig+0x10a>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a61      	ldr	r2, [pc, #388]	; (8006198 <DMA_SetConfig+0x28c>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d101      	bne.n	800601a <DMA_SetConfig+0x10e>
 8006016:	2301      	movs	r3, #1
 8006018:	e000      	b.n	800601c <DMA_SetConfig+0x110>
 800601a:	2300      	movs	r3, #0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00d      	beq.n	800603c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006028:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800602e:	2b00      	cmp	r3, #0
 8006030:	d004      	beq.n	800603c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800603a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a3e      	ldr	r2, [pc, #248]	; (800613c <DMA_SetConfig+0x230>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d04a      	beq.n	80060dc <DMA_SetConfig+0x1d0>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a3d      	ldr	r2, [pc, #244]	; (8006140 <DMA_SetConfig+0x234>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d045      	beq.n	80060dc <DMA_SetConfig+0x1d0>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a3b      	ldr	r2, [pc, #236]	; (8006144 <DMA_SetConfig+0x238>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d040      	beq.n	80060dc <DMA_SetConfig+0x1d0>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a3a      	ldr	r2, [pc, #232]	; (8006148 <DMA_SetConfig+0x23c>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d03b      	beq.n	80060dc <DMA_SetConfig+0x1d0>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a38      	ldr	r2, [pc, #224]	; (800614c <DMA_SetConfig+0x240>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d036      	beq.n	80060dc <DMA_SetConfig+0x1d0>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a37      	ldr	r2, [pc, #220]	; (8006150 <DMA_SetConfig+0x244>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d031      	beq.n	80060dc <DMA_SetConfig+0x1d0>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a35      	ldr	r2, [pc, #212]	; (8006154 <DMA_SetConfig+0x248>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d02c      	beq.n	80060dc <DMA_SetConfig+0x1d0>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a34      	ldr	r2, [pc, #208]	; (8006158 <DMA_SetConfig+0x24c>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d027      	beq.n	80060dc <DMA_SetConfig+0x1d0>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a32      	ldr	r2, [pc, #200]	; (800615c <DMA_SetConfig+0x250>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d022      	beq.n	80060dc <DMA_SetConfig+0x1d0>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a31      	ldr	r2, [pc, #196]	; (8006160 <DMA_SetConfig+0x254>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d01d      	beq.n	80060dc <DMA_SetConfig+0x1d0>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a2f      	ldr	r2, [pc, #188]	; (8006164 <DMA_SetConfig+0x258>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d018      	beq.n	80060dc <DMA_SetConfig+0x1d0>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a2e      	ldr	r2, [pc, #184]	; (8006168 <DMA_SetConfig+0x25c>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d013      	beq.n	80060dc <DMA_SetConfig+0x1d0>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a2c      	ldr	r2, [pc, #176]	; (800616c <DMA_SetConfig+0x260>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d00e      	beq.n	80060dc <DMA_SetConfig+0x1d0>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a2b      	ldr	r2, [pc, #172]	; (8006170 <DMA_SetConfig+0x264>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d009      	beq.n	80060dc <DMA_SetConfig+0x1d0>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a29      	ldr	r2, [pc, #164]	; (8006174 <DMA_SetConfig+0x268>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d004      	beq.n	80060dc <DMA_SetConfig+0x1d0>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a28      	ldr	r2, [pc, #160]	; (8006178 <DMA_SetConfig+0x26c>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d101      	bne.n	80060e0 <DMA_SetConfig+0x1d4>
 80060dc:	2301      	movs	r3, #1
 80060de:	e000      	b.n	80060e2 <DMA_SetConfig+0x1d6>
 80060e0:	2300      	movs	r3, #0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d05a      	beq.n	800619c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ea:	f003 031f 	and.w	r3, r3, #31
 80060ee:	223f      	movs	r2, #63	; 0x3f
 80060f0:	409a      	lsls	r2, r3
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006104:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	2b40      	cmp	r3, #64	; 0x40
 8006114:	d108      	bne.n	8006128 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006126:	e087      	b.n	8006238 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	60da      	str	r2, [r3, #12]
}
 8006138:	e07e      	b.n	8006238 <DMA_SetConfig+0x32c>
 800613a:	bf00      	nop
 800613c:	40020010 	.word	0x40020010
 8006140:	40020028 	.word	0x40020028
 8006144:	40020040 	.word	0x40020040
 8006148:	40020058 	.word	0x40020058
 800614c:	40020070 	.word	0x40020070
 8006150:	40020088 	.word	0x40020088
 8006154:	400200a0 	.word	0x400200a0
 8006158:	400200b8 	.word	0x400200b8
 800615c:	40020410 	.word	0x40020410
 8006160:	40020428 	.word	0x40020428
 8006164:	40020440 	.word	0x40020440
 8006168:	40020458 	.word	0x40020458
 800616c:	40020470 	.word	0x40020470
 8006170:	40020488 	.word	0x40020488
 8006174:	400204a0 	.word	0x400204a0
 8006178:	400204b8 	.word	0x400204b8
 800617c:	58025408 	.word	0x58025408
 8006180:	5802541c 	.word	0x5802541c
 8006184:	58025430 	.word	0x58025430
 8006188:	58025444 	.word	0x58025444
 800618c:	58025458 	.word	0x58025458
 8006190:	5802546c 	.word	0x5802546c
 8006194:	58025480 	.word	0x58025480
 8006198:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a28      	ldr	r2, [pc, #160]	; (8006244 <DMA_SetConfig+0x338>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d022      	beq.n	80061ec <DMA_SetConfig+0x2e0>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a27      	ldr	r2, [pc, #156]	; (8006248 <DMA_SetConfig+0x33c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d01d      	beq.n	80061ec <DMA_SetConfig+0x2e0>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a25      	ldr	r2, [pc, #148]	; (800624c <DMA_SetConfig+0x340>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d018      	beq.n	80061ec <DMA_SetConfig+0x2e0>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a24      	ldr	r2, [pc, #144]	; (8006250 <DMA_SetConfig+0x344>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d013      	beq.n	80061ec <DMA_SetConfig+0x2e0>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a22      	ldr	r2, [pc, #136]	; (8006254 <DMA_SetConfig+0x348>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d00e      	beq.n	80061ec <DMA_SetConfig+0x2e0>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a21      	ldr	r2, [pc, #132]	; (8006258 <DMA_SetConfig+0x34c>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d009      	beq.n	80061ec <DMA_SetConfig+0x2e0>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a1f      	ldr	r2, [pc, #124]	; (800625c <DMA_SetConfig+0x350>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d004      	beq.n	80061ec <DMA_SetConfig+0x2e0>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a1e      	ldr	r2, [pc, #120]	; (8006260 <DMA_SetConfig+0x354>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d101      	bne.n	80061f0 <DMA_SetConfig+0x2e4>
 80061ec:	2301      	movs	r3, #1
 80061ee:	e000      	b.n	80061f2 <DMA_SetConfig+0x2e6>
 80061f0:	2300      	movs	r3, #0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d020      	beq.n	8006238 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061fa:	f003 031f 	and.w	r3, r3, #31
 80061fe:	2201      	movs	r2, #1
 8006200:	409a      	lsls	r2, r3
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	2b40      	cmp	r3, #64	; 0x40
 8006214:	d108      	bne.n	8006228 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	60da      	str	r2, [r3, #12]
}
 8006226:	e007      	b.n	8006238 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	60da      	str	r2, [r3, #12]
}
 8006238:	bf00      	nop
 800623a:	371c      	adds	r7, #28
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr
 8006244:	58025408 	.word	0x58025408
 8006248:	5802541c 	.word	0x5802541c
 800624c:	58025430 	.word	0x58025430
 8006250:	58025444 	.word	0x58025444
 8006254:	58025458 	.word	0x58025458
 8006258:	5802546c 	.word	0x5802546c
 800625c:	58025480 	.word	0x58025480
 8006260:	58025494 	.word	0x58025494

08006264 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a42      	ldr	r2, [pc, #264]	; (800637c <DMA_CalcBaseAndBitshift+0x118>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d04a      	beq.n	800630c <DMA_CalcBaseAndBitshift+0xa8>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a41      	ldr	r2, [pc, #260]	; (8006380 <DMA_CalcBaseAndBitshift+0x11c>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d045      	beq.n	800630c <DMA_CalcBaseAndBitshift+0xa8>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a3f      	ldr	r2, [pc, #252]	; (8006384 <DMA_CalcBaseAndBitshift+0x120>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d040      	beq.n	800630c <DMA_CalcBaseAndBitshift+0xa8>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a3e      	ldr	r2, [pc, #248]	; (8006388 <DMA_CalcBaseAndBitshift+0x124>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d03b      	beq.n	800630c <DMA_CalcBaseAndBitshift+0xa8>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a3c      	ldr	r2, [pc, #240]	; (800638c <DMA_CalcBaseAndBitshift+0x128>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d036      	beq.n	800630c <DMA_CalcBaseAndBitshift+0xa8>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a3b      	ldr	r2, [pc, #236]	; (8006390 <DMA_CalcBaseAndBitshift+0x12c>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d031      	beq.n	800630c <DMA_CalcBaseAndBitshift+0xa8>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a39      	ldr	r2, [pc, #228]	; (8006394 <DMA_CalcBaseAndBitshift+0x130>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d02c      	beq.n	800630c <DMA_CalcBaseAndBitshift+0xa8>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a38      	ldr	r2, [pc, #224]	; (8006398 <DMA_CalcBaseAndBitshift+0x134>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d027      	beq.n	800630c <DMA_CalcBaseAndBitshift+0xa8>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a36      	ldr	r2, [pc, #216]	; (800639c <DMA_CalcBaseAndBitshift+0x138>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d022      	beq.n	800630c <DMA_CalcBaseAndBitshift+0xa8>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a35      	ldr	r2, [pc, #212]	; (80063a0 <DMA_CalcBaseAndBitshift+0x13c>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d01d      	beq.n	800630c <DMA_CalcBaseAndBitshift+0xa8>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a33      	ldr	r2, [pc, #204]	; (80063a4 <DMA_CalcBaseAndBitshift+0x140>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d018      	beq.n	800630c <DMA_CalcBaseAndBitshift+0xa8>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a32      	ldr	r2, [pc, #200]	; (80063a8 <DMA_CalcBaseAndBitshift+0x144>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d013      	beq.n	800630c <DMA_CalcBaseAndBitshift+0xa8>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a30      	ldr	r2, [pc, #192]	; (80063ac <DMA_CalcBaseAndBitshift+0x148>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d00e      	beq.n	800630c <DMA_CalcBaseAndBitshift+0xa8>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a2f      	ldr	r2, [pc, #188]	; (80063b0 <DMA_CalcBaseAndBitshift+0x14c>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d009      	beq.n	800630c <DMA_CalcBaseAndBitshift+0xa8>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a2d      	ldr	r2, [pc, #180]	; (80063b4 <DMA_CalcBaseAndBitshift+0x150>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d004      	beq.n	800630c <DMA_CalcBaseAndBitshift+0xa8>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a2c      	ldr	r2, [pc, #176]	; (80063b8 <DMA_CalcBaseAndBitshift+0x154>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d101      	bne.n	8006310 <DMA_CalcBaseAndBitshift+0xac>
 800630c:	2301      	movs	r3, #1
 800630e:	e000      	b.n	8006312 <DMA_CalcBaseAndBitshift+0xae>
 8006310:	2300      	movs	r3, #0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d024      	beq.n	8006360 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	b2db      	uxtb	r3, r3
 800631c:	3b10      	subs	r3, #16
 800631e:	4a27      	ldr	r2, [pc, #156]	; (80063bc <DMA_CalcBaseAndBitshift+0x158>)
 8006320:	fba2 2303 	umull	r2, r3, r2, r3
 8006324:	091b      	lsrs	r3, r3, #4
 8006326:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f003 0307 	and.w	r3, r3, #7
 800632e:	4a24      	ldr	r2, [pc, #144]	; (80063c0 <DMA_CalcBaseAndBitshift+0x15c>)
 8006330:	5cd3      	ldrb	r3, [r2, r3]
 8006332:	461a      	mov	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2b03      	cmp	r3, #3
 800633c:	d908      	bls.n	8006350 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	461a      	mov	r2, r3
 8006344:	4b1f      	ldr	r3, [pc, #124]	; (80063c4 <DMA_CalcBaseAndBitshift+0x160>)
 8006346:	4013      	ands	r3, r2
 8006348:	1d1a      	adds	r2, r3, #4
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	659a      	str	r2, [r3, #88]	; 0x58
 800634e:	e00d      	b.n	800636c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	461a      	mov	r2, r3
 8006356:	4b1b      	ldr	r3, [pc, #108]	; (80063c4 <DMA_CalcBaseAndBitshift+0x160>)
 8006358:	4013      	ands	r3, r2
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	6593      	str	r3, [r2, #88]	; 0x58
 800635e:	e005      	b.n	800636c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006370:	4618      	mov	r0, r3
 8006372:	3714      	adds	r7, #20
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	40020010 	.word	0x40020010
 8006380:	40020028 	.word	0x40020028
 8006384:	40020040 	.word	0x40020040
 8006388:	40020058 	.word	0x40020058
 800638c:	40020070 	.word	0x40020070
 8006390:	40020088 	.word	0x40020088
 8006394:	400200a0 	.word	0x400200a0
 8006398:	400200b8 	.word	0x400200b8
 800639c:	40020410 	.word	0x40020410
 80063a0:	40020428 	.word	0x40020428
 80063a4:	40020440 	.word	0x40020440
 80063a8:	40020458 	.word	0x40020458
 80063ac:	40020470 	.word	0x40020470
 80063b0:	40020488 	.word	0x40020488
 80063b4:	400204a0 	.word	0x400204a0
 80063b8:	400204b8 	.word	0x400204b8
 80063bc:	aaaaaaab 	.word	0xaaaaaaab
 80063c0:	08011c9c 	.word	0x08011c9c
 80063c4:	fffffc00 	.word	0xfffffc00

080063c8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063d0:	2300      	movs	r3, #0
 80063d2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d120      	bne.n	800641e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e0:	2b03      	cmp	r3, #3
 80063e2:	d858      	bhi.n	8006496 <DMA_CheckFifoParam+0xce>
 80063e4:	a201      	add	r2, pc, #4	; (adr r2, 80063ec <DMA_CheckFifoParam+0x24>)
 80063e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ea:	bf00      	nop
 80063ec:	080063fd 	.word	0x080063fd
 80063f0:	0800640f 	.word	0x0800640f
 80063f4:	080063fd 	.word	0x080063fd
 80063f8:	08006497 	.word	0x08006497
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006400:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d048      	beq.n	800649a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800640c:	e045      	b.n	800649a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006412:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006416:	d142      	bne.n	800649e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800641c:	e03f      	b.n	800649e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006426:	d123      	bne.n	8006470 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642c:	2b03      	cmp	r3, #3
 800642e:	d838      	bhi.n	80064a2 <DMA_CheckFifoParam+0xda>
 8006430:	a201      	add	r2, pc, #4	; (adr r2, 8006438 <DMA_CheckFifoParam+0x70>)
 8006432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006436:	bf00      	nop
 8006438:	08006449 	.word	0x08006449
 800643c:	0800644f 	.word	0x0800644f
 8006440:	08006449 	.word	0x08006449
 8006444:	08006461 	.word	0x08006461
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	73fb      	strb	r3, [r7, #15]
        break;
 800644c:	e030      	b.n	80064b0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006452:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d025      	beq.n	80064a6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800645e:	e022      	b.n	80064a6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006464:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006468:	d11f      	bne.n	80064aa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800646e:	e01c      	b.n	80064aa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006474:	2b02      	cmp	r3, #2
 8006476:	d902      	bls.n	800647e <DMA_CheckFifoParam+0xb6>
 8006478:	2b03      	cmp	r3, #3
 800647a:	d003      	beq.n	8006484 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800647c:	e018      	b.n	80064b0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	73fb      	strb	r3, [r7, #15]
        break;
 8006482:	e015      	b.n	80064b0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006488:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00e      	beq.n	80064ae <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	73fb      	strb	r3, [r7, #15]
    break;
 8006494:	e00b      	b.n	80064ae <DMA_CheckFifoParam+0xe6>
        break;
 8006496:	bf00      	nop
 8006498:	e00a      	b.n	80064b0 <DMA_CheckFifoParam+0xe8>
        break;
 800649a:	bf00      	nop
 800649c:	e008      	b.n	80064b0 <DMA_CheckFifoParam+0xe8>
        break;
 800649e:	bf00      	nop
 80064a0:	e006      	b.n	80064b0 <DMA_CheckFifoParam+0xe8>
        break;
 80064a2:	bf00      	nop
 80064a4:	e004      	b.n	80064b0 <DMA_CheckFifoParam+0xe8>
        break;
 80064a6:	bf00      	nop
 80064a8:	e002      	b.n	80064b0 <DMA_CheckFifoParam+0xe8>
        break;
 80064aa:	bf00      	nop
 80064ac:	e000      	b.n	80064b0 <DMA_CheckFifoParam+0xe8>
    break;
 80064ae:	bf00      	nop
    }
  }

  return status;
 80064b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop

080064c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a38      	ldr	r2, [pc, #224]	; (80065b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d022      	beq.n	800651e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a36      	ldr	r2, [pc, #216]	; (80065b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d01d      	beq.n	800651e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a35      	ldr	r2, [pc, #212]	; (80065bc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d018      	beq.n	800651e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a33      	ldr	r2, [pc, #204]	; (80065c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d013      	beq.n	800651e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a32      	ldr	r2, [pc, #200]	; (80065c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d00e      	beq.n	800651e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a30      	ldr	r2, [pc, #192]	; (80065c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d009      	beq.n	800651e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a2f      	ldr	r2, [pc, #188]	; (80065cc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d004      	beq.n	800651e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a2d      	ldr	r2, [pc, #180]	; (80065d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d101      	bne.n	8006522 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800651e:	2301      	movs	r3, #1
 8006520:	e000      	b.n	8006524 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006522:	2300      	movs	r3, #0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d01a      	beq.n	800655e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	b2db      	uxtb	r3, r3
 800652e:	3b08      	subs	r3, #8
 8006530:	4a28      	ldr	r2, [pc, #160]	; (80065d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006532:	fba2 2303 	umull	r2, r3, r2, r3
 8006536:	091b      	lsrs	r3, r3, #4
 8006538:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	4b26      	ldr	r3, [pc, #152]	; (80065d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800653e:	4413      	add	r3, r2
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	461a      	mov	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a24      	ldr	r2, [pc, #144]	; (80065dc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800654c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f003 031f 	and.w	r3, r3, #31
 8006554:	2201      	movs	r2, #1
 8006556:	409a      	lsls	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800655c:	e024      	b.n	80065a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	b2db      	uxtb	r3, r3
 8006564:	3b10      	subs	r3, #16
 8006566:	4a1e      	ldr	r2, [pc, #120]	; (80065e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006568:	fba2 2303 	umull	r2, r3, r2, r3
 800656c:	091b      	lsrs	r3, r3, #4
 800656e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	4a1c      	ldr	r2, [pc, #112]	; (80065e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d806      	bhi.n	8006586 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	4a1b      	ldr	r2, [pc, #108]	; (80065e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d902      	bls.n	8006586 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	3308      	adds	r3, #8
 8006584:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	4b18      	ldr	r3, [pc, #96]	; (80065ec <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800658a:	4413      	add	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	461a      	mov	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a16      	ldr	r2, [pc, #88]	; (80065f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006598:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f003 031f 	and.w	r3, r3, #31
 80065a0:	2201      	movs	r2, #1
 80065a2:	409a      	lsls	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80065a8:	bf00      	nop
 80065aa:	3714      	adds	r7, #20
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr
 80065b4:	58025408 	.word	0x58025408
 80065b8:	5802541c 	.word	0x5802541c
 80065bc:	58025430 	.word	0x58025430
 80065c0:	58025444 	.word	0x58025444
 80065c4:	58025458 	.word	0x58025458
 80065c8:	5802546c 	.word	0x5802546c
 80065cc:	58025480 	.word	0x58025480
 80065d0:	58025494 	.word	0x58025494
 80065d4:	cccccccd 	.word	0xcccccccd
 80065d8:	16009600 	.word	0x16009600
 80065dc:	58025880 	.word	0x58025880
 80065e0:	aaaaaaab 	.word	0xaaaaaaab
 80065e4:	400204b8 	.word	0x400204b8
 80065e8:	4002040f 	.word	0x4002040f
 80065ec:	10008200 	.word	0x10008200
 80065f0:	40020880 	.word	0x40020880

080065f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	b2db      	uxtb	r3, r3
 8006602:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d04a      	beq.n	80066a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2b08      	cmp	r3, #8
 800660e:	d847      	bhi.n	80066a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a25      	ldr	r2, [pc, #148]	; (80066ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d022      	beq.n	8006660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a24      	ldr	r2, [pc, #144]	; (80066b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d01d      	beq.n	8006660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a22      	ldr	r2, [pc, #136]	; (80066b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d018      	beq.n	8006660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a21      	ldr	r2, [pc, #132]	; (80066b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d013      	beq.n	8006660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a1f      	ldr	r2, [pc, #124]	; (80066bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d00e      	beq.n	8006660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a1e      	ldr	r2, [pc, #120]	; (80066c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d009      	beq.n	8006660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a1c      	ldr	r2, [pc, #112]	; (80066c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d004      	beq.n	8006660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a1b      	ldr	r2, [pc, #108]	; (80066c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d101      	bne.n	8006664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006660:	2301      	movs	r3, #1
 8006662:	e000      	b.n	8006666 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006664:	2300      	movs	r3, #0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00a      	beq.n	8006680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	4b17      	ldr	r3, [pc, #92]	; (80066cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800666e:	4413      	add	r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	461a      	mov	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a15      	ldr	r2, [pc, #84]	; (80066d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800667c:	671a      	str	r2, [r3, #112]	; 0x70
 800667e:	e009      	b.n	8006694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	4b14      	ldr	r3, [pc, #80]	; (80066d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006684:	4413      	add	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	461a      	mov	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a11      	ldr	r2, [pc, #68]	; (80066d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006692:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	3b01      	subs	r3, #1
 8006698:	2201      	movs	r2, #1
 800669a:	409a      	lsls	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80066a0:	bf00      	nop
 80066a2:	3714      	adds	r7, #20
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr
 80066ac:	58025408 	.word	0x58025408
 80066b0:	5802541c 	.word	0x5802541c
 80066b4:	58025430 	.word	0x58025430
 80066b8:	58025444 	.word	0x58025444
 80066bc:	58025458 	.word	0x58025458
 80066c0:	5802546c 	.word	0x5802546c
 80066c4:	58025480 	.word	0x58025480
 80066c8:	58025494 	.word	0x58025494
 80066cc:	1600963f 	.word	0x1600963f
 80066d0:	58025940 	.word	0x58025940
 80066d4:	1000823f 	.word	0x1000823f
 80066d8:	40020940 	.word	0x40020940

080066dc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d101      	bne.n	80066ee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e0c6      	b.n	800687c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d102      	bne.n	80066fc <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f7fb f938 	bl	800196c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2223      	movs	r2, #35	; 0x23
 8006700:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006702:	4b60      	ldr	r3, [pc, #384]	; (8006884 <HAL_ETH_Init+0x1a8>)
 8006704:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006708:	4a5e      	ldr	r2, [pc, #376]	; (8006884 <HAL_ETH_Init+0x1a8>)
 800670a:	f043 0302 	orr.w	r3, r3, #2
 800670e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006712:	4b5c      	ldr	r3, [pc, #368]	; (8006884 <HAL_ETH_Init+0x1a8>)
 8006714:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006718:	f003 0302 	and.w	r3, r3, #2
 800671c:	60bb      	str	r3, [r7, #8]
 800671e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	7a1b      	ldrb	r3, [r3, #8]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d103      	bne.n	8006730 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8006728:	2000      	movs	r0, #0
 800672a:	f7fb fd63 	bl	80021f4 <HAL_SYSCFG_ETHInterfaceSelect>
 800672e:	e003      	b.n	8006738 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8006730:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006734:	f7fb fd5e 	bl	80021f4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f042 0201 	orr.w	r2, r2, #1
 800674a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800674e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006750:	f7fb fd16 	bl	8002180 <HAL_GetTick>
 8006754:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8006756:	e00f      	b.n	8006778 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8006758:	f7fb fd12 	bl	8002180 <HAL_GetTick>
 800675c:	4602      	mov	r2, r0
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006766:	d907      	bls.n	8006778 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2204      	movs	r2, #4
 800676c:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	22e0      	movs	r2, #224	; 0xe0
 8006772:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e081      	b.n	800687c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1e6      	bne.n	8006758 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 fac0 	bl	8006d10 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8006790:	f001 fe68 	bl	8008464 <HAL_RCC_GetHCLKFreq>
 8006794:	4602      	mov	r2, r0
 8006796:	4b3c      	ldr	r3, [pc, #240]	; (8006888 <HAL_ETH_Init+0x1ac>)
 8006798:	fba3 2302 	umull	r2, r3, r3, r2
 800679c:	0c9a      	lsrs	r2, r3, #18
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	3a01      	subs	r2, #1
 80067a4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 fa13 	bl	8006bd4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80067c4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80067c8:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	f003 0303 	and.w	r3, r3, #3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d007      	beq.n	80067e6 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	22e0      	movs	r2, #224	; 0xe0
 80067e0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e04a      	b.n	800687c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	f241 1308 	movw	r3, #4360	; 0x1108
 80067ee:	4413      	add	r3, r2
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	4b26      	ldr	r3, [pc, #152]	; (800688c <HAL_ETH_Init+0x1b0>)
 80067f4:	4013      	ands	r3, r2
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	6952      	ldr	r2, [r2, #20]
 80067fa:	0052      	lsls	r2, r2, #1
 80067fc:	6879      	ldr	r1, [r7, #4]
 80067fe:	6809      	ldr	r1, [r1, #0]
 8006800:	431a      	orrs	r2, r3
 8006802:	f241 1308 	movw	r3, #4360	; 0x1108
 8006806:	440b      	add	r3, r1
 8006808:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 fad8 	bl	8006dc0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fb1c 	bl	8006e4e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	3305      	adds	r3, #5
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	021a      	lsls	r2, r3, #8
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	3304      	adds	r3, #4
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	4619      	mov	r1, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	430a      	orrs	r2, r1
 8006830:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	3303      	adds	r3, #3
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	061a      	lsls	r2, r3, #24
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	3302      	adds	r3, #2
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	041b      	lsls	r3, r3, #16
 8006848:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	3301      	adds	r3, #1
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006854:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006862:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006864:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2210      	movs	r2, #16
 8006872:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2210      	movs	r2, #16
 8006878:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	58024400 	.word	0x58024400
 8006888:	431bde83 	.word	0x431bde83
 800688c:	ffff8001 	.word	0xffff8001

08006890 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006890:	b480      	push	{r7}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80068a2:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	791b      	ldrb	r3, [r3, #4]
 80068a8:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80068aa:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	7b1b      	ldrb	r3, [r3, #12]
 80068b0:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80068b2:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	7b5b      	ldrb	r3, [r3, #13]
 80068b8:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80068ba:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	7b9b      	ldrb	r3, [r3, #14]
 80068c0:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80068c2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	7bdb      	ldrb	r3, [r3, #15]
 80068c8:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80068ca:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80068cc:	683a      	ldr	r2, [r7, #0]
 80068ce:	7c12      	ldrb	r2, [r2, #16]
 80068d0:	2a00      	cmp	r2, #0
 80068d2:	d102      	bne.n	80068da <ETH_SetMACConfig+0x4a>
 80068d4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80068d8:	e000      	b.n	80068dc <ETH_SetMACConfig+0x4c>
 80068da:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80068dc:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80068de:	683a      	ldr	r2, [r7, #0]
 80068e0:	7c52      	ldrb	r2, [r2, #17]
 80068e2:	2a00      	cmp	r2, #0
 80068e4:	d102      	bne.n	80068ec <ETH_SetMACConfig+0x5c>
 80068e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80068ea:	e000      	b.n	80068ee <ETH_SetMACConfig+0x5e>
 80068ec:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80068ee:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	7c9b      	ldrb	r3, [r3, #18]
 80068f4:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80068f6:	431a      	orrs	r2, r3
                                macconf->Speed |
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80068fc:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8006902:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	7f1b      	ldrb	r3, [r3, #28]
 8006908:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800690a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	7f5b      	ldrb	r3, [r3, #29]
 8006910:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8006912:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8006914:	683a      	ldr	r2, [r7, #0]
 8006916:	7f92      	ldrb	r2, [r2, #30]
 8006918:	2a00      	cmp	r2, #0
 800691a:	d102      	bne.n	8006922 <ETH_SetMACConfig+0x92>
 800691c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006920:	e000      	b.n	8006924 <ETH_SetMACConfig+0x94>
 8006922:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8006924:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	7fdb      	ldrb	r3, [r3, #31]
 800692a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800692c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006934:	2a00      	cmp	r2, #0
 8006936:	d102      	bne.n	800693e <ETH_SetMACConfig+0xae>
 8006938:	f44f 7280 	mov.w	r2, #256	; 0x100
 800693c:	e000      	b.n	8006940 <ETH_SetMACConfig+0xb0>
 800693e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8006940:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8006946:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800694e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8006950:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8006956:	4313      	orrs	r3, r2
 8006958:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	4b56      	ldr	r3, [pc, #344]	; (8006abc <ETH_SetMACConfig+0x22c>)
 8006962:	4013      	ands	r3, r2
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	6812      	ldr	r2, [r2, #0]
 8006968:	68f9      	ldr	r1, [r7, #12]
 800696a:	430b      	orrs	r3, r1
 800696c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006972:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800697a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800697c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006984:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8006986:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800698e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8006990:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8006998:	2a00      	cmp	r2, #0
 800699a:	d102      	bne.n	80069a2 <ETH_SetMACConfig+0x112>
 800699c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80069a0:	e000      	b.n	80069a4 <ETH_SetMACConfig+0x114>
 80069a2:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80069a4:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80069aa:	4313      	orrs	r3, r2
 80069ac:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	4b42      	ldr	r3, [pc, #264]	; (8006ac0 <ETH_SetMACConfig+0x230>)
 80069b6:	4013      	ands	r3, r2
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	6812      	ldr	r2, [r2, #0]
 80069bc:	68f9      	ldr	r1, [r7, #12]
 80069be:	430b      	orrs	r3, r1
 80069c0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069c8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80069ce:	4313      	orrs	r3, r2
 80069d0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68da      	ldr	r2, [r3, #12]
 80069d8:	4b3a      	ldr	r3, [pc, #232]	; (8006ac4 <ETH_SetMACConfig+0x234>)
 80069da:	4013      	ands	r3, r2
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	6812      	ldr	r2, [r2, #0]
 80069e0:	68f9      	ldr	r1, [r7, #12]
 80069e2:	430b      	orrs	r3, r1
 80069e4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80069ec:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80069f2:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80069f4:	683a      	ldr	r2, [r7, #0]
 80069f6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80069fa:	2a00      	cmp	r2, #0
 80069fc:	d101      	bne.n	8006a02 <ETH_SetMACConfig+0x172>
 80069fe:	2280      	movs	r2, #128	; 0x80
 8006a00:	e000      	b.n	8006a04 <ETH_SetMACConfig+0x174>
 8006a02:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8006a04:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a0a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a16:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	6812      	ldr	r2, [r2, #0]
 8006a20:	68f9      	ldr	r1, [r7, #12]
 8006a22:	430b      	orrs	r3, r1
 8006a24:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006a2c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006a34:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006a36:	4313      	orrs	r3, r2
 8006a38:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a42:	f023 0103 	bic.w	r1, r3, #3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	430a      	orrs	r2, r1
 8006a4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8006a5a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	430a      	orrs	r2, r1
 8006a68:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006a70:	683a      	ldr	r2, [r7, #0]
 8006a72:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8006a76:	2a00      	cmp	r2, #0
 8006a78:	d101      	bne.n	8006a7e <ETH_SetMACConfig+0x1ee>
 8006a7a:	2240      	movs	r2, #64	; 0x40
 8006a7c:	e000      	b.n	8006a80 <ETH_SetMACConfig+0x1f0>
 8006a7e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8006a80:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006a88:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006a8a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006a92:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8006a94:	4313      	orrs	r3, r2
 8006a96:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006aa0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	430a      	orrs	r2, r1
 8006aac:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8006ab0:	bf00      	nop
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	00048083 	.word	0x00048083
 8006ac0:	c0f88000 	.word	0xc0f88000
 8006ac4:	fffffef0 	.word	0xfffffef0

08006ac8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	4b38      	ldr	r3, [pc, #224]	; (8006bc0 <ETH_SetDMAConfig+0xf8>)
 8006ade:	4013      	ands	r3, r2
 8006ae0:	683a      	ldr	r2, [r7, #0]
 8006ae2:	6812      	ldr	r2, [r2, #0]
 8006ae4:	6879      	ldr	r1, [r7, #4]
 8006ae6:	6809      	ldr	r1, [r1, #0]
 8006ae8:	431a      	orrs	r2, r3
 8006aea:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8006aee:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	791b      	ldrb	r3, [r3, #4]
 8006af4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006afa:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	7b1b      	ldrb	r3, [r3, #12]
 8006b00:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006b02:	4313      	orrs	r3, r2
 8006b04:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	f241 0304 	movw	r3, #4100	; 0x1004
 8006b0e:	4413      	add	r3, r2
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	4b2c      	ldr	r3, [pc, #176]	; (8006bc4 <ETH_SetDMAConfig+0xfc>)
 8006b14:	4013      	ands	r3, r2
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	6811      	ldr	r1, [r2, #0]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	431a      	orrs	r2, r3
 8006b1e:	f241 0304 	movw	r3, #4100	; 0x1004
 8006b22:	440b      	add	r3, r1
 8006b24:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	7b5b      	ldrb	r3, [r3, #13]
 8006b2a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006b30:	4313      	orrs	r3, r2
 8006b32:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	4b22      	ldr	r3, [pc, #136]	; (8006bc8 <ETH_SetDMAConfig+0x100>)
 8006b40:	4013      	ands	r3, r2
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	6811      	ldr	r1, [r2, #0]
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	431a      	orrs	r2, r3
 8006b4a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8006b4e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	7d1b      	ldrb	r3, [r3, #20]
 8006b58:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8006b5a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	7f5b      	ldrb	r3, [r3, #29]
 8006b60:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8006b62:	4313      	orrs	r3, r2
 8006b64:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	f241 1304 	movw	r3, #4356	; 0x1104
 8006b6e:	4413      	add	r3, r2
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	4b16      	ldr	r3, [pc, #88]	; (8006bcc <ETH_SetDMAConfig+0x104>)
 8006b74:	4013      	ands	r3, r2
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	6811      	ldr	r1, [r2, #0]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	431a      	orrs	r2, r3
 8006b7e:	f241 1304 	movw	r3, #4356	; 0x1104
 8006b82:	440b      	add	r3, r1
 8006b84:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	7f1b      	ldrb	r3, [r3, #28]
 8006b8a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006b90:	4313      	orrs	r3, r2
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	f241 1308 	movw	r3, #4360	; 0x1108
 8006b9c:	4413      	add	r3, r2
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	4b0b      	ldr	r3, [pc, #44]	; (8006bd0 <ETH_SetDMAConfig+0x108>)
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	6811      	ldr	r1, [r2, #0]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	431a      	orrs	r2, r3
 8006bac:	f241 1308 	movw	r3, #4360	; 0x1108
 8006bb0:	440b      	add	r3, r1
 8006bb2:	601a      	str	r2, [r3, #0]
}
 8006bb4:	bf00      	nop
 8006bb6:	3714      	adds	r7, #20
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	ffff87fd 	.word	0xffff87fd
 8006bc4:	ffff2ffe 	.word	0xffff2ffe
 8006bc8:	fffec000 	.word	0xfffec000
 8006bcc:	ffc0efef 	.word	0xffc0efef
 8006bd0:	7fc0ffff 	.word	0x7fc0ffff

08006bd4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b0a4      	sub	sp, #144	; 0x90
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8006be2:	2300      	movs	r3, #0
 8006be4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8006be6:	2300      	movs	r3, #0
 8006be8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006bec:	2300      	movs	r3, #0
 8006bee:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8006c04:	2300      	movs	r3, #0
 8006c06:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8006c10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006c14:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8006c16:	2300      	movs	r3, #0
 8006c18:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8006c20:	2300      	movs	r3, #0
 8006c22:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8006c26:	2300      	movs	r3, #0
 8006c28:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8006c2c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8006c30:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8006c32:	2300      	movs	r3, #0
 8006c34:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8006c42:	2300      	movs	r3, #0
 8006c44:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8006c52:	2300      	movs	r3, #0
 8006c54:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8006c56:	2300      	movs	r3, #0
 8006c58:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006c60:	2300      	movs	r3, #0
 8006c62:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8006c66:	2301      	movs	r3, #1
 8006c68:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8006c6c:	2320      	movs	r3, #32
 8006c6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8006c72:	2301      	movs	r3, #1
 8006c74:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8006c7e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8006c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006c84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006c88:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8006c90:	2302      	movs	r3, #2
 8006c92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8006c96:	2300      	movs	r3, #0
 8006c98:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006cb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7ff fde6 	bl	8006890 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006cde:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006ce2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006ce8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006cec:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8006cf4:	f44f 7306 	mov.w	r3, #536	; 0x218
 8006cf8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006cfa:	f107 0308 	add.w	r3, r7, #8
 8006cfe:	4619      	mov	r1, r3
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f7ff fee1 	bl	8006ac8 <ETH_SetDMAConfig>
}
 8006d06:	bf00      	nop
 8006d08:	3790      	adds	r7, #144	; 0x90
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
	...

08006d10 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006d20:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006d28:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8006d2a:	f001 fb9b 	bl	8008464 <HAL_RCC_GetHCLKFreq>
 8006d2e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	4a1e      	ldr	r2, [pc, #120]	; (8006dac <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d908      	bls.n	8006d4a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	4a1d      	ldr	r2, [pc, #116]	; (8006db0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d804      	bhi.n	8006d4a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d46:	60fb      	str	r3, [r7, #12]
 8006d48:	e027      	b.n	8006d9a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	4a18      	ldr	r2, [pc, #96]	; (8006db0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d908      	bls.n	8006d64 <ETH_MAC_MDIO_ClkConfig+0x54>
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	4a17      	ldr	r2, [pc, #92]	; (8006db4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d804      	bhi.n	8006d64 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006d60:	60fb      	str	r3, [r7, #12]
 8006d62:	e01a      	b.n	8006d9a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	4a13      	ldr	r2, [pc, #76]	; (8006db4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d903      	bls.n	8006d74 <ETH_MAC_MDIO_ClkConfig+0x64>
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	4a12      	ldr	r2, [pc, #72]	; (8006db8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d911      	bls.n	8006d98 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	4a10      	ldr	r2, [pc, #64]	; (8006db8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d908      	bls.n	8006d8e <ETH_MAC_MDIO_ClkConfig+0x7e>
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	4a0f      	ldr	r2, [pc, #60]	; (8006dbc <ETH_MAC_MDIO_ClkConfig+0xac>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d804      	bhi.n	8006d8e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d8a:	60fb      	str	r3, [r7, #12]
 8006d8c:	e005      	b.n	8006d9a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d94:	60fb      	str	r3, [r7, #12]
 8006d96:	e000      	b.n	8006d9a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8006d98:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8006da4:	bf00      	nop
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	01312cff 	.word	0x01312cff
 8006db0:	02160ebf 	.word	0x02160ebf
 8006db4:	039386ff 	.word	0x039386ff
 8006db8:	05f5e0ff 	.word	0x05f5e0ff
 8006dbc:	08f0d17f 	.word	0x08f0d17f

08006dc0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006dc8:	2300      	movs	r3, #0
 8006dca:	60fb      	str	r3, [r7, #12]
 8006dcc:	e01d      	b.n	8006e0a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	68d9      	ldr	r1, [r3, #12]
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	005b      	lsls	r3, r3, #1
 8006dd8:	4413      	add	r3, r2
 8006dda:	00db      	lsls	r3, r3, #3
 8006ddc:	440b      	add	r3, r1
 8006dde:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	2200      	movs	r2, #0
 8006de4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	2200      	movs	r2, #0
 8006dea:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	2200      	movs	r2, #0
 8006df0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	2200      	movs	r2, #0
 8006df6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006df8:	68b9      	ldr	r1, [r7, #8]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	3206      	adds	r2, #6
 8006e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	3301      	adds	r3, #1
 8006e08:	60fb      	str	r3, [r7, #12]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2b03      	cmp	r3, #3
 8006e0e:	d9de      	bls.n	8006dce <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	f241 132c 	movw	r3, #4396	; 0x112c
 8006e1e:	4413      	add	r3, r2
 8006e20:	2203      	movs	r2, #3
 8006e22:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	68d9      	ldr	r1, [r3, #12]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	f241 1314 	movw	r3, #4372	; 0x1114
 8006e30:	4413      	add	r3, r2
 8006e32:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	68da      	ldr	r2, [r3, #12]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8006e40:	601a      	str	r2, [r3, #0]
}
 8006e42:	bf00      	nop
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b085      	sub	sp, #20
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006e56:	2300      	movs	r3, #0
 8006e58:	60fb      	str	r3, [r7, #12]
 8006e5a:	e024      	b.n	8006ea6 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6919      	ldr	r1, [r3, #16]
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	4613      	mov	r3, r2
 8006e64:	005b      	lsls	r3, r3, #1
 8006e66:	4413      	add	r3, r2
 8006e68:	00db      	lsls	r3, r3, #3
 8006e6a:	440b      	add	r3, r1
 8006e6c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	2200      	movs	r2, #0
 8006e72:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	2200      	movs	r2, #0
 8006e78:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	2200      	movs	r2, #0
 8006e84:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006e92:	68ba      	ldr	r2, [r7, #8]
 8006e94:	6879      	ldr	r1, [r7, #4]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	330a      	adds	r3, #10
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	440b      	add	r3, r1
 8006e9e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	60fb      	str	r3, [r7, #12]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2b03      	cmp	r3, #3
 8006eaa:	d9d7      	bls.n	8006e5c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	f241 1330 	movw	r3, #4400	; 0x1130
 8006ed2:	4413      	add	r3, r2
 8006ed4:	2203      	movs	r2, #3
 8006ed6:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6919      	ldr	r1, [r3, #16]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	f241 131c 	movw	r3, #4380	; 0x111c
 8006ee4:	4413      	add	r3, r2
 8006ee6:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	f241 1328 	movw	r3, #4392	; 0x1128
 8006ef8:	4413      	add	r3, r2
 8006efa:	6019      	str	r1, [r3, #0]
}
 8006efc:	bf00      	nop
 8006efe:	3714      	adds	r7, #20
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b089      	sub	sp, #36	; 0x24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006f12:	2300      	movs	r3, #0
 8006f14:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006f16:	4b89      	ldr	r3, [pc, #548]	; (800713c <HAL_GPIO_Init+0x234>)
 8006f18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006f1a:	e194      	b.n	8007246 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	2101      	movs	r1, #1
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	fa01 f303 	lsl.w	r3, r1, r3
 8006f28:	4013      	ands	r3, r2
 8006f2a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f000 8186 	beq.w	8007240 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d00b      	beq.n	8006f54 <HAL_GPIO_Init+0x4c>
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d007      	beq.n	8006f54 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006f48:	2b11      	cmp	r3, #17
 8006f4a:	d003      	beq.n	8006f54 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	2b12      	cmp	r3, #18
 8006f52:	d130      	bne.n	8006fb6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	005b      	lsls	r3, r3, #1
 8006f5e:	2203      	movs	r2, #3
 8006f60:	fa02 f303 	lsl.w	r3, r2, r3
 8006f64:	43db      	mvns	r3, r3
 8006f66:	69ba      	ldr	r2, [r7, #24]
 8006f68:	4013      	ands	r3, r2
 8006f6a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	68da      	ldr	r2, [r3, #12]
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	005b      	lsls	r3, r3, #1
 8006f74:	fa02 f303 	lsl.w	r3, r2, r3
 8006f78:	69ba      	ldr	r2, [r7, #24]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	69ba      	ldr	r2, [r7, #24]
 8006f82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f92:	43db      	mvns	r3, r3
 8006f94:	69ba      	ldr	r2, [r7, #24]
 8006f96:	4013      	ands	r3, r2
 8006f98:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	091b      	lsrs	r3, r3, #4
 8006fa0:	f003 0201 	and.w	r2, r3, #1
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8006faa:	69ba      	ldr	r2, [r7, #24]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	69ba      	ldr	r2, [r7, #24]
 8006fb4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	005b      	lsls	r3, r3, #1
 8006fc0:	2203      	movs	r2, #3
 8006fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc6:	43db      	mvns	r3, r3
 8006fc8:	69ba      	ldr	r2, [r7, #24]
 8006fca:	4013      	ands	r3, r2
 8006fcc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	689a      	ldr	r2, [r3, #8]
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	005b      	lsls	r3, r3, #1
 8006fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fda:	69ba      	ldr	r2, [r7, #24]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	69ba      	ldr	r2, [r7, #24]
 8006fe4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d003      	beq.n	8006ff6 <HAL_GPIO_Init+0xee>
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	2b12      	cmp	r3, #18
 8006ff4:	d123      	bne.n	800703e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	08da      	lsrs	r2, r3, #3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	3208      	adds	r2, #8
 8006ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	f003 0307 	and.w	r3, r3, #7
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	220f      	movs	r2, #15
 800700e:	fa02 f303 	lsl.w	r3, r2, r3
 8007012:	43db      	mvns	r3, r3
 8007014:	69ba      	ldr	r2, [r7, #24]
 8007016:	4013      	ands	r3, r2
 8007018:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	691a      	ldr	r2, [r3, #16]
 800701e:	69fb      	ldr	r3, [r7, #28]
 8007020:	f003 0307 	and.w	r3, r3, #7
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	fa02 f303 	lsl.w	r3, r2, r3
 800702a:	69ba      	ldr	r2, [r7, #24]
 800702c:	4313      	orrs	r3, r2
 800702e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	08da      	lsrs	r2, r3, #3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	3208      	adds	r2, #8
 8007038:	69b9      	ldr	r1, [r7, #24]
 800703a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	005b      	lsls	r3, r3, #1
 8007048:	2203      	movs	r2, #3
 800704a:	fa02 f303 	lsl.w	r3, r2, r3
 800704e:	43db      	mvns	r3, r3
 8007050:	69ba      	ldr	r2, [r7, #24]
 8007052:	4013      	ands	r3, r2
 8007054:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	f003 0203 	and.w	r2, r3, #3
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	005b      	lsls	r3, r3, #1
 8007062:	fa02 f303 	lsl.w	r3, r2, r3
 8007066:	69ba      	ldr	r2, [r7, #24]
 8007068:	4313      	orrs	r3, r2
 800706a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	69ba      	ldr	r2, [r7, #24]
 8007070:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800707a:	2b00      	cmp	r3, #0
 800707c:	f000 80e0 	beq.w	8007240 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007080:	4b2f      	ldr	r3, [pc, #188]	; (8007140 <HAL_GPIO_Init+0x238>)
 8007082:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007086:	4a2e      	ldr	r2, [pc, #184]	; (8007140 <HAL_GPIO_Init+0x238>)
 8007088:	f043 0302 	orr.w	r3, r3, #2
 800708c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007090:	4b2b      	ldr	r3, [pc, #172]	; (8007140 <HAL_GPIO_Init+0x238>)
 8007092:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007096:	f003 0302 	and.w	r3, r3, #2
 800709a:	60fb      	str	r3, [r7, #12]
 800709c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800709e:	4a29      	ldr	r2, [pc, #164]	; (8007144 <HAL_GPIO_Init+0x23c>)
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	089b      	lsrs	r3, r3, #2
 80070a4:	3302      	adds	r3, #2
 80070a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	f003 0303 	and.w	r3, r3, #3
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	220f      	movs	r2, #15
 80070b6:	fa02 f303 	lsl.w	r3, r2, r3
 80070ba:	43db      	mvns	r3, r3
 80070bc:	69ba      	ldr	r2, [r7, #24]
 80070be:	4013      	ands	r3, r2
 80070c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a20      	ldr	r2, [pc, #128]	; (8007148 <HAL_GPIO_Init+0x240>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d052      	beq.n	8007170 <HAL_GPIO_Init+0x268>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a1f      	ldr	r2, [pc, #124]	; (800714c <HAL_GPIO_Init+0x244>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d031      	beq.n	8007136 <HAL_GPIO_Init+0x22e>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a1e      	ldr	r2, [pc, #120]	; (8007150 <HAL_GPIO_Init+0x248>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d02b      	beq.n	8007132 <HAL_GPIO_Init+0x22a>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a1d      	ldr	r2, [pc, #116]	; (8007154 <HAL_GPIO_Init+0x24c>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d025      	beq.n	800712e <HAL_GPIO_Init+0x226>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a1c      	ldr	r2, [pc, #112]	; (8007158 <HAL_GPIO_Init+0x250>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d01f      	beq.n	800712a <HAL_GPIO_Init+0x222>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a1b      	ldr	r2, [pc, #108]	; (800715c <HAL_GPIO_Init+0x254>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d019      	beq.n	8007126 <HAL_GPIO_Init+0x21e>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a1a      	ldr	r2, [pc, #104]	; (8007160 <HAL_GPIO_Init+0x258>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d013      	beq.n	8007122 <HAL_GPIO_Init+0x21a>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a19      	ldr	r2, [pc, #100]	; (8007164 <HAL_GPIO_Init+0x25c>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d00d      	beq.n	800711e <HAL_GPIO_Init+0x216>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a18      	ldr	r2, [pc, #96]	; (8007168 <HAL_GPIO_Init+0x260>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d007      	beq.n	800711a <HAL_GPIO_Init+0x212>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a17      	ldr	r2, [pc, #92]	; (800716c <HAL_GPIO_Init+0x264>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d101      	bne.n	8007116 <HAL_GPIO_Init+0x20e>
 8007112:	2309      	movs	r3, #9
 8007114:	e02d      	b.n	8007172 <HAL_GPIO_Init+0x26a>
 8007116:	230a      	movs	r3, #10
 8007118:	e02b      	b.n	8007172 <HAL_GPIO_Init+0x26a>
 800711a:	2308      	movs	r3, #8
 800711c:	e029      	b.n	8007172 <HAL_GPIO_Init+0x26a>
 800711e:	2307      	movs	r3, #7
 8007120:	e027      	b.n	8007172 <HAL_GPIO_Init+0x26a>
 8007122:	2306      	movs	r3, #6
 8007124:	e025      	b.n	8007172 <HAL_GPIO_Init+0x26a>
 8007126:	2305      	movs	r3, #5
 8007128:	e023      	b.n	8007172 <HAL_GPIO_Init+0x26a>
 800712a:	2304      	movs	r3, #4
 800712c:	e021      	b.n	8007172 <HAL_GPIO_Init+0x26a>
 800712e:	2303      	movs	r3, #3
 8007130:	e01f      	b.n	8007172 <HAL_GPIO_Init+0x26a>
 8007132:	2302      	movs	r3, #2
 8007134:	e01d      	b.n	8007172 <HAL_GPIO_Init+0x26a>
 8007136:	2301      	movs	r3, #1
 8007138:	e01b      	b.n	8007172 <HAL_GPIO_Init+0x26a>
 800713a:	bf00      	nop
 800713c:	58000080 	.word	0x58000080
 8007140:	58024400 	.word	0x58024400
 8007144:	58000400 	.word	0x58000400
 8007148:	58020000 	.word	0x58020000
 800714c:	58020400 	.word	0x58020400
 8007150:	58020800 	.word	0x58020800
 8007154:	58020c00 	.word	0x58020c00
 8007158:	58021000 	.word	0x58021000
 800715c:	58021400 	.word	0x58021400
 8007160:	58021800 	.word	0x58021800
 8007164:	58021c00 	.word	0x58021c00
 8007168:	58022000 	.word	0x58022000
 800716c:	58022400 	.word	0x58022400
 8007170:	2300      	movs	r3, #0
 8007172:	69fa      	ldr	r2, [r7, #28]
 8007174:	f002 0203 	and.w	r2, r2, #3
 8007178:	0092      	lsls	r2, r2, #2
 800717a:	4093      	lsls	r3, r2
 800717c:	69ba      	ldr	r2, [r7, #24]
 800717e:	4313      	orrs	r3, r2
 8007180:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007182:	4938      	ldr	r1, [pc, #224]	; (8007264 <HAL_GPIO_Init+0x35c>)
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	089b      	lsrs	r3, r3, #2
 8007188:	3302      	adds	r3, #2
 800718a:	69ba      	ldr	r2, [r7, #24]
 800718c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	43db      	mvns	r3, r3
 800719a:	69ba      	ldr	r2, [r7, #24]
 800719c:	4013      	ands	r3, r2
 800719e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d003      	beq.n	80071b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80071ac:	69ba      	ldr	r2, [r7, #24]
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	69ba      	ldr	r2, [r7, #24]
 80071b8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	43db      	mvns	r3, r3
 80071c4:	69ba      	ldr	r2, [r7, #24]
 80071c6:	4013      	ands	r3, r2
 80071c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d003      	beq.n	80071de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80071d6:	69ba      	ldr	r2, [r7, #24]
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	4313      	orrs	r3, r2
 80071dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	69ba      	ldr	r2, [r7, #24]
 80071e2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80071e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	43db      	mvns	r3, r3
 80071f0:	69ba      	ldr	r2, [r7, #24]
 80071f2:	4013      	ands	r3, r2
 80071f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d003      	beq.n	800720a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8007202:	69ba      	ldr	r2, [r7, #24]
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	4313      	orrs	r3, r2
 8007208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800720a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	43db      	mvns	r3, r3
 800721e:	69ba      	ldr	r2, [r7, #24]
 8007220:	4013      	ands	r3, r2
 8007222:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800722c:	2b00      	cmp	r3, #0
 800722e:	d003      	beq.n	8007238 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8007230:	69ba      	ldr	r2, [r7, #24]
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	4313      	orrs	r3, r2
 8007236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007238:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	3301      	adds	r3, #1
 8007244:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	fa22 f303 	lsr.w	r3, r2, r3
 8007250:	2b00      	cmp	r3, #0
 8007252:	f47f ae63 	bne.w	8006f1c <HAL_GPIO_Init+0x14>
  }
}
 8007256:	bf00      	nop
 8007258:	3724      	adds	r7, #36	; 0x24
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	58000400 	.word	0x58000400

08007268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	460b      	mov	r3, r1
 8007272:	807b      	strh	r3, [r7, #2]
 8007274:	4613      	mov	r3, r2
 8007276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007278:	787b      	ldrb	r3, [r7, #1]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d003      	beq.n	8007286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800727e:	887a      	ldrh	r2, [r7, #2]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007284:	e003      	b.n	800728e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007286:	887b      	ldrh	r3, [r7, #2]
 8007288:	041a      	lsls	r2, r3, #16
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	619a      	str	r2, [r3, #24]
}
 800728e:	bf00      	nop
 8007290:	370c      	adds	r7, #12
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr

0800729a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b082      	sub	sp, #8
 800729e:	af00      	add	r7, sp, #0
 80072a0:	4603      	mov	r3, r0
 80072a2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80072a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80072ac:	88fb      	ldrh	r3, [r7, #6]
 80072ae:	4013      	ands	r3, r2
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d008      	beq.n	80072c6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80072b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072b8:	88fb      	ldrh	r3, [r7, #6]
 80072ba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80072be:	88fb      	ldrh	r3, [r7, #6]
 80072c0:	4618      	mov	r0, r3
 80072c2:	f7fa f9c3 	bl	800164c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80072c6:	bf00      	nop
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80072ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072d0:	b08f      	sub	sp, #60	; 0x3c
 80072d2:	af0a      	add	r7, sp, #40	; 0x28
 80072d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d101      	bne.n	80072e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e116      	b.n	800750e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d106      	bne.n	8007300 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f7fa fcaa 	bl	8001c54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2203      	movs	r2, #3
 8007304:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800730c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007310:	2b00      	cmp	r3, #0
 8007312:	d102      	bne.n	800731a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4618      	mov	r0, r3
 8007320:	f004 ff2c 	bl	800c17c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	603b      	str	r3, [r7, #0]
 800732a:	687e      	ldr	r6, [r7, #4]
 800732c:	466d      	mov	r5, sp
 800732e:	f106 0410 	add.w	r4, r6, #16
 8007332:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007334:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007336:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007338:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800733a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800733e:	e885 0003 	stmia.w	r5, {r0, r1}
 8007342:	1d33      	adds	r3, r6, #4
 8007344:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007346:	6838      	ldr	r0, [r7, #0]
 8007348:	f004 feb6 	bl	800c0b8 <USB_CoreInit>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d005      	beq.n	800735e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2202      	movs	r2, #2
 8007356:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e0d7      	b.n	800750e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2100      	movs	r1, #0
 8007364:	4618      	mov	r0, r3
 8007366:	f004 ff1a 	bl	800c19e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800736a:	2300      	movs	r3, #0
 800736c:	73fb      	strb	r3, [r7, #15]
 800736e:	e04a      	b.n	8007406 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007370:	7bfa      	ldrb	r2, [r7, #15]
 8007372:	6879      	ldr	r1, [r7, #4]
 8007374:	4613      	mov	r3, r2
 8007376:	00db      	lsls	r3, r3, #3
 8007378:	1a9b      	subs	r3, r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	440b      	add	r3, r1
 800737e:	333d      	adds	r3, #61	; 0x3d
 8007380:	2201      	movs	r2, #1
 8007382:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007384:	7bfa      	ldrb	r2, [r7, #15]
 8007386:	6879      	ldr	r1, [r7, #4]
 8007388:	4613      	mov	r3, r2
 800738a:	00db      	lsls	r3, r3, #3
 800738c:	1a9b      	subs	r3, r3, r2
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	440b      	add	r3, r1
 8007392:	333c      	adds	r3, #60	; 0x3c
 8007394:	7bfa      	ldrb	r2, [r7, #15]
 8007396:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007398:	7bfa      	ldrb	r2, [r7, #15]
 800739a:	7bfb      	ldrb	r3, [r7, #15]
 800739c:	b298      	uxth	r0, r3
 800739e:	6879      	ldr	r1, [r7, #4]
 80073a0:	4613      	mov	r3, r2
 80073a2:	00db      	lsls	r3, r3, #3
 80073a4:	1a9b      	subs	r3, r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	440b      	add	r3, r1
 80073aa:	3342      	adds	r3, #66	; 0x42
 80073ac:	4602      	mov	r2, r0
 80073ae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80073b0:	7bfa      	ldrb	r2, [r7, #15]
 80073b2:	6879      	ldr	r1, [r7, #4]
 80073b4:	4613      	mov	r3, r2
 80073b6:	00db      	lsls	r3, r3, #3
 80073b8:	1a9b      	subs	r3, r3, r2
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	440b      	add	r3, r1
 80073be:	333f      	adds	r3, #63	; 0x3f
 80073c0:	2200      	movs	r2, #0
 80073c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80073c4:	7bfa      	ldrb	r2, [r7, #15]
 80073c6:	6879      	ldr	r1, [r7, #4]
 80073c8:	4613      	mov	r3, r2
 80073ca:	00db      	lsls	r3, r3, #3
 80073cc:	1a9b      	subs	r3, r3, r2
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	440b      	add	r3, r1
 80073d2:	3344      	adds	r3, #68	; 0x44
 80073d4:	2200      	movs	r2, #0
 80073d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80073d8:	7bfa      	ldrb	r2, [r7, #15]
 80073da:	6879      	ldr	r1, [r7, #4]
 80073dc:	4613      	mov	r3, r2
 80073de:	00db      	lsls	r3, r3, #3
 80073e0:	1a9b      	subs	r3, r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	440b      	add	r3, r1
 80073e6:	3348      	adds	r3, #72	; 0x48
 80073e8:	2200      	movs	r2, #0
 80073ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80073ec:	7bfa      	ldrb	r2, [r7, #15]
 80073ee:	6879      	ldr	r1, [r7, #4]
 80073f0:	4613      	mov	r3, r2
 80073f2:	00db      	lsls	r3, r3, #3
 80073f4:	1a9b      	subs	r3, r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	440b      	add	r3, r1
 80073fa:	3350      	adds	r3, #80	; 0x50
 80073fc:	2200      	movs	r2, #0
 80073fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007400:	7bfb      	ldrb	r3, [r7, #15]
 8007402:	3301      	adds	r3, #1
 8007404:	73fb      	strb	r3, [r7, #15]
 8007406:	7bfa      	ldrb	r2, [r7, #15]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	429a      	cmp	r2, r3
 800740e:	d3af      	bcc.n	8007370 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007410:	2300      	movs	r3, #0
 8007412:	73fb      	strb	r3, [r7, #15]
 8007414:	e044      	b.n	80074a0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007416:	7bfa      	ldrb	r2, [r7, #15]
 8007418:	6879      	ldr	r1, [r7, #4]
 800741a:	4613      	mov	r3, r2
 800741c:	00db      	lsls	r3, r3, #3
 800741e:	1a9b      	subs	r3, r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	440b      	add	r3, r1
 8007424:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8007428:	2200      	movs	r2, #0
 800742a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800742c:	7bfa      	ldrb	r2, [r7, #15]
 800742e:	6879      	ldr	r1, [r7, #4]
 8007430:	4613      	mov	r3, r2
 8007432:	00db      	lsls	r3, r3, #3
 8007434:	1a9b      	subs	r3, r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	440b      	add	r3, r1
 800743a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800743e:	7bfa      	ldrb	r2, [r7, #15]
 8007440:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007442:	7bfa      	ldrb	r2, [r7, #15]
 8007444:	6879      	ldr	r1, [r7, #4]
 8007446:	4613      	mov	r3, r2
 8007448:	00db      	lsls	r3, r3, #3
 800744a:	1a9b      	subs	r3, r3, r2
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	440b      	add	r3, r1
 8007450:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007454:	2200      	movs	r2, #0
 8007456:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007458:	7bfa      	ldrb	r2, [r7, #15]
 800745a:	6879      	ldr	r1, [r7, #4]
 800745c:	4613      	mov	r3, r2
 800745e:	00db      	lsls	r3, r3, #3
 8007460:	1a9b      	subs	r3, r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	440b      	add	r3, r1
 8007466:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800746a:	2200      	movs	r2, #0
 800746c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800746e:	7bfa      	ldrb	r2, [r7, #15]
 8007470:	6879      	ldr	r1, [r7, #4]
 8007472:	4613      	mov	r3, r2
 8007474:	00db      	lsls	r3, r3, #3
 8007476:	1a9b      	subs	r3, r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	440b      	add	r3, r1
 800747c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007480:	2200      	movs	r2, #0
 8007482:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007484:	7bfa      	ldrb	r2, [r7, #15]
 8007486:	6879      	ldr	r1, [r7, #4]
 8007488:	4613      	mov	r3, r2
 800748a:	00db      	lsls	r3, r3, #3
 800748c:	1a9b      	subs	r3, r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	440b      	add	r3, r1
 8007492:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007496:	2200      	movs	r2, #0
 8007498:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800749a:	7bfb      	ldrb	r3, [r7, #15]
 800749c:	3301      	adds	r3, #1
 800749e:	73fb      	strb	r3, [r7, #15]
 80074a0:	7bfa      	ldrb	r2, [r7, #15]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d3b5      	bcc.n	8007416 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	603b      	str	r3, [r7, #0]
 80074b0:	687e      	ldr	r6, [r7, #4]
 80074b2:	466d      	mov	r5, sp
 80074b4:	f106 0410 	add.w	r4, r6, #16
 80074b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80074ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80074bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80074be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80074c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80074c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80074c8:	1d33      	adds	r3, r6, #4
 80074ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80074cc:	6838      	ldr	r0, [r7, #0]
 80074ce:	f004 fe91 	bl	800c1f4 <USB_DevInit>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d005      	beq.n	80074e4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2202      	movs	r2, #2
 80074dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e014      	b.n	800750e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d102      	bne.n	8007502 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f80b 	bl	8007518 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4618      	mov	r0, r3
 8007508:	f005 f833 	bl	800c572 <USB_DevDisconnect>

  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3714      	adds	r7, #20
 8007512:	46bd      	mov	sp, r7
 8007514:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007518 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	699b      	ldr	r3, [r3, #24]
 800753a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007546:	4b05      	ldr	r3, [pc, #20]	; (800755c <HAL_PCDEx_ActivateLPM+0x44>)
 8007548:	4313      	orrs	r3, r2
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3714      	adds	r7, #20
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr
 800755c:	10000003 	.word	0x10000003

08007560 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007568:	4b19      	ldr	r3, [pc, #100]	; (80075d0 <HAL_PWREx_ConfigSupply+0x70>)
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	f003 0304 	and.w	r3, r3, #4
 8007570:	2b04      	cmp	r3, #4
 8007572:	d00a      	beq.n	800758a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007574:	4b16      	ldr	r3, [pc, #88]	; (80075d0 <HAL_PWREx_ConfigSupply+0x70>)
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	f003 0307 	and.w	r3, r3, #7
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	429a      	cmp	r2, r3
 8007580:	d001      	beq.n	8007586 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e01f      	b.n	80075c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007586:	2300      	movs	r3, #0
 8007588:	e01d      	b.n	80075c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800758a:	4b11      	ldr	r3, [pc, #68]	; (80075d0 <HAL_PWREx_ConfigSupply+0x70>)
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	f023 0207 	bic.w	r2, r3, #7
 8007592:	490f      	ldr	r1, [pc, #60]	; (80075d0 <HAL_PWREx_ConfigSupply+0x70>)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4313      	orrs	r3, r2
 8007598:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800759a:	f7fa fdf1 	bl	8002180 <HAL_GetTick>
 800759e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80075a0:	e009      	b.n	80075b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80075a2:	f7fa fded 	bl	8002180 <HAL_GetTick>
 80075a6:	4602      	mov	r2, r0
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075b0:	d901      	bls.n	80075b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e007      	b.n	80075c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80075b6:	4b06      	ldr	r3, [pc, #24]	; (80075d0 <HAL_PWREx_ConfigSupply+0x70>)
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075c2:	d1ee      	bne.n	80075a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	58024800 	.word	0x58024800

080075d4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80075d4:	b480      	push	{r7}
 80075d6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80075d8:	4b05      	ldr	r3, [pc, #20]	; (80075f0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	4a04      	ldr	r2, [pc, #16]	; (80075f0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80075de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075e2:	60d3      	str	r3, [r2, #12]
}
 80075e4:	bf00      	nop
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	58024800 	.word	0x58024800

080075f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b08c      	sub	sp, #48	; 0x30
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d101      	bne.n	8007606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e3ff      	b.n	8007e06 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 0301 	and.w	r3, r3, #1
 800760e:	2b00      	cmp	r3, #0
 8007610:	f000 8087 	beq.w	8007722 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007614:	4b99      	ldr	r3, [pc, #612]	; (800787c <HAL_RCC_OscConfig+0x288>)
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800761c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800761e:	4b97      	ldr	r3, [pc, #604]	; (800787c <HAL_RCC_OscConfig+0x288>)
 8007620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007622:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007626:	2b10      	cmp	r3, #16
 8007628:	d007      	beq.n	800763a <HAL_RCC_OscConfig+0x46>
 800762a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800762c:	2b18      	cmp	r3, #24
 800762e:	d110      	bne.n	8007652 <HAL_RCC_OscConfig+0x5e>
 8007630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007632:	f003 0303 	and.w	r3, r3, #3
 8007636:	2b02      	cmp	r3, #2
 8007638:	d10b      	bne.n	8007652 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800763a:	4b90      	ldr	r3, [pc, #576]	; (800787c <HAL_RCC_OscConfig+0x288>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d06c      	beq.n	8007720 <HAL_RCC_OscConfig+0x12c>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d168      	bne.n	8007720 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e3d9      	b.n	8007e06 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800765a:	d106      	bne.n	800766a <HAL_RCC_OscConfig+0x76>
 800765c:	4b87      	ldr	r3, [pc, #540]	; (800787c <HAL_RCC_OscConfig+0x288>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a86      	ldr	r2, [pc, #536]	; (800787c <HAL_RCC_OscConfig+0x288>)
 8007662:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007666:	6013      	str	r3, [r2, #0]
 8007668:	e02e      	b.n	80076c8 <HAL_RCC_OscConfig+0xd4>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10c      	bne.n	800768c <HAL_RCC_OscConfig+0x98>
 8007672:	4b82      	ldr	r3, [pc, #520]	; (800787c <HAL_RCC_OscConfig+0x288>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a81      	ldr	r2, [pc, #516]	; (800787c <HAL_RCC_OscConfig+0x288>)
 8007678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800767c:	6013      	str	r3, [r2, #0]
 800767e:	4b7f      	ldr	r3, [pc, #508]	; (800787c <HAL_RCC_OscConfig+0x288>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a7e      	ldr	r2, [pc, #504]	; (800787c <HAL_RCC_OscConfig+0x288>)
 8007684:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007688:	6013      	str	r3, [r2, #0]
 800768a:	e01d      	b.n	80076c8 <HAL_RCC_OscConfig+0xd4>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007694:	d10c      	bne.n	80076b0 <HAL_RCC_OscConfig+0xbc>
 8007696:	4b79      	ldr	r3, [pc, #484]	; (800787c <HAL_RCC_OscConfig+0x288>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a78      	ldr	r2, [pc, #480]	; (800787c <HAL_RCC_OscConfig+0x288>)
 800769c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076a0:	6013      	str	r3, [r2, #0]
 80076a2:	4b76      	ldr	r3, [pc, #472]	; (800787c <HAL_RCC_OscConfig+0x288>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a75      	ldr	r2, [pc, #468]	; (800787c <HAL_RCC_OscConfig+0x288>)
 80076a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076ac:	6013      	str	r3, [r2, #0]
 80076ae:	e00b      	b.n	80076c8 <HAL_RCC_OscConfig+0xd4>
 80076b0:	4b72      	ldr	r3, [pc, #456]	; (800787c <HAL_RCC_OscConfig+0x288>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a71      	ldr	r2, [pc, #452]	; (800787c <HAL_RCC_OscConfig+0x288>)
 80076b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076ba:	6013      	str	r3, [r2, #0]
 80076bc:	4b6f      	ldr	r3, [pc, #444]	; (800787c <HAL_RCC_OscConfig+0x288>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a6e      	ldr	r2, [pc, #440]	; (800787c <HAL_RCC_OscConfig+0x288>)
 80076c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d013      	beq.n	80076f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076d0:	f7fa fd56 	bl	8002180 <HAL_GetTick>
 80076d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80076d6:	e008      	b.n	80076ea <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076d8:	f7fa fd52 	bl	8002180 <HAL_GetTick>
 80076dc:	4602      	mov	r2, r0
 80076de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	2b64      	cmp	r3, #100	; 0x64
 80076e4:	d901      	bls.n	80076ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80076e6:	2303      	movs	r3, #3
 80076e8:	e38d      	b.n	8007e06 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80076ea:	4b64      	ldr	r3, [pc, #400]	; (800787c <HAL_RCC_OscConfig+0x288>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d0f0      	beq.n	80076d8 <HAL_RCC_OscConfig+0xe4>
 80076f6:	e014      	b.n	8007722 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076f8:	f7fa fd42 	bl	8002180 <HAL_GetTick>
 80076fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80076fe:	e008      	b.n	8007712 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007700:	f7fa fd3e 	bl	8002180 <HAL_GetTick>
 8007704:	4602      	mov	r2, r0
 8007706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	2b64      	cmp	r3, #100	; 0x64
 800770c:	d901      	bls.n	8007712 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	e379      	b.n	8007e06 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007712:	4b5a      	ldr	r3, [pc, #360]	; (800787c <HAL_RCC_OscConfig+0x288>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1f0      	bne.n	8007700 <HAL_RCC_OscConfig+0x10c>
 800771e:	e000      	b.n	8007722 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 0302 	and.w	r3, r3, #2
 800772a:	2b00      	cmp	r3, #0
 800772c:	f000 80ae 	beq.w	800788c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007730:	4b52      	ldr	r3, [pc, #328]	; (800787c <HAL_RCC_OscConfig+0x288>)
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007738:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800773a:	4b50      	ldr	r3, [pc, #320]	; (800787c <HAL_RCC_OscConfig+0x288>)
 800773c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d007      	beq.n	8007756 <HAL_RCC_OscConfig+0x162>
 8007746:	6a3b      	ldr	r3, [r7, #32]
 8007748:	2b18      	cmp	r3, #24
 800774a:	d13a      	bne.n	80077c2 <HAL_RCC_OscConfig+0x1ce>
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	f003 0303 	and.w	r3, r3, #3
 8007752:	2b00      	cmp	r3, #0
 8007754:	d135      	bne.n	80077c2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007756:	4b49      	ldr	r3, [pc, #292]	; (800787c <HAL_RCC_OscConfig+0x288>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0304 	and.w	r3, r3, #4
 800775e:	2b00      	cmp	r3, #0
 8007760:	d005      	beq.n	800776e <HAL_RCC_OscConfig+0x17a>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d101      	bne.n	800776e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e34b      	b.n	8007e06 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800776e:	f7fa fd35 	bl	80021dc <HAL_GetREVID>
 8007772:	4602      	mov	r2, r0
 8007774:	f241 0303 	movw	r3, #4099	; 0x1003
 8007778:	429a      	cmp	r2, r3
 800777a:	d817      	bhi.n	80077ac <HAL_RCC_OscConfig+0x1b8>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	2b40      	cmp	r3, #64	; 0x40
 8007782:	d108      	bne.n	8007796 <HAL_RCC_OscConfig+0x1a2>
 8007784:	4b3d      	ldr	r3, [pc, #244]	; (800787c <HAL_RCC_OscConfig+0x288>)
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800778c:	4a3b      	ldr	r2, [pc, #236]	; (800787c <HAL_RCC_OscConfig+0x288>)
 800778e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007792:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007794:	e07a      	b.n	800788c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007796:	4b39      	ldr	r3, [pc, #228]	; (800787c <HAL_RCC_OscConfig+0x288>)
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	031b      	lsls	r3, r3, #12
 80077a4:	4935      	ldr	r1, [pc, #212]	; (800787c <HAL_RCC_OscConfig+0x288>)
 80077a6:	4313      	orrs	r3, r2
 80077a8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077aa:	e06f      	b.n	800788c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077ac:	4b33      	ldr	r3, [pc, #204]	; (800787c <HAL_RCC_OscConfig+0x288>)
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	061b      	lsls	r3, r3, #24
 80077ba:	4930      	ldr	r1, [pc, #192]	; (800787c <HAL_RCC_OscConfig+0x288>)
 80077bc:	4313      	orrs	r3, r2
 80077be:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077c0:	e064      	b.n	800788c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d045      	beq.n	8007856 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80077ca:	4b2c      	ldr	r3, [pc, #176]	; (800787c <HAL_RCC_OscConfig+0x288>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f023 0219 	bic.w	r2, r3, #25
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	4929      	ldr	r1, [pc, #164]	; (800787c <HAL_RCC_OscConfig+0x288>)
 80077d8:	4313      	orrs	r3, r2
 80077da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077dc:	f7fa fcd0 	bl	8002180 <HAL_GetTick>
 80077e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80077e2:	e008      	b.n	80077f6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077e4:	f7fa fccc 	bl	8002180 <HAL_GetTick>
 80077e8:	4602      	mov	r2, r0
 80077ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d901      	bls.n	80077f6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80077f2:	2303      	movs	r3, #3
 80077f4:	e307      	b.n	8007e06 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80077f6:	4b21      	ldr	r3, [pc, #132]	; (800787c <HAL_RCC_OscConfig+0x288>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 0304 	and.w	r3, r3, #4
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d0f0      	beq.n	80077e4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007802:	f7fa fceb 	bl	80021dc <HAL_GetREVID>
 8007806:	4602      	mov	r2, r0
 8007808:	f241 0303 	movw	r3, #4099	; 0x1003
 800780c:	429a      	cmp	r2, r3
 800780e:	d817      	bhi.n	8007840 <HAL_RCC_OscConfig+0x24c>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	2b40      	cmp	r3, #64	; 0x40
 8007816:	d108      	bne.n	800782a <HAL_RCC_OscConfig+0x236>
 8007818:	4b18      	ldr	r3, [pc, #96]	; (800787c <HAL_RCC_OscConfig+0x288>)
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007820:	4a16      	ldr	r2, [pc, #88]	; (800787c <HAL_RCC_OscConfig+0x288>)
 8007822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007826:	6053      	str	r3, [r2, #4]
 8007828:	e030      	b.n	800788c <HAL_RCC_OscConfig+0x298>
 800782a:	4b14      	ldr	r3, [pc, #80]	; (800787c <HAL_RCC_OscConfig+0x288>)
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	031b      	lsls	r3, r3, #12
 8007838:	4910      	ldr	r1, [pc, #64]	; (800787c <HAL_RCC_OscConfig+0x288>)
 800783a:	4313      	orrs	r3, r2
 800783c:	604b      	str	r3, [r1, #4]
 800783e:	e025      	b.n	800788c <HAL_RCC_OscConfig+0x298>
 8007840:	4b0e      	ldr	r3, [pc, #56]	; (800787c <HAL_RCC_OscConfig+0x288>)
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	061b      	lsls	r3, r3, #24
 800784e:	490b      	ldr	r1, [pc, #44]	; (800787c <HAL_RCC_OscConfig+0x288>)
 8007850:	4313      	orrs	r3, r2
 8007852:	604b      	str	r3, [r1, #4]
 8007854:	e01a      	b.n	800788c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007856:	4b09      	ldr	r3, [pc, #36]	; (800787c <HAL_RCC_OscConfig+0x288>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a08      	ldr	r2, [pc, #32]	; (800787c <HAL_RCC_OscConfig+0x288>)
 800785c:	f023 0301 	bic.w	r3, r3, #1
 8007860:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007862:	f7fa fc8d 	bl	8002180 <HAL_GetTick>
 8007866:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007868:	e00a      	b.n	8007880 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800786a:	f7fa fc89 	bl	8002180 <HAL_GetTick>
 800786e:	4602      	mov	r2, r0
 8007870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007872:	1ad3      	subs	r3, r2, r3
 8007874:	2b02      	cmp	r3, #2
 8007876:	d903      	bls.n	8007880 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8007878:	2303      	movs	r3, #3
 800787a:	e2c4      	b.n	8007e06 <HAL_RCC_OscConfig+0x812>
 800787c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007880:	4ba4      	ldr	r3, [pc, #656]	; (8007b14 <HAL_RCC_OscConfig+0x520>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 0304 	and.w	r3, r3, #4
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1ee      	bne.n	800786a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 0310 	and.w	r3, r3, #16
 8007894:	2b00      	cmp	r3, #0
 8007896:	f000 80a9 	beq.w	80079ec <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800789a:	4b9e      	ldr	r3, [pc, #632]	; (8007b14 <HAL_RCC_OscConfig+0x520>)
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80078a4:	4b9b      	ldr	r3, [pc, #620]	; (8007b14 <HAL_RCC_OscConfig+0x520>)
 80078a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	2b08      	cmp	r3, #8
 80078ae:	d007      	beq.n	80078c0 <HAL_RCC_OscConfig+0x2cc>
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	2b18      	cmp	r3, #24
 80078b4:	d13a      	bne.n	800792c <HAL_RCC_OscConfig+0x338>
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	f003 0303 	and.w	r3, r3, #3
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d135      	bne.n	800792c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80078c0:	4b94      	ldr	r3, [pc, #592]	; (8007b14 <HAL_RCC_OscConfig+0x520>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d005      	beq.n	80078d8 <HAL_RCC_OscConfig+0x2e4>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	69db      	ldr	r3, [r3, #28]
 80078d0:	2b80      	cmp	r3, #128	; 0x80
 80078d2:	d001      	beq.n	80078d8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	e296      	b.n	8007e06 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80078d8:	f7fa fc80 	bl	80021dc <HAL_GetREVID>
 80078dc:	4602      	mov	r2, r0
 80078de:	f241 0303 	movw	r3, #4099	; 0x1003
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d817      	bhi.n	8007916 <HAL_RCC_OscConfig+0x322>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6a1b      	ldr	r3, [r3, #32]
 80078ea:	2b20      	cmp	r3, #32
 80078ec:	d108      	bne.n	8007900 <HAL_RCC_OscConfig+0x30c>
 80078ee:	4b89      	ldr	r3, [pc, #548]	; (8007b14 <HAL_RCC_OscConfig+0x520>)
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80078f6:	4a87      	ldr	r2, [pc, #540]	; (8007b14 <HAL_RCC_OscConfig+0x520>)
 80078f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078fc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80078fe:	e075      	b.n	80079ec <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007900:	4b84      	ldr	r3, [pc, #528]	; (8007b14 <HAL_RCC_OscConfig+0x520>)
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6a1b      	ldr	r3, [r3, #32]
 800790c:	069b      	lsls	r3, r3, #26
 800790e:	4981      	ldr	r1, [pc, #516]	; (8007b14 <HAL_RCC_OscConfig+0x520>)
 8007910:	4313      	orrs	r3, r2
 8007912:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007914:	e06a      	b.n	80079ec <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007916:	4b7f      	ldr	r3, [pc, #508]	; (8007b14 <HAL_RCC_OscConfig+0x520>)
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	061b      	lsls	r3, r3, #24
 8007924:	497b      	ldr	r1, [pc, #492]	; (8007b14 <HAL_RCC_OscConfig+0x520>)
 8007926:	4313      	orrs	r3, r2
 8007928:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800792a:	e05f      	b.n	80079ec <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d042      	beq.n	80079ba <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007934:	4b77      	ldr	r3, [pc, #476]	; (8007b14 <HAL_RCC_OscConfig+0x520>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a76      	ldr	r2, [pc, #472]	; (8007b14 <HAL_RCC_OscConfig+0x520>)
 800793a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800793e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007940:	f7fa fc1e 	bl	8002180 <HAL_GetTick>
 8007944:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007946:	e008      	b.n	800795a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007948:	f7fa fc1a 	bl	8002180 <HAL_GetTick>
 800794c:	4602      	mov	r2, r0
 800794e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	2b02      	cmp	r3, #2
 8007954:	d901      	bls.n	800795a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8007956:	2303      	movs	r3, #3
 8007958:	e255      	b.n	8007e06 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800795a:	4b6e      	ldr	r3, [pc, #440]	; (8007b14 <HAL_RCC_OscConfig+0x520>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007962:	2b00      	cmp	r3, #0
 8007964:	d0f0      	beq.n	8007948 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007966:	f7fa fc39 	bl	80021dc <HAL_GetREVID>
 800796a:	4602      	mov	r2, r0
 800796c:	f241 0303 	movw	r3, #4099	; 0x1003
 8007970:	429a      	cmp	r2, r3
 8007972:	d817      	bhi.n	80079a4 <HAL_RCC_OscConfig+0x3b0>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a1b      	ldr	r3, [r3, #32]
 8007978:	2b20      	cmp	r3, #32
 800797a:	d108      	bne.n	800798e <HAL_RCC_OscConfig+0x39a>
 800797c:	4b65      	ldr	r3, [pc, #404]	; (8007b14 <HAL_RCC_OscConfig+0x520>)
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007984:	4a63      	ldr	r2, [pc, #396]	; (8007b14 <HAL_RCC_OscConfig+0x520>)
 8007986:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800798a:	6053      	str	r3, [r2, #4]
 800798c:	e02e      	b.n	80079ec <HAL_RCC_OscConfig+0x3f8>
 800798e:	4b61      	ldr	r3, [pc, #388]	; (8007b14 <HAL_RCC_OscConfig+0x520>)
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a1b      	ldr	r3, [r3, #32]
 800799a:	069b      	lsls	r3, r3, #26
 800799c:	495d      	ldr	r1, [pc, #372]	; (8007b14 <HAL_RCC_OscConfig+0x520>)
 800799e:	4313      	orrs	r3, r2
 80079a0:	604b      	str	r3, [r1, #4]
 80079a2:	e023      	b.n	80079ec <HAL_RCC_OscConfig+0x3f8>
 80079a4:	4b5b      	ldr	r3, [pc, #364]	; (8007b14 <HAL_RCC_OscConfig+0x520>)
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6a1b      	ldr	r3, [r3, #32]
 80079b0:	061b      	lsls	r3, r3, #24
 80079b2:	4958      	ldr	r1, [pc, #352]	; (8007b14 <HAL_RCC_OscConfig+0x520>)
 80079b4:	4313      	orrs	r3, r2
 80079b6:	60cb      	str	r3, [r1, #12]
 80079b8:	e018      	b.n	80079ec <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80079ba:	4b56      	ldr	r3, [pc, #344]	; (8007b14 <HAL_RCC_OscConfig+0x520>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a55      	ldr	r2, [pc, #340]	; (8007b14 <HAL_RCC_OscConfig+0x520>)
 80079c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079c6:	f7fa fbdb 	bl	8002180 <HAL_GetTick>
 80079ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80079cc:	e008      	b.n	80079e0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80079ce:	f7fa fbd7 	bl	8002180 <HAL_GetTick>
 80079d2:	4602      	mov	r2, r0
 80079d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d901      	bls.n	80079e0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	e212      	b.n	8007e06 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80079e0:	4b4c      	ldr	r3, [pc, #304]	; (8007b14 <HAL_RCC_OscConfig+0x520>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1f0      	bne.n	80079ce <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 0308 	and.w	r3, r3, #8
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d036      	beq.n	8007a66 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	695b      	ldr	r3, [r3, #20]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d019      	beq.n	8007a34 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a00:	4b44      	ldr	r3, [pc, #272]	; (8007b14 <HAL_RCC_OscConfig+0x520>)
 8007a02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a04:	4a43      	ldr	r2, [pc, #268]	; (8007b14 <HAL_RCC_OscConfig+0x520>)
 8007a06:	f043 0301 	orr.w	r3, r3, #1
 8007a0a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a0c:	f7fa fbb8 	bl	8002180 <HAL_GetTick>
 8007a10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007a12:	e008      	b.n	8007a26 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a14:	f7fa fbb4 	bl	8002180 <HAL_GetTick>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	d901      	bls.n	8007a26 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8007a22:	2303      	movs	r3, #3
 8007a24:	e1ef      	b.n	8007e06 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007a26:	4b3b      	ldr	r3, [pc, #236]	; (8007b14 <HAL_RCC_OscConfig+0x520>)
 8007a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a2a:	f003 0302 	and.w	r3, r3, #2
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d0f0      	beq.n	8007a14 <HAL_RCC_OscConfig+0x420>
 8007a32:	e018      	b.n	8007a66 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a34:	4b37      	ldr	r3, [pc, #220]	; (8007b14 <HAL_RCC_OscConfig+0x520>)
 8007a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a38:	4a36      	ldr	r2, [pc, #216]	; (8007b14 <HAL_RCC_OscConfig+0x520>)
 8007a3a:	f023 0301 	bic.w	r3, r3, #1
 8007a3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a40:	f7fa fb9e 	bl	8002180 <HAL_GetTick>
 8007a44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007a46:	e008      	b.n	8007a5a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a48:	f7fa fb9a 	bl	8002180 <HAL_GetTick>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d901      	bls.n	8007a5a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	e1d5      	b.n	8007e06 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007a5a:	4b2e      	ldr	r3, [pc, #184]	; (8007b14 <HAL_RCC_OscConfig+0x520>)
 8007a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a5e:	f003 0302 	and.w	r3, r3, #2
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1f0      	bne.n	8007a48 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 0320 	and.w	r3, r3, #32
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d036      	beq.n	8007ae0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	699b      	ldr	r3, [r3, #24]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d019      	beq.n	8007aae <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007a7a:	4b26      	ldr	r3, [pc, #152]	; (8007b14 <HAL_RCC_OscConfig+0x520>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a25      	ldr	r2, [pc, #148]	; (8007b14 <HAL_RCC_OscConfig+0x520>)
 8007a80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007a84:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007a86:	f7fa fb7b 	bl	8002180 <HAL_GetTick>
 8007a8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007a8c:	e008      	b.n	8007aa0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007a8e:	f7fa fb77 	bl	8002180 <HAL_GetTick>
 8007a92:	4602      	mov	r2, r0
 8007a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	d901      	bls.n	8007aa0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e1b2      	b.n	8007e06 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007aa0:	4b1c      	ldr	r3, [pc, #112]	; (8007b14 <HAL_RCC_OscConfig+0x520>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d0f0      	beq.n	8007a8e <HAL_RCC_OscConfig+0x49a>
 8007aac:	e018      	b.n	8007ae0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007aae:	4b19      	ldr	r3, [pc, #100]	; (8007b14 <HAL_RCC_OscConfig+0x520>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a18      	ldr	r2, [pc, #96]	; (8007b14 <HAL_RCC_OscConfig+0x520>)
 8007ab4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ab8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007aba:	f7fa fb61 	bl	8002180 <HAL_GetTick>
 8007abe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007ac0:	e008      	b.n	8007ad4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007ac2:	f7fa fb5d 	bl	8002180 <HAL_GetTick>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aca:	1ad3      	subs	r3, r2, r3
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	d901      	bls.n	8007ad4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	e198      	b.n	8007e06 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007ad4:	4b0f      	ldr	r3, [pc, #60]	; (8007b14 <HAL_RCC_OscConfig+0x520>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1f0      	bne.n	8007ac2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 0304 	and.w	r3, r3, #4
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	f000 8085 	beq.w	8007bf8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007aee:	4b0a      	ldr	r3, [pc, #40]	; (8007b18 <HAL_RCC_OscConfig+0x524>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a09      	ldr	r2, [pc, #36]	; (8007b18 <HAL_RCC_OscConfig+0x524>)
 8007af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007af8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007afa:	f7fa fb41 	bl	8002180 <HAL_GetTick>
 8007afe:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b00:	e00c      	b.n	8007b1c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007b02:	f7fa fb3d 	bl	8002180 <HAL_GetTick>
 8007b06:	4602      	mov	r2, r0
 8007b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	2b64      	cmp	r3, #100	; 0x64
 8007b0e:	d905      	bls.n	8007b1c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8007b10:	2303      	movs	r3, #3
 8007b12:	e178      	b.n	8007e06 <HAL_RCC_OscConfig+0x812>
 8007b14:	58024400 	.word	0x58024400
 8007b18:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b1c:	4b96      	ldr	r3, [pc, #600]	; (8007d78 <HAL_RCC_OscConfig+0x784>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d0ec      	beq.n	8007b02 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d106      	bne.n	8007b3e <HAL_RCC_OscConfig+0x54a>
 8007b30:	4b92      	ldr	r3, [pc, #584]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b34:	4a91      	ldr	r2, [pc, #580]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007b36:	f043 0301 	orr.w	r3, r3, #1
 8007b3a:	6713      	str	r3, [r2, #112]	; 0x70
 8007b3c:	e02d      	b.n	8007b9a <HAL_RCC_OscConfig+0x5a6>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d10c      	bne.n	8007b60 <HAL_RCC_OscConfig+0x56c>
 8007b46:	4b8d      	ldr	r3, [pc, #564]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b4a:	4a8c      	ldr	r2, [pc, #560]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007b4c:	f023 0301 	bic.w	r3, r3, #1
 8007b50:	6713      	str	r3, [r2, #112]	; 0x70
 8007b52:	4b8a      	ldr	r3, [pc, #552]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b56:	4a89      	ldr	r2, [pc, #548]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007b58:	f023 0304 	bic.w	r3, r3, #4
 8007b5c:	6713      	str	r3, [r2, #112]	; 0x70
 8007b5e:	e01c      	b.n	8007b9a <HAL_RCC_OscConfig+0x5a6>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	2b05      	cmp	r3, #5
 8007b66:	d10c      	bne.n	8007b82 <HAL_RCC_OscConfig+0x58e>
 8007b68:	4b84      	ldr	r3, [pc, #528]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b6c:	4a83      	ldr	r2, [pc, #524]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007b6e:	f043 0304 	orr.w	r3, r3, #4
 8007b72:	6713      	str	r3, [r2, #112]	; 0x70
 8007b74:	4b81      	ldr	r3, [pc, #516]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b78:	4a80      	ldr	r2, [pc, #512]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007b7a:	f043 0301 	orr.w	r3, r3, #1
 8007b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8007b80:	e00b      	b.n	8007b9a <HAL_RCC_OscConfig+0x5a6>
 8007b82:	4b7e      	ldr	r3, [pc, #504]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b86:	4a7d      	ldr	r2, [pc, #500]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007b88:	f023 0301 	bic.w	r3, r3, #1
 8007b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8007b8e:	4b7b      	ldr	r3, [pc, #492]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b92:	4a7a      	ldr	r2, [pc, #488]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007b94:	f023 0304 	bic.w	r3, r3, #4
 8007b98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d015      	beq.n	8007bce <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ba2:	f7fa faed 	bl	8002180 <HAL_GetTick>
 8007ba6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ba8:	e00a      	b.n	8007bc0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007baa:	f7fa fae9 	bl	8002180 <HAL_GetTick>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb2:	1ad3      	subs	r3, r2, r3
 8007bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d901      	bls.n	8007bc0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	e122      	b.n	8007e06 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007bc0:	4b6e      	ldr	r3, [pc, #440]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bc4:	f003 0302 	and.w	r3, r3, #2
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d0ee      	beq.n	8007baa <HAL_RCC_OscConfig+0x5b6>
 8007bcc:	e014      	b.n	8007bf8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bce:	f7fa fad7 	bl	8002180 <HAL_GetTick>
 8007bd2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007bd4:	e00a      	b.n	8007bec <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007bd6:	f7fa fad3 	bl	8002180 <HAL_GetTick>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bde:	1ad3      	subs	r3, r2, r3
 8007be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d901      	bls.n	8007bec <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8007be8:	2303      	movs	r3, #3
 8007bea:	e10c      	b.n	8007e06 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007bec:	4b63      	ldr	r3, [pc, #396]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bf0:	f003 0302 	and.w	r3, r3, #2
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d1ee      	bne.n	8007bd6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f000 8101 	beq.w	8007e04 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007c02:	4b5e      	ldr	r3, [pc, #376]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c0a:	2b18      	cmp	r3, #24
 8007c0c:	f000 80bc 	beq.w	8007d88 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	f040 8095 	bne.w	8007d44 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c1a:	4b58      	ldr	r3, [pc, #352]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a57      	ldr	r2, [pc, #348]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007c20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c26:	f7fa faab 	bl	8002180 <HAL_GetTick>
 8007c2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c2c:	e008      	b.n	8007c40 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c2e:	f7fa faa7 	bl	8002180 <HAL_GetTick>
 8007c32:	4602      	mov	r2, r0
 8007c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c36:	1ad3      	subs	r3, r2, r3
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	d901      	bls.n	8007c40 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	e0e2      	b.n	8007e06 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c40:	4b4e      	ldr	r3, [pc, #312]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1f0      	bne.n	8007c2e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c4c:	4b4b      	ldr	r3, [pc, #300]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007c4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c50:	4b4b      	ldr	r3, [pc, #300]	; (8007d80 <HAL_RCC_OscConfig+0x78c>)
 8007c52:	4013      	ands	r3, r2
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007c5c:	0112      	lsls	r2, r2, #4
 8007c5e:	430a      	orrs	r2, r1
 8007c60:	4946      	ldr	r1, [pc, #280]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007c62:	4313      	orrs	r3, r2
 8007c64:	628b      	str	r3, [r1, #40]	; 0x28
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c74:	3b01      	subs	r3, #1
 8007c76:	025b      	lsls	r3, r3, #9
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	431a      	orrs	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c80:	3b01      	subs	r3, #1
 8007c82:	041b      	lsls	r3, r3, #16
 8007c84:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c88:	431a      	orrs	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	061b      	lsls	r3, r3, #24
 8007c92:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007c96:	4939      	ldr	r1, [pc, #228]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007c9c:	4b37      	ldr	r3, [pc, #220]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca0:	4a36      	ldr	r2, [pc, #216]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007ca2:	f023 0301 	bic.w	r3, r3, #1
 8007ca6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007ca8:	4b34      	ldr	r3, [pc, #208]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cac:	4b35      	ldr	r3, [pc, #212]	; (8007d84 <HAL_RCC_OscConfig+0x790>)
 8007cae:	4013      	ands	r3, r2
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007cb4:	00d2      	lsls	r2, r2, #3
 8007cb6:	4931      	ldr	r1, [pc, #196]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007cbc:	4b2f      	ldr	r3, [pc, #188]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc0:	f023 020c 	bic.w	r2, r3, #12
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc8:	492c      	ldr	r1, [pc, #176]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007cce:	4b2b      	ldr	r3, [pc, #172]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd2:	f023 0202 	bic.w	r2, r3, #2
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cda:	4928      	ldr	r1, [pc, #160]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007ce0:	4b26      	ldr	r3, [pc, #152]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce4:	4a25      	ldr	r2, [pc, #148]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cec:	4b23      	ldr	r3, [pc, #140]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf0:	4a22      	ldr	r2, [pc, #136]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cf6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007cf8:	4b20      	ldr	r3, [pc, #128]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfc:	4a1f      	ldr	r2, [pc, #124]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007cfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007d04:	4b1d      	ldr	r3, [pc, #116]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d08:	4a1c      	ldr	r2, [pc, #112]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007d0a:	f043 0301 	orr.w	r3, r3, #1
 8007d0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d10:	4b1a      	ldr	r3, [pc, #104]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a19      	ldr	r2, [pc, #100]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007d16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d1c:	f7fa fa30 	bl	8002180 <HAL_GetTick>
 8007d20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007d22:	e008      	b.n	8007d36 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d24:	f7fa fa2c 	bl	8002180 <HAL_GetTick>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2c:	1ad3      	subs	r3, r2, r3
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d901      	bls.n	8007d36 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8007d32:	2303      	movs	r3, #3
 8007d34:	e067      	b.n	8007e06 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007d36:	4b11      	ldr	r3, [pc, #68]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d0f0      	beq.n	8007d24 <HAL_RCC_OscConfig+0x730>
 8007d42:	e05f      	b.n	8007e04 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d44:	4b0d      	ldr	r3, [pc, #52]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a0c      	ldr	r2, [pc, #48]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007d4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d50:	f7fa fa16 	bl	8002180 <HAL_GetTick>
 8007d54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d56:	e008      	b.n	8007d6a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d58:	f7fa fa12 	bl	8002180 <HAL_GetTick>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d60:	1ad3      	subs	r3, r2, r3
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d901      	bls.n	8007d6a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8007d66:	2303      	movs	r3, #3
 8007d68:	e04d      	b.n	8007e06 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d6a:	4b04      	ldr	r3, [pc, #16]	; (8007d7c <HAL_RCC_OscConfig+0x788>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1f0      	bne.n	8007d58 <HAL_RCC_OscConfig+0x764>
 8007d76:	e045      	b.n	8007e04 <HAL_RCC_OscConfig+0x810>
 8007d78:	58024800 	.word	0x58024800
 8007d7c:	58024400 	.word	0x58024400
 8007d80:	fffffc0c 	.word	0xfffffc0c
 8007d84:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007d88:	4b21      	ldr	r3, [pc, #132]	; (8007e10 <HAL_RCC_OscConfig+0x81c>)
 8007d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d8c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007d8e:	4b20      	ldr	r3, [pc, #128]	; (8007e10 <HAL_RCC_OscConfig+0x81c>)
 8007d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d92:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d031      	beq.n	8007e00 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	f003 0203 	and.w	r2, r3, #3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d12a      	bne.n	8007e00 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	091b      	lsrs	r3, r3, #4
 8007dae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d122      	bne.n	8007e00 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d11a      	bne.n	8007e00 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	0a5b      	lsrs	r3, r3, #9
 8007dce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dd6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d111      	bne.n	8007e00 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	0c1b      	lsrs	r3, r3, #16
 8007de0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d108      	bne.n	8007e00 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	0e1b      	lsrs	r3, r3, #24
 8007df2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dfa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d001      	beq.n	8007e04 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e000      	b.n	8007e06 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3730      	adds	r7, #48	; 0x30
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	58024400 	.word	0x58024400

08007e14 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b086      	sub	sp, #24
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d101      	bne.n	8007e28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	e19c      	b.n	8008162 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007e28:	4b8a      	ldr	r3, [pc, #552]	; (8008054 <HAL_RCC_ClockConfig+0x240>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 030f 	and.w	r3, r3, #15
 8007e30:	683a      	ldr	r2, [r7, #0]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d910      	bls.n	8007e58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e36:	4b87      	ldr	r3, [pc, #540]	; (8008054 <HAL_RCC_ClockConfig+0x240>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f023 020f 	bic.w	r2, r3, #15
 8007e3e:	4985      	ldr	r1, [pc, #532]	; (8008054 <HAL_RCC_ClockConfig+0x240>)
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e46:	4b83      	ldr	r3, [pc, #524]	; (8008054 <HAL_RCC_ClockConfig+0x240>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 030f 	and.w	r3, r3, #15
 8007e4e:	683a      	ldr	r2, [r7, #0]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d001      	beq.n	8007e58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	e184      	b.n	8008162 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 0304 	and.w	r3, r3, #4
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d010      	beq.n	8007e86 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	691a      	ldr	r2, [r3, #16]
 8007e68:	4b7b      	ldr	r3, [pc, #492]	; (8008058 <HAL_RCC_ClockConfig+0x244>)
 8007e6a:	699b      	ldr	r3, [r3, #24]
 8007e6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d908      	bls.n	8007e86 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007e74:	4b78      	ldr	r3, [pc, #480]	; (8008058 <HAL_RCC_ClockConfig+0x244>)
 8007e76:	699b      	ldr	r3, [r3, #24]
 8007e78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	4975      	ldr	r1, [pc, #468]	; (8008058 <HAL_RCC_ClockConfig+0x244>)
 8007e82:	4313      	orrs	r3, r2
 8007e84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f003 0308 	and.w	r3, r3, #8
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d010      	beq.n	8007eb4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	695a      	ldr	r2, [r3, #20]
 8007e96:	4b70      	ldr	r3, [pc, #448]	; (8008058 <HAL_RCC_ClockConfig+0x244>)
 8007e98:	69db      	ldr	r3, [r3, #28]
 8007e9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d908      	bls.n	8007eb4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007ea2:	4b6d      	ldr	r3, [pc, #436]	; (8008058 <HAL_RCC_ClockConfig+0x244>)
 8007ea4:	69db      	ldr	r3, [r3, #28]
 8007ea6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	695b      	ldr	r3, [r3, #20]
 8007eae:	496a      	ldr	r1, [pc, #424]	; (8008058 <HAL_RCC_ClockConfig+0x244>)
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f003 0310 	and.w	r3, r3, #16
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d010      	beq.n	8007ee2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	699a      	ldr	r2, [r3, #24]
 8007ec4:	4b64      	ldr	r3, [pc, #400]	; (8008058 <HAL_RCC_ClockConfig+0x244>)
 8007ec6:	69db      	ldr	r3, [r3, #28]
 8007ec8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d908      	bls.n	8007ee2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007ed0:	4b61      	ldr	r3, [pc, #388]	; (8008058 <HAL_RCC_ClockConfig+0x244>)
 8007ed2:	69db      	ldr	r3, [r3, #28]
 8007ed4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	699b      	ldr	r3, [r3, #24]
 8007edc:	495e      	ldr	r1, [pc, #376]	; (8008058 <HAL_RCC_ClockConfig+0x244>)
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 0320 	and.w	r3, r3, #32
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d010      	beq.n	8007f10 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	69da      	ldr	r2, [r3, #28]
 8007ef2:	4b59      	ldr	r3, [pc, #356]	; (8008058 <HAL_RCC_ClockConfig+0x244>)
 8007ef4:	6a1b      	ldr	r3, [r3, #32]
 8007ef6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d908      	bls.n	8007f10 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007efe:	4b56      	ldr	r3, [pc, #344]	; (8008058 <HAL_RCC_ClockConfig+0x244>)
 8007f00:	6a1b      	ldr	r3, [r3, #32]
 8007f02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	69db      	ldr	r3, [r3, #28]
 8007f0a:	4953      	ldr	r1, [pc, #332]	; (8008058 <HAL_RCC_ClockConfig+0x244>)
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 0302 	and.w	r3, r3, #2
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d010      	beq.n	8007f3e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	68da      	ldr	r2, [r3, #12]
 8007f20:	4b4d      	ldr	r3, [pc, #308]	; (8008058 <HAL_RCC_ClockConfig+0x244>)
 8007f22:	699b      	ldr	r3, [r3, #24]
 8007f24:	f003 030f 	and.w	r3, r3, #15
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d908      	bls.n	8007f3e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f2c:	4b4a      	ldr	r3, [pc, #296]	; (8008058 <HAL_RCC_ClockConfig+0x244>)
 8007f2e:	699b      	ldr	r3, [r3, #24]
 8007f30:	f023 020f 	bic.w	r2, r3, #15
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	4947      	ldr	r1, [pc, #284]	; (8008058 <HAL_RCC_ClockConfig+0x244>)
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 0301 	and.w	r3, r3, #1
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d055      	beq.n	8007ff6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007f4a:	4b43      	ldr	r3, [pc, #268]	; (8008058 <HAL_RCC_ClockConfig+0x244>)
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	4940      	ldr	r1, [pc, #256]	; (8008058 <HAL_RCC_ClockConfig+0x244>)
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d107      	bne.n	8007f74 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f64:	4b3c      	ldr	r3, [pc, #240]	; (8008058 <HAL_RCC_ClockConfig+0x244>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d121      	bne.n	8007fb4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e0f6      	b.n	8008162 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	2b03      	cmp	r3, #3
 8007f7a:	d107      	bne.n	8007f8c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f7c:	4b36      	ldr	r3, [pc, #216]	; (8008058 <HAL_RCC_ClockConfig+0x244>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d115      	bne.n	8007fb4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e0ea      	b.n	8008162 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d107      	bne.n	8007fa4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007f94:	4b30      	ldr	r3, [pc, #192]	; (8008058 <HAL_RCC_ClockConfig+0x244>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d109      	bne.n	8007fb4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e0de      	b.n	8008162 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fa4:	4b2c      	ldr	r3, [pc, #176]	; (8008058 <HAL_RCC_ClockConfig+0x244>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 0304 	and.w	r3, r3, #4
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d101      	bne.n	8007fb4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e0d6      	b.n	8008162 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007fb4:	4b28      	ldr	r3, [pc, #160]	; (8008058 <HAL_RCC_ClockConfig+0x244>)
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	f023 0207 	bic.w	r2, r3, #7
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	4925      	ldr	r1, [pc, #148]	; (8008058 <HAL_RCC_ClockConfig+0x244>)
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fc6:	f7fa f8db 	bl	8002180 <HAL_GetTick>
 8007fca:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fcc:	e00a      	b.n	8007fe4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fce:	f7fa f8d7 	bl	8002180 <HAL_GetTick>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	1ad3      	subs	r3, r2, r3
 8007fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d901      	bls.n	8007fe4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	e0be      	b.n	8008162 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fe4:	4b1c      	ldr	r3, [pc, #112]	; (8008058 <HAL_RCC_ClockConfig+0x244>)
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	00db      	lsls	r3, r3, #3
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d1eb      	bne.n	8007fce <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 0302 	and.w	r3, r3, #2
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d010      	beq.n	8008024 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	68da      	ldr	r2, [r3, #12]
 8008006:	4b14      	ldr	r3, [pc, #80]	; (8008058 <HAL_RCC_ClockConfig+0x244>)
 8008008:	699b      	ldr	r3, [r3, #24]
 800800a:	f003 030f 	and.w	r3, r3, #15
 800800e:	429a      	cmp	r2, r3
 8008010:	d208      	bcs.n	8008024 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008012:	4b11      	ldr	r3, [pc, #68]	; (8008058 <HAL_RCC_ClockConfig+0x244>)
 8008014:	699b      	ldr	r3, [r3, #24]
 8008016:	f023 020f 	bic.w	r2, r3, #15
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	490e      	ldr	r1, [pc, #56]	; (8008058 <HAL_RCC_ClockConfig+0x244>)
 8008020:	4313      	orrs	r3, r2
 8008022:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008024:	4b0b      	ldr	r3, [pc, #44]	; (8008054 <HAL_RCC_ClockConfig+0x240>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 030f 	and.w	r3, r3, #15
 800802c:	683a      	ldr	r2, [r7, #0]
 800802e:	429a      	cmp	r2, r3
 8008030:	d214      	bcs.n	800805c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008032:	4b08      	ldr	r3, [pc, #32]	; (8008054 <HAL_RCC_ClockConfig+0x240>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f023 020f 	bic.w	r2, r3, #15
 800803a:	4906      	ldr	r1, [pc, #24]	; (8008054 <HAL_RCC_ClockConfig+0x240>)
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	4313      	orrs	r3, r2
 8008040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008042:	4b04      	ldr	r3, [pc, #16]	; (8008054 <HAL_RCC_ClockConfig+0x240>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 030f 	and.w	r3, r3, #15
 800804a:	683a      	ldr	r2, [r7, #0]
 800804c:	429a      	cmp	r2, r3
 800804e:	d005      	beq.n	800805c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	e086      	b.n	8008162 <HAL_RCC_ClockConfig+0x34e>
 8008054:	52002000 	.word	0x52002000
 8008058:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 0304 	and.w	r3, r3, #4
 8008064:	2b00      	cmp	r3, #0
 8008066:	d010      	beq.n	800808a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	691a      	ldr	r2, [r3, #16]
 800806c:	4b3f      	ldr	r3, [pc, #252]	; (800816c <HAL_RCC_ClockConfig+0x358>)
 800806e:	699b      	ldr	r3, [r3, #24]
 8008070:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008074:	429a      	cmp	r2, r3
 8008076:	d208      	bcs.n	800808a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008078:	4b3c      	ldr	r3, [pc, #240]	; (800816c <HAL_RCC_ClockConfig+0x358>)
 800807a:	699b      	ldr	r3, [r3, #24]
 800807c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	691b      	ldr	r3, [r3, #16]
 8008084:	4939      	ldr	r1, [pc, #228]	; (800816c <HAL_RCC_ClockConfig+0x358>)
 8008086:	4313      	orrs	r3, r2
 8008088:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 0308 	and.w	r3, r3, #8
 8008092:	2b00      	cmp	r3, #0
 8008094:	d010      	beq.n	80080b8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	695a      	ldr	r2, [r3, #20]
 800809a:	4b34      	ldr	r3, [pc, #208]	; (800816c <HAL_RCC_ClockConfig+0x358>)
 800809c:	69db      	ldr	r3, [r3, #28]
 800809e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d208      	bcs.n	80080b8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80080a6:	4b31      	ldr	r3, [pc, #196]	; (800816c <HAL_RCC_ClockConfig+0x358>)
 80080a8:	69db      	ldr	r3, [r3, #28]
 80080aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	695b      	ldr	r3, [r3, #20]
 80080b2:	492e      	ldr	r1, [pc, #184]	; (800816c <HAL_RCC_ClockConfig+0x358>)
 80080b4:	4313      	orrs	r3, r2
 80080b6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 0310 	and.w	r3, r3, #16
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d010      	beq.n	80080e6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	699a      	ldr	r2, [r3, #24]
 80080c8:	4b28      	ldr	r3, [pc, #160]	; (800816c <HAL_RCC_ClockConfig+0x358>)
 80080ca:	69db      	ldr	r3, [r3, #28]
 80080cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d208      	bcs.n	80080e6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80080d4:	4b25      	ldr	r3, [pc, #148]	; (800816c <HAL_RCC_ClockConfig+0x358>)
 80080d6:	69db      	ldr	r3, [r3, #28]
 80080d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	4922      	ldr	r1, [pc, #136]	; (800816c <HAL_RCC_ClockConfig+0x358>)
 80080e2:	4313      	orrs	r3, r2
 80080e4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f003 0320 	and.w	r3, r3, #32
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d010      	beq.n	8008114 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	69da      	ldr	r2, [r3, #28]
 80080f6:	4b1d      	ldr	r3, [pc, #116]	; (800816c <HAL_RCC_ClockConfig+0x358>)
 80080f8:	6a1b      	ldr	r3, [r3, #32]
 80080fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80080fe:	429a      	cmp	r2, r3
 8008100:	d208      	bcs.n	8008114 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008102:	4b1a      	ldr	r3, [pc, #104]	; (800816c <HAL_RCC_ClockConfig+0x358>)
 8008104:	6a1b      	ldr	r3, [r3, #32]
 8008106:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	69db      	ldr	r3, [r3, #28]
 800810e:	4917      	ldr	r1, [pc, #92]	; (800816c <HAL_RCC_ClockConfig+0x358>)
 8008110:	4313      	orrs	r3, r2
 8008112:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008114:	f000 f834 	bl	8008180 <HAL_RCC_GetSysClockFreq>
 8008118:	4601      	mov	r1, r0
 800811a:	4b14      	ldr	r3, [pc, #80]	; (800816c <HAL_RCC_ClockConfig+0x358>)
 800811c:	699b      	ldr	r3, [r3, #24]
 800811e:	0a1b      	lsrs	r3, r3, #8
 8008120:	f003 030f 	and.w	r3, r3, #15
 8008124:	4a12      	ldr	r2, [pc, #72]	; (8008170 <HAL_RCC_ClockConfig+0x35c>)
 8008126:	5cd3      	ldrb	r3, [r2, r3]
 8008128:	f003 031f 	and.w	r3, r3, #31
 800812c:	fa21 f303 	lsr.w	r3, r1, r3
 8008130:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008132:	4b0e      	ldr	r3, [pc, #56]	; (800816c <HAL_RCC_ClockConfig+0x358>)
 8008134:	699b      	ldr	r3, [r3, #24]
 8008136:	f003 030f 	and.w	r3, r3, #15
 800813a:	4a0d      	ldr	r2, [pc, #52]	; (8008170 <HAL_RCC_ClockConfig+0x35c>)
 800813c:	5cd3      	ldrb	r3, [r2, r3]
 800813e:	f003 031f 	and.w	r3, r3, #31
 8008142:	693a      	ldr	r2, [r7, #16]
 8008144:	fa22 f303 	lsr.w	r3, r2, r3
 8008148:	4a0a      	ldr	r2, [pc, #40]	; (8008174 <HAL_RCC_ClockConfig+0x360>)
 800814a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800814c:	4a0a      	ldr	r2, [pc, #40]	; (8008178 <HAL_RCC_ClockConfig+0x364>)
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008152:	4b0a      	ldr	r3, [pc, #40]	; (800817c <HAL_RCC_ClockConfig+0x368>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4618      	mov	r0, r3
 8008158:	f7f9 ffc8 	bl	80020ec <HAL_InitTick>
 800815c:	4603      	mov	r3, r0
 800815e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008160:	7bfb      	ldrb	r3, [r7, #15]
}
 8008162:	4618      	mov	r0, r3
 8008164:	3718      	adds	r7, #24
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	58024400 	.word	0x58024400
 8008170:	08011c8c 	.word	0x08011c8c
 8008174:	2400000c 	.word	0x2400000c
 8008178:	24000008 	.word	0x24000008
 800817c:	24000010 	.word	0x24000010

08008180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008180:	b480      	push	{r7}
 8008182:	b089      	sub	sp, #36	; 0x24
 8008184:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008186:	4baf      	ldr	r3, [pc, #700]	; (8008444 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800818e:	2b18      	cmp	r3, #24
 8008190:	f200 814e 	bhi.w	8008430 <HAL_RCC_GetSysClockFreq+0x2b0>
 8008194:	a201      	add	r2, pc, #4	; (adr r2, 800819c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800819a:	bf00      	nop
 800819c:	08008201 	.word	0x08008201
 80081a0:	08008431 	.word	0x08008431
 80081a4:	08008431 	.word	0x08008431
 80081a8:	08008431 	.word	0x08008431
 80081ac:	08008431 	.word	0x08008431
 80081b0:	08008431 	.word	0x08008431
 80081b4:	08008431 	.word	0x08008431
 80081b8:	08008431 	.word	0x08008431
 80081bc:	08008227 	.word	0x08008227
 80081c0:	08008431 	.word	0x08008431
 80081c4:	08008431 	.word	0x08008431
 80081c8:	08008431 	.word	0x08008431
 80081cc:	08008431 	.word	0x08008431
 80081d0:	08008431 	.word	0x08008431
 80081d4:	08008431 	.word	0x08008431
 80081d8:	08008431 	.word	0x08008431
 80081dc:	0800822d 	.word	0x0800822d
 80081e0:	08008431 	.word	0x08008431
 80081e4:	08008431 	.word	0x08008431
 80081e8:	08008431 	.word	0x08008431
 80081ec:	08008431 	.word	0x08008431
 80081f0:	08008431 	.word	0x08008431
 80081f4:	08008431 	.word	0x08008431
 80081f8:	08008431 	.word	0x08008431
 80081fc:	08008233 	.word	0x08008233
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008200:	4b90      	ldr	r3, [pc, #576]	; (8008444 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f003 0320 	and.w	r3, r3, #32
 8008208:	2b00      	cmp	r3, #0
 800820a:	d009      	beq.n	8008220 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800820c:	4b8d      	ldr	r3, [pc, #564]	; (8008444 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	08db      	lsrs	r3, r3, #3
 8008212:	f003 0303 	and.w	r3, r3, #3
 8008216:	4a8c      	ldr	r2, [pc, #560]	; (8008448 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8008218:	fa22 f303 	lsr.w	r3, r2, r3
 800821c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800821e:	e10a      	b.n	8008436 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008220:	4b89      	ldr	r3, [pc, #548]	; (8008448 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8008222:	61bb      	str	r3, [r7, #24]
    break;
 8008224:	e107      	b.n	8008436 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008226:	4b89      	ldr	r3, [pc, #548]	; (800844c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8008228:	61bb      	str	r3, [r7, #24]
    break;
 800822a:	e104      	b.n	8008436 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800822c:	4b88      	ldr	r3, [pc, #544]	; (8008450 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800822e:	61bb      	str	r3, [r7, #24]
    break;
 8008230:	e101      	b.n	8008436 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008232:	4b84      	ldr	r3, [pc, #528]	; (8008444 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008236:	f003 0303 	and.w	r3, r3, #3
 800823a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800823c:	4b81      	ldr	r3, [pc, #516]	; (8008444 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800823e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008240:	091b      	lsrs	r3, r3, #4
 8008242:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008246:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008248:	4b7e      	ldr	r3, [pc, #504]	; (8008444 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800824a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824c:	f003 0301 	and.w	r3, r3, #1
 8008250:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008252:	4b7c      	ldr	r3, [pc, #496]	; (8008444 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008256:	08db      	lsrs	r3, r3, #3
 8008258:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	fb02 f303 	mul.w	r3, r2, r3
 8008262:	ee07 3a90 	vmov	s15, r3
 8008266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800826a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	2b00      	cmp	r3, #0
 8008272:	f000 80da 	beq.w	800842a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d05a      	beq.n	8008332 <HAL_RCC_GetSysClockFreq+0x1b2>
 800827c:	2b01      	cmp	r3, #1
 800827e:	d302      	bcc.n	8008286 <HAL_RCC_GetSysClockFreq+0x106>
 8008280:	2b02      	cmp	r3, #2
 8008282:	d078      	beq.n	8008376 <HAL_RCC_GetSysClockFreq+0x1f6>
 8008284:	e099      	b.n	80083ba <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008286:	4b6f      	ldr	r3, [pc, #444]	; (8008444 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f003 0320 	and.w	r3, r3, #32
 800828e:	2b00      	cmp	r3, #0
 8008290:	d02d      	beq.n	80082ee <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008292:	4b6c      	ldr	r3, [pc, #432]	; (8008444 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	08db      	lsrs	r3, r3, #3
 8008298:	f003 0303 	and.w	r3, r3, #3
 800829c:	4a6a      	ldr	r2, [pc, #424]	; (8008448 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800829e:	fa22 f303 	lsr.w	r3, r2, r3
 80082a2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	ee07 3a90 	vmov	s15, r3
 80082aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	ee07 3a90 	vmov	s15, r3
 80082b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082bc:	4b61      	ldr	r3, [pc, #388]	; (8008444 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80082be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082c4:	ee07 3a90 	vmov	s15, r3
 80082c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80082d0:	eddf 5a60 	vldr	s11, [pc, #384]	; 8008454 <HAL_RCC_GetSysClockFreq+0x2d4>
 80082d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082e8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80082ec:	e087      	b.n	80083fe <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	ee07 3a90 	vmov	s15, r3
 80082f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082f8:	eddf 6a57 	vldr	s13, [pc, #348]	; 8008458 <HAL_RCC_GetSysClockFreq+0x2d8>
 80082fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008300:	4b50      	ldr	r3, [pc, #320]	; (8008444 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008308:	ee07 3a90 	vmov	s15, r3
 800830c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008310:	ed97 6a02 	vldr	s12, [r7, #8]
 8008314:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8008454 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008318:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800831c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008320:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008324:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800832c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008330:	e065      	b.n	80083fe <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	ee07 3a90 	vmov	s15, r3
 8008338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800833c:	eddf 6a47 	vldr	s13, [pc, #284]	; 800845c <HAL_RCC_GetSysClockFreq+0x2dc>
 8008340:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008344:	4b3f      	ldr	r3, [pc, #252]	; (8008444 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800834c:	ee07 3a90 	vmov	s15, r3
 8008350:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008354:	ed97 6a02 	vldr	s12, [r7, #8]
 8008358:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8008454 <HAL_RCC_GetSysClockFreq+0x2d4>
 800835c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008360:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008364:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008368:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800836c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008370:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008374:	e043      	b.n	80083fe <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	ee07 3a90 	vmov	s15, r3
 800837c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008380:	eddf 6a37 	vldr	s13, [pc, #220]	; 8008460 <HAL_RCC_GetSysClockFreq+0x2e0>
 8008384:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008388:	4b2e      	ldr	r3, [pc, #184]	; (8008444 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800838a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800838c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008390:	ee07 3a90 	vmov	s15, r3
 8008394:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008398:	ed97 6a02 	vldr	s12, [r7, #8]
 800839c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8008454 <HAL_RCC_GetSysClockFreq+0x2d4>
 80083a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083b8:	e021      	b.n	80083fe <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	ee07 3a90 	vmov	s15, r3
 80083c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083c4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800845c <HAL_RCC_GetSysClockFreq+0x2dc>
 80083c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083cc:	4b1d      	ldr	r3, [pc, #116]	; (8008444 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80083ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083d4:	ee07 3a90 	vmov	s15, r3
 80083d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80083e0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8008454 <HAL_RCC_GetSysClockFreq+0x2d4>
 80083e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083fc:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80083fe:	4b11      	ldr	r3, [pc, #68]	; (8008444 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008402:	0a5b      	lsrs	r3, r3, #9
 8008404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008408:	3301      	adds	r3, #1
 800840a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	ee07 3a90 	vmov	s15, r3
 8008412:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008416:	edd7 6a07 	vldr	s13, [r7, #28]
 800841a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800841e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008422:	ee17 3a90 	vmov	r3, s15
 8008426:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008428:	e005      	b.n	8008436 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800842a:	2300      	movs	r3, #0
 800842c:	61bb      	str	r3, [r7, #24]
    break;
 800842e:	e002      	b.n	8008436 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8008430:	4b06      	ldr	r3, [pc, #24]	; (800844c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8008432:	61bb      	str	r3, [r7, #24]
    break;
 8008434:	bf00      	nop
  }

  return sysclockfreq;
 8008436:	69bb      	ldr	r3, [r7, #24]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3724      	adds	r7, #36	; 0x24
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr
 8008444:	58024400 	.word	0x58024400
 8008448:	03d09000 	.word	0x03d09000
 800844c:	003d0900 	.word	0x003d0900
 8008450:	007a1200 	.word	0x007a1200
 8008454:	46000000 	.word	0x46000000
 8008458:	4c742400 	.word	0x4c742400
 800845c:	4a742400 	.word	0x4a742400
 8008460:	4af42400 	.word	0x4af42400

08008464 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800846a:	f7ff fe89 	bl	8008180 <HAL_RCC_GetSysClockFreq>
 800846e:	4601      	mov	r1, r0
 8008470:	4b10      	ldr	r3, [pc, #64]	; (80084b4 <HAL_RCC_GetHCLKFreq+0x50>)
 8008472:	699b      	ldr	r3, [r3, #24]
 8008474:	0a1b      	lsrs	r3, r3, #8
 8008476:	f003 030f 	and.w	r3, r3, #15
 800847a:	4a0f      	ldr	r2, [pc, #60]	; (80084b8 <HAL_RCC_GetHCLKFreq+0x54>)
 800847c:	5cd3      	ldrb	r3, [r2, r3]
 800847e:	f003 031f 	and.w	r3, r3, #31
 8008482:	fa21 f303 	lsr.w	r3, r1, r3
 8008486:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008488:	4b0a      	ldr	r3, [pc, #40]	; (80084b4 <HAL_RCC_GetHCLKFreq+0x50>)
 800848a:	699b      	ldr	r3, [r3, #24]
 800848c:	f003 030f 	and.w	r3, r3, #15
 8008490:	4a09      	ldr	r2, [pc, #36]	; (80084b8 <HAL_RCC_GetHCLKFreq+0x54>)
 8008492:	5cd3      	ldrb	r3, [r2, r3]
 8008494:	f003 031f 	and.w	r3, r3, #31
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	fa22 f303 	lsr.w	r3, r2, r3
 800849e:	4a07      	ldr	r2, [pc, #28]	; (80084bc <HAL_RCC_GetHCLKFreq+0x58>)
 80084a0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80084a2:	4a07      	ldr	r2, [pc, #28]	; (80084c0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80084a8:	4b04      	ldr	r3, [pc, #16]	; (80084bc <HAL_RCC_GetHCLKFreq+0x58>)
 80084aa:	681b      	ldr	r3, [r3, #0]
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	58024400 	.word	0x58024400
 80084b8:	08011c8c 	.word	0x08011c8c
 80084bc:	2400000c 	.word	0x2400000c
 80084c0:	24000008 	.word	0x24000008

080084c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80084c8:	f7ff ffcc 	bl	8008464 <HAL_RCC_GetHCLKFreq>
 80084cc:	4601      	mov	r1, r0
 80084ce:	4b06      	ldr	r3, [pc, #24]	; (80084e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80084d0:	69db      	ldr	r3, [r3, #28]
 80084d2:	091b      	lsrs	r3, r3, #4
 80084d4:	f003 0307 	and.w	r3, r3, #7
 80084d8:	4a04      	ldr	r2, [pc, #16]	; (80084ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80084da:	5cd3      	ldrb	r3, [r2, r3]
 80084dc:	f003 031f 	and.w	r3, r3, #31
 80084e0:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	58024400 	.word	0x58024400
 80084ec:	08011c8c 	.word	0x08011c8c

080084f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80084f4:	f7ff ffb6 	bl	8008464 <HAL_RCC_GetHCLKFreq>
 80084f8:	4601      	mov	r1, r0
 80084fa:	4b06      	ldr	r3, [pc, #24]	; (8008514 <HAL_RCC_GetPCLK2Freq+0x24>)
 80084fc:	69db      	ldr	r3, [r3, #28]
 80084fe:	0a1b      	lsrs	r3, r3, #8
 8008500:	f003 0307 	and.w	r3, r3, #7
 8008504:	4a04      	ldr	r2, [pc, #16]	; (8008518 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008506:	5cd3      	ldrb	r3, [r2, r3]
 8008508:	f003 031f 	and.w	r3, r3, #31
 800850c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008510:	4618      	mov	r0, r3
 8008512:	bd80      	pop	{r7, pc}
 8008514:	58024400 	.word	0x58024400
 8008518:	08011c8c 	.word	0x08011c8c

0800851c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b086      	sub	sp, #24
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008524:	2300      	movs	r3, #0
 8008526:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008528:	2300      	movs	r3, #0
 800852a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008534:	2b00      	cmp	r3, #0
 8008536:	d03d      	beq.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800853c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008540:	d013      	beq.n	800856a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8008542:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008546:	d802      	bhi.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8008548:	2b00      	cmp	r3, #0
 800854a:	d007      	beq.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800854c:	e01f      	b.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800854e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008552:	d013      	beq.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8008554:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008558:	d01c      	beq.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800855a:	e018      	b.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800855c:	4baf      	ldr	r3, [pc, #700]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800855e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008560:	4aae      	ldr	r2, [pc, #696]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008566:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008568:	e015      	b.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	3304      	adds	r3, #4
 800856e:	2102      	movs	r1, #2
 8008570:	4618      	mov	r0, r3
 8008572:	f001 fd33 	bl	8009fdc <RCCEx_PLL2_Config>
 8008576:	4603      	mov	r3, r0
 8008578:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800857a:	e00c      	b.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	3324      	adds	r3, #36	; 0x24
 8008580:	2102      	movs	r1, #2
 8008582:	4618      	mov	r0, r3
 8008584:	f001 fddc 	bl	800a140 <RCCEx_PLL3_Config>
 8008588:	4603      	mov	r3, r0
 800858a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800858c:	e003      	b.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	75fb      	strb	r3, [r7, #23]
      break;
 8008592:	e000      	b.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8008594:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008596:	7dfb      	ldrb	r3, [r7, #23]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d109      	bne.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800859c:	4b9f      	ldr	r3, [pc, #636]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800859e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085a8:	499c      	ldr	r1, [pc, #624]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80085aa:	4313      	orrs	r3, r2
 80085ac:	650b      	str	r3, [r1, #80]	; 0x50
 80085ae:	e001      	b.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085b0:	7dfb      	ldrb	r3, [r7, #23]
 80085b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d03d      	beq.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085c4:	2b04      	cmp	r3, #4
 80085c6:	d826      	bhi.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80085c8:	a201      	add	r2, pc, #4	; (adr r2, 80085d0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80085ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ce:	bf00      	nop
 80085d0:	080085e5 	.word	0x080085e5
 80085d4:	080085f3 	.word	0x080085f3
 80085d8:	08008605 	.word	0x08008605
 80085dc:	0800861d 	.word	0x0800861d
 80085e0:	0800861d 	.word	0x0800861d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085e4:	4b8d      	ldr	r3, [pc, #564]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80085e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e8:	4a8c      	ldr	r2, [pc, #560]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80085ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80085f0:	e015      	b.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	3304      	adds	r3, #4
 80085f6:	2100      	movs	r1, #0
 80085f8:	4618      	mov	r0, r3
 80085fa:	f001 fcef 	bl	8009fdc <RCCEx_PLL2_Config>
 80085fe:	4603      	mov	r3, r0
 8008600:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008602:	e00c      	b.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	3324      	adds	r3, #36	; 0x24
 8008608:	2100      	movs	r1, #0
 800860a:	4618      	mov	r0, r3
 800860c:	f001 fd98 	bl	800a140 <RCCEx_PLL3_Config>
 8008610:	4603      	mov	r3, r0
 8008612:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008614:	e003      	b.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	75fb      	strb	r3, [r7, #23]
      break;
 800861a:	e000      	b.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800861c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800861e:	7dfb      	ldrb	r3, [r7, #23]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d109      	bne.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008624:	4b7d      	ldr	r3, [pc, #500]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008628:	f023 0207 	bic.w	r2, r3, #7
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008630:	497a      	ldr	r1, [pc, #488]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008632:	4313      	orrs	r3, r2
 8008634:	650b      	str	r3, [r1, #80]	; 0x50
 8008636:	e001      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008638:	7dfb      	ldrb	r3, [r7, #23]
 800863a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008644:	2b00      	cmp	r3, #0
 8008646:	d03e      	beq.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800864c:	2b80      	cmp	r3, #128	; 0x80
 800864e:	d01c      	beq.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8008650:	2b80      	cmp	r3, #128	; 0x80
 8008652:	d804      	bhi.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8008654:	2b00      	cmp	r3, #0
 8008656:	d008      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8008658:	2b40      	cmp	r3, #64	; 0x40
 800865a:	d00d      	beq.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800865c:	e01e      	b.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800865e:	2bc0      	cmp	r3, #192	; 0xc0
 8008660:	d01f      	beq.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8008662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008666:	d01e      	beq.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8008668:	e018      	b.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800866a:	4b6c      	ldr	r3, [pc, #432]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800866c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800866e:	4a6b      	ldr	r2, [pc, #428]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008674:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008676:	e017      	b.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	3304      	adds	r3, #4
 800867c:	2100      	movs	r1, #0
 800867e:	4618      	mov	r0, r3
 8008680:	f001 fcac 	bl	8009fdc <RCCEx_PLL2_Config>
 8008684:	4603      	mov	r3, r0
 8008686:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008688:	e00e      	b.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	3324      	adds	r3, #36	; 0x24
 800868e:	2100      	movs	r1, #0
 8008690:	4618      	mov	r0, r3
 8008692:	f001 fd55 	bl	800a140 <RCCEx_PLL3_Config>
 8008696:	4603      	mov	r3, r0
 8008698:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800869a:	e005      	b.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	75fb      	strb	r3, [r7, #23]
      break;
 80086a0:	e002      	b.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80086a2:	bf00      	nop
 80086a4:	e000      	b.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80086a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086a8:	7dfb      	ldrb	r3, [r7, #23]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d109      	bne.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80086ae:	4b5b      	ldr	r3, [pc, #364]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80086b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086b2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086ba:	4958      	ldr	r1, [pc, #352]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80086bc:	4313      	orrs	r3, r2
 80086be:	650b      	str	r3, [r1, #80]	; 0x50
 80086c0:	e001      	b.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086c2:	7dfb      	ldrb	r3, [r7, #23]
 80086c4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d044      	beq.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80086d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086dc:	d01f      	beq.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80086de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086e2:	d805      	bhi.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d00a      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80086e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086ec:	d00e      	beq.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80086ee:	e01f      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80086f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80086f4:	d01f      	beq.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80086f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80086fa:	d01e      	beq.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80086fc:	e018      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086fe:	4b47      	ldr	r3, [pc, #284]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008702:	4a46      	ldr	r2, [pc, #280]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008708:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800870a:	e017      	b.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	3304      	adds	r3, #4
 8008710:	2100      	movs	r1, #0
 8008712:	4618      	mov	r0, r3
 8008714:	f001 fc62 	bl	8009fdc <RCCEx_PLL2_Config>
 8008718:	4603      	mov	r3, r0
 800871a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800871c:	e00e      	b.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	3324      	adds	r3, #36	; 0x24
 8008722:	2100      	movs	r1, #0
 8008724:	4618      	mov	r0, r3
 8008726:	f001 fd0b 	bl	800a140 <RCCEx_PLL3_Config>
 800872a:	4603      	mov	r3, r0
 800872c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800872e:	e005      	b.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008730:	2301      	movs	r3, #1
 8008732:	75fb      	strb	r3, [r7, #23]
      break;
 8008734:	e002      	b.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8008736:	bf00      	nop
 8008738:	e000      	b.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800873a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800873c:	7dfb      	ldrb	r3, [r7, #23]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d10a      	bne.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008742:	4b36      	ldr	r3, [pc, #216]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008746:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008750:	4932      	ldr	r1, [pc, #200]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008752:	4313      	orrs	r3, r2
 8008754:	658b      	str	r3, [r1, #88]	; 0x58
 8008756:	e001      	b.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008758:	7dfb      	ldrb	r3, [r7, #23]
 800875a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008764:	2b00      	cmp	r3, #0
 8008766:	d044      	beq.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800876e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008772:	d01f      	beq.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008774:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008778:	d805      	bhi.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00a      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800877e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008782:	d00e      	beq.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8008784:	e01f      	b.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8008786:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800878a:	d01f      	beq.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800878c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008790:	d01e      	beq.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008792:	e018      	b.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008794:	4b21      	ldr	r3, [pc, #132]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008798:	4a20      	ldr	r2, [pc, #128]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800879a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800879e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80087a0:	e017      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	3304      	adds	r3, #4
 80087a6:	2100      	movs	r1, #0
 80087a8:	4618      	mov	r0, r3
 80087aa:	f001 fc17 	bl	8009fdc <RCCEx_PLL2_Config>
 80087ae:	4603      	mov	r3, r0
 80087b0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80087b2:	e00e      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	3324      	adds	r3, #36	; 0x24
 80087b8:	2100      	movs	r1, #0
 80087ba:	4618      	mov	r0, r3
 80087bc:	f001 fcc0 	bl	800a140 <RCCEx_PLL3_Config>
 80087c0:	4603      	mov	r3, r0
 80087c2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80087c4:	e005      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	75fb      	strb	r3, [r7, #23]
      break;
 80087ca:	e002      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80087cc:	bf00      	nop
 80087ce:	e000      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80087d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087d2:	7dfb      	ldrb	r3, [r7, #23]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d10a      	bne.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80087d8:	4b10      	ldr	r3, [pc, #64]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80087da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087dc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80087e6:	490d      	ldr	r1, [pc, #52]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80087e8:	4313      	orrs	r3, r2
 80087ea:	658b      	str	r3, [r1, #88]	; 0x58
 80087ec:	e001      	b.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087ee:	7dfb      	ldrb	r3, [r7, #23]
 80087f0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d035      	beq.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008802:	2b10      	cmp	r3, #16
 8008804:	d00c      	beq.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8008806:	2b10      	cmp	r3, #16
 8008808:	d802      	bhi.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800880a:	2b00      	cmp	r3, #0
 800880c:	d01b      	beq.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800880e:	e017      	b.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8008810:	2b20      	cmp	r3, #32
 8008812:	d00c      	beq.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8008814:	2b30      	cmp	r3, #48	; 0x30
 8008816:	d018      	beq.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8008818:	e012      	b.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800881a:	bf00      	nop
 800881c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008820:	4baf      	ldr	r3, [pc, #700]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008824:	4aae      	ldr	r2, [pc, #696]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800882a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800882c:	e00e      	b.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	3304      	adds	r3, #4
 8008832:	2102      	movs	r1, #2
 8008834:	4618      	mov	r0, r3
 8008836:	f001 fbd1 	bl	8009fdc <RCCEx_PLL2_Config>
 800883a:	4603      	mov	r3, r0
 800883c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800883e:	e005      	b.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	75fb      	strb	r3, [r7, #23]
      break;
 8008844:	e002      	b.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8008846:	bf00      	nop
 8008848:	e000      	b.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800884a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800884c:	7dfb      	ldrb	r3, [r7, #23]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d109      	bne.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008852:	4ba3      	ldr	r3, [pc, #652]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008856:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800885e:	49a0      	ldr	r1, [pc, #640]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008860:	4313      	orrs	r3, r2
 8008862:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008864:	e001      	b.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008866:	7dfb      	ldrb	r3, [r7, #23]
 8008868:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008872:	2b00      	cmp	r3, #0
 8008874:	d042      	beq.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800887a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800887e:	d01f      	beq.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8008880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008884:	d805      	bhi.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008886:	2b00      	cmp	r3, #0
 8008888:	d00a      	beq.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800888a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800888e:	d00e      	beq.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x392>
 8008890:	e01f      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8008892:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008896:	d01f      	beq.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008898:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800889c:	d01e      	beq.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800889e:	e018      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088a0:	4b8f      	ldr	r3, [pc, #572]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80088a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a4:	4a8e      	ldr	r2, [pc, #568]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80088a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80088ac:	e017      	b.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	3304      	adds	r3, #4
 80088b2:	2100      	movs	r1, #0
 80088b4:	4618      	mov	r0, r3
 80088b6:	f001 fb91 	bl	8009fdc <RCCEx_PLL2_Config>
 80088ba:	4603      	mov	r3, r0
 80088bc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80088be:	e00e      	b.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	3324      	adds	r3, #36	; 0x24
 80088c4:	2100      	movs	r1, #0
 80088c6:	4618      	mov	r0, r3
 80088c8:	f001 fc3a 	bl	800a140 <RCCEx_PLL3_Config>
 80088cc:	4603      	mov	r3, r0
 80088ce:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80088d0:	e005      	b.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	75fb      	strb	r3, [r7, #23]
      break;
 80088d6:	e002      	b.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80088d8:	bf00      	nop
 80088da:	e000      	b.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80088dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088de:	7dfb      	ldrb	r3, [r7, #23]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d109      	bne.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80088e4:	4b7e      	ldr	r3, [pc, #504]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80088e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088e8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088f0:	497b      	ldr	r1, [pc, #492]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80088f2:	4313      	orrs	r3, r2
 80088f4:	650b      	str	r3, [r1, #80]	; 0x50
 80088f6:	e001      	b.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088f8:	7dfb      	ldrb	r3, [r7, #23]
 80088fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008904:	2b00      	cmp	r3, #0
 8008906:	d042      	beq.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800890c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008910:	d01b      	beq.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008912:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008916:	d805      	bhi.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8008918:	2b00      	cmp	r3, #0
 800891a:	d022      	beq.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800891c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008920:	d00a      	beq.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008922:	e01b      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8008924:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008928:	d01d      	beq.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800892a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800892e:	d01c      	beq.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8008930:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008934:	d01b      	beq.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8008936:	e011      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	3304      	adds	r3, #4
 800893c:	2101      	movs	r1, #1
 800893e:	4618      	mov	r0, r3
 8008940:	f001 fb4c 	bl	8009fdc <RCCEx_PLL2_Config>
 8008944:	4603      	mov	r3, r0
 8008946:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008948:	e012      	b.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	3324      	adds	r3, #36	; 0x24
 800894e:	2101      	movs	r1, #1
 8008950:	4618      	mov	r0, r3
 8008952:	f001 fbf5 	bl	800a140 <RCCEx_PLL3_Config>
 8008956:	4603      	mov	r3, r0
 8008958:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800895a:	e009      	b.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	75fb      	strb	r3, [r7, #23]
      break;
 8008960:	e006      	b.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008962:	bf00      	nop
 8008964:	e004      	b.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008966:	bf00      	nop
 8008968:	e002      	b.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800896a:	bf00      	nop
 800896c:	e000      	b.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800896e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008970:	7dfb      	ldrb	r3, [r7, #23]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d109      	bne.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008976:	4b5a      	ldr	r3, [pc, #360]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800897a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008982:	4957      	ldr	r1, [pc, #348]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008984:	4313      	orrs	r3, r2
 8008986:	650b      	str	r3, [r1, #80]	; 0x50
 8008988:	e001      	b.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800898a:	7dfb      	ldrb	r3, [r7, #23]
 800898c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008996:	2b00      	cmp	r3, #0
 8008998:	d044      	beq.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80089a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089a4:	d01b      	beq.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80089a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089aa:	d805      	bhi.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d022      	beq.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80089b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089b4:	d00a      	beq.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80089b6:	e01b      	b.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80089b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089bc:	d01d      	beq.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80089be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089c2:	d01c      	beq.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80089c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80089c8:	d01b      	beq.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80089ca:	e011      	b.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	3304      	adds	r3, #4
 80089d0:	2101      	movs	r1, #1
 80089d2:	4618      	mov	r0, r3
 80089d4:	f001 fb02 	bl	8009fdc <RCCEx_PLL2_Config>
 80089d8:	4603      	mov	r3, r0
 80089da:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80089dc:	e012      	b.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	3324      	adds	r3, #36	; 0x24
 80089e2:	2101      	movs	r1, #1
 80089e4:	4618      	mov	r0, r3
 80089e6:	f001 fbab 	bl	800a140 <RCCEx_PLL3_Config>
 80089ea:	4603      	mov	r3, r0
 80089ec:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80089ee:	e009      	b.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	75fb      	strb	r3, [r7, #23]
      break;
 80089f4:	e006      	b.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80089f6:	bf00      	nop
 80089f8:	e004      	b.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80089fa:	bf00      	nop
 80089fc:	e002      	b.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80089fe:	bf00      	nop
 8008a00:	e000      	b.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008a02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a04:	7dfb      	ldrb	r3, [r7, #23]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d10a      	bne.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008a0a:	4b35      	ldr	r3, [pc, #212]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a0e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008a18:	4931      	ldr	r1, [pc, #196]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	658b      	str	r3, [r1, #88]	; 0x58
 8008a1e:	e001      	b.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a20:	7dfb      	ldrb	r3, [r7, #23]
 8008a22:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d02d      	beq.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a38:	d005      	beq.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8008a3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a3e:	d009      	beq.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d013      	beq.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008a44:	e00f      	b.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a46:	4b26      	ldr	r3, [pc, #152]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4a:	4a25      	ldr	r2, [pc, #148]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008a52:	e00c      	b.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	3304      	adds	r3, #4
 8008a58:	2101      	movs	r1, #1
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f001 fabe 	bl	8009fdc <RCCEx_PLL2_Config>
 8008a60:	4603      	mov	r3, r0
 8008a62:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008a64:	e003      	b.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	75fb      	strb	r3, [r7, #23]
      break;
 8008a6a:	e000      	b.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8008a6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a6e:	7dfb      	ldrb	r3, [r7, #23]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d109      	bne.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008a74:	4b1a      	ldr	r3, [pc, #104]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a78:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a80:	4917      	ldr	r1, [pc, #92]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008a82:	4313      	orrs	r3, r2
 8008a84:	650b      	str	r3, [r1, #80]	; 0x50
 8008a86:	e001      	b.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a88:	7dfb      	ldrb	r3, [r7, #23]
 8008a8a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d035      	beq.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a9c:	2b03      	cmp	r3, #3
 8008a9e:	d81b      	bhi.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008aa0:	a201      	add	r2, pc, #4	; (adr r2, 8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8008aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa6:	bf00      	nop
 8008aa8:	08008ae5 	.word	0x08008ae5
 8008aac:	08008ab9 	.word	0x08008ab9
 8008ab0:	08008ac7 	.word	0x08008ac7
 8008ab4:	08008ae5 	.word	0x08008ae5
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ab8:	4b09      	ldr	r3, [pc, #36]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008abc:	4a08      	ldr	r2, [pc, #32]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ac2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008ac4:	e00f      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	3304      	adds	r3, #4
 8008aca:	2102      	movs	r1, #2
 8008acc:	4618      	mov	r0, r3
 8008ace:	f001 fa85 	bl	8009fdc <RCCEx_PLL2_Config>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008ad6:	e006      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	75fb      	strb	r3, [r7, #23]
      break;
 8008adc:	e003      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8008ade:	bf00      	nop
 8008ae0:	58024400 	.word	0x58024400
      break;
 8008ae4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ae6:	7dfb      	ldrb	r3, [r7, #23]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d109      	bne.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008aec:	4bba      	ldr	r3, [pc, #744]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008af0:	f023 0203 	bic.w	r2, r3, #3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008af8:	49b7      	ldr	r1, [pc, #732]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008afa:	4313      	orrs	r3, r2
 8008afc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008afe:	e001      	b.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b00:	7dfb      	ldrb	r3, [r7, #23]
 8008b02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	f000 8086 	beq.w	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008b12:	4bb2      	ldr	r3, [pc, #712]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4ab1      	ldr	r2, [pc, #708]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b1e:	f7f9 fb2f 	bl	8002180 <HAL_GetTick>
 8008b22:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b24:	e009      	b.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b26:	f7f9 fb2b 	bl	8002180 <HAL_GetTick>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	1ad3      	subs	r3, r2, r3
 8008b30:	2b64      	cmp	r3, #100	; 0x64
 8008b32:	d902      	bls.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8008b34:	2303      	movs	r3, #3
 8008b36:	75fb      	strb	r3, [r7, #23]
        break;
 8008b38:	e005      	b.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b3a:	4ba8      	ldr	r3, [pc, #672]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d0ef      	beq.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8008b46:	7dfb      	ldrb	r3, [r7, #23]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d166      	bne.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008b4c:	4ba2      	ldr	r3, [pc, #648]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008b4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b56:	4053      	eors	r3, r2
 8008b58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d013      	beq.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008b60:	4b9d      	ldr	r3, [pc, #628]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b68:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008b6a:	4b9b      	ldr	r3, [pc, #620]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b6e:	4a9a      	ldr	r2, [pc, #616]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b74:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008b76:	4b98      	ldr	r3, [pc, #608]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b7a:	4a97      	ldr	r2, [pc, #604]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b80:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008b82:	4a95      	ldr	r2, [pc, #596]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b92:	d115      	bne.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b94:	f7f9 faf4 	bl	8002180 <HAL_GetTick>
 8008b98:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b9a:	e00b      	b.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b9c:	f7f9 faf0 	bl	8002180 <HAL_GetTick>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	1ad3      	subs	r3, r2, r3
 8008ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d902      	bls.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	75fb      	strb	r3, [r7, #23]
            break;
 8008bb2:	e005      	b.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008bb4:	4b88      	ldr	r3, [pc, #544]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bb8:	f003 0302 	and.w	r3, r3, #2
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d0ed      	beq.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8008bc0:	7dfb      	ldrb	r3, [r7, #23]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d126      	bne.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008bcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bd4:	d10d      	bne.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8008bd6:	4b80      	ldr	r3, [pc, #512]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008bd8:	691b      	ldr	r3, [r3, #16]
 8008bda:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008be4:	0919      	lsrs	r1, r3, #4
 8008be6:	4b7e      	ldr	r3, [pc, #504]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8008be8:	400b      	ands	r3, r1
 8008bea:	497b      	ldr	r1, [pc, #492]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008bec:	4313      	orrs	r3, r2
 8008bee:	610b      	str	r3, [r1, #16]
 8008bf0:	e005      	b.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8008bf2:	4b79      	ldr	r3, [pc, #484]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008bf4:	691b      	ldr	r3, [r3, #16]
 8008bf6:	4a78      	ldr	r2, [pc, #480]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008bf8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008bfc:	6113      	str	r3, [r2, #16]
 8008bfe:	4b76      	ldr	r3, [pc, #472]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008c00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c0c:	4972      	ldr	r1, [pc, #456]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	670b      	str	r3, [r1, #112]	; 0x70
 8008c12:	e004      	b.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008c14:	7dfb      	ldrb	r3, [r7, #23]
 8008c16:	75bb      	strb	r3, [r7, #22]
 8008c18:	e001      	b.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c1a:	7dfb      	ldrb	r3, [r7, #23]
 8008c1c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f003 0301 	and.w	r3, r3, #1
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d07d      	beq.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c2e:	2b28      	cmp	r3, #40	; 0x28
 8008c30:	d866      	bhi.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8008c32:	a201      	add	r2, pc, #4	; (adr r2, 8008c38 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c38:	08008d07 	.word	0x08008d07
 8008c3c:	08008d01 	.word	0x08008d01
 8008c40:	08008d01 	.word	0x08008d01
 8008c44:	08008d01 	.word	0x08008d01
 8008c48:	08008d01 	.word	0x08008d01
 8008c4c:	08008d01 	.word	0x08008d01
 8008c50:	08008d01 	.word	0x08008d01
 8008c54:	08008d01 	.word	0x08008d01
 8008c58:	08008cdd 	.word	0x08008cdd
 8008c5c:	08008d01 	.word	0x08008d01
 8008c60:	08008d01 	.word	0x08008d01
 8008c64:	08008d01 	.word	0x08008d01
 8008c68:	08008d01 	.word	0x08008d01
 8008c6c:	08008d01 	.word	0x08008d01
 8008c70:	08008d01 	.word	0x08008d01
 8008c74:	08008d01 	.word	0x08008d01
 8008c78:	08008cef 	.word	0x08008cef
 8008c7c:	08008d01 	.word	0x08008d01
 8008c80:	08008d01 	.word	0x08008d01
 8008c84:	08008d01 	.word	0x08008d01
 8008c88:	08008d01 	.word	0x08008d01
 8008c8c:	08008d01 	.word	0x08008d01
 8008c90:	08008d01 	.word	0x08008d01
 8008c94:	08008d01 	.word	0x08008d01
 8008c98:	08008d07 	.word	0x08008d07
 8008c9c:	08008d01 	.word	0x08008d01
 8008ca0:	08008d01 	.word	0x08008d01
 8008ca4:	08008d01 	.word	0x08008d01
 8008ca8:	08008d01 	.word	0x08008d01
 8008cac:	08008d01 	.word	0x08008d01
 8008cb0:	08008d01 	.word	0x08008d01
 8008cb4:	08008d01 	.word	0x08008d01
 8008cb8:	08008d07 	.word	0x08008d07
 8008cbc:	08008d01 	.word	0x08008d01
 8008cc0:	08008d01 	.word	0x08008d01
 8008cc4:	08008d01 	.word	0x08008d01
 8008cc8:	08008d01 	.word	0x08008d01
 8008ccc:	08008d01 	.word	0x08008d01
 8008cd0:	08008d01 	.word	0x08008d01
 8008cd4:	08008d01 	.word	0x08008d01
 8008cd8:	08008d07 	.word	0x08008d07
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	3304      	adds	r3, #4
 8008ce0:	2101      	movs	r1, #1
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f001 f97a 	bl	8009fdc <RCCEx_PLL2_Config>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008cec:	e00c      	b.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	3324      	adds	r3, #36	; 0x24
 8008cf2:	2101      	movs	r1, #1
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f001 fa23 	bl	800a140 <RCCEx_PLL3_Config>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008cfe:	e003      	b.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d00:	2301      	movs	r3, #1
 8008d02:	75fb      	strb	r3, [r7, #23]
      break;
 8008d04:	e000      	b.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8008d06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d08:	7dfb      	ldrb	r3, [r7, #23]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d109      	bne.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008d0e:	4b32      	ldr	r3, [pc, #200]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d12:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d1a:	492f      	ldr	r1, [pc, #188]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	654b      	str	r3, [r1, #84]	; 0x54
 8008d20:	e001      	b.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d22:	7dfb      	ldrb	r3, [r7, #23]
 8008d24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 0302 	and.w	r3, r3, #2
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d037      	beq.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d36:	2b05      	cmp	r3, #5
 8008d38:	d820      	bhi.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0x860>
 8008d3a:	a201      	add	r2, pc, #4	; (adr r2, 8008d40 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d40:	08008d83 	.word	0x08008d83
 8008d44:	08008d59 	.word	0x08008d59
 8008d48:	08008d6b 	.word	0x08008d6b
 8008d4c:	08008d83 	.word	0x08008d83
 8008d50:	08008d83 	.word	0x08008d83
 8008d54:	08008d83 	.word	0x08008d83
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	3304      	adds	r3, #4
 8008d5c:	2101      	movs	r1, #1
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f001 f93c 	bl	8009fdc <RCCEx_PLL2_Config>
 8008d64:	4603      	mov	r3, r0
 8008d66:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008d68:	e00c      	b.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	3324      	adds	r3, #36	; 0x24
 8008d6e:	2101      	movs	r1, #1
 8008d70:	4618      	mov	r0, r3
 8008d72:	f001 f9e5 	bl	800a140 <RCCEx_PLL3_Config>
 8008d76:	4603      	mov	r3, r0
 8008d78:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008d7a:	e003      	b.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8008d80:	e000      	b.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8008d82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d84:	7dfb      	ldrb	r3, [r7, #23]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d109      	bne.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008d8a:	4b13      	ldr	r3, [pc, #76]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d8e:	f023 0207 	bic.w	r2, r3, #7
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d96:	4910      	ldr	r1, [pc, #64]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	654b      	str	r3, [r1, #84]	; 0x54
 8008d9c:	e001      	b.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d9e:	7dfb      	ldrb	r3, [r7, #23]
 8008da0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f003 0304 	and.w	r3, r3, #4
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d040      	beq.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008db4:	2b05      	cmp	r3, #5
 8008db6:	d827      	bhi.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8008db8:	a201      	add	r2, pc, #4	; (adr r2, 8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8008dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dbe:	bf00      	nop
 8008dc0:	08008e0f 	.word	0x08008e0f
 8008dc4:	08008de5 	.word	0x08008de5
 8008dc8:	08008df7 	.word	0x08008df7
 8008dcc:	08008e0f 	.word	0x08008e0f
 8008dd0:	08008e0f 	.word	0x08008e0f
 8008dd4:	08008e0f 	.word	0x08008e0f
 8008dd8:	58024400 	.word	0x58024400
 8008ddc:	58024800 	.word	0x58024800
 8008de0:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	3304      	adds	r3, #4
 8008de8:	2101      	movs	r1, #1
 8008dea:	4618      	mov	r0, r3
 8008dec:	f001 f8f6 	bl	8009fdc <RCCEx_PLL2_Config>
 8008df0:	4603      	mov	r3, r0
 8008df2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008df4:	e00c      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	3324      	adds	r3, #36	; 0x24
 8008dfa:	2101      	movs	r1, #1
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f001 f99f 	bl	800a140 <RCCEx_PLL3_Config>
 8008e02:	4603      	mov	r3, r0
 8008e04:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008e06:	e003      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8008e0c:	e000      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8008e0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e10:	7dfb      	ldrb	r3, [r7, #23]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d10a      	bne.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008e16:	4bb2      	ldr	r3, [pc, #712]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e1a:	f023 0207 	bic.w	r2, r3, #7
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e24:	49ae      	ldr	r1, [pc, #696]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008e26:	4313      	orrs	r3, r2
 8008e28:	658b      	str	r3, [r1, #88]	; 0x58
 8008e2a:	e001      	b.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e2c:	7dfb      	ldrb	r3, [r7, #23]
 8008e2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f003 0320 	and.w	r3, r3, #32
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d044      	beq.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e46:	d01b      	beq.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8008e48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e4c:	d805      	bhi.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d022      	beq.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8008e52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e56:	d00a      	beq.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8008e58:	e01b      	b.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8008e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e5e:	d01d      	beq.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8008e60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e64:	d01c      	beq.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8008e66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e6a:	d01b      	beq.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8008e6c:	e011      	b.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	3304      	adds	r3, #4
 8008e72:	2100      	movs	r1, #0
 8008e74:	4618      	mov	r0, r3
 8008e76:	f001 f8b1 	bl	8009fdc <RCCEx_PLL2_Config>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008e7e:	e012      	b.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	3324      	adds	r3, #36	; 0x24
 8008e84:	2102      	movs	r1, #2
 8008e86:	4618      	mov	r0, r3
 8008e88:	f001 f95a 	bl	800a140 <RCCEx_PLL3_Config>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008e90:	e009      	b.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	75fb      	strb	r3, [r7, #23]
      break;
 8008e96:	e006      	b.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008e98:	bf00      	nop
 8008e9a:	e004      	b.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008e9c:	bf00      	nop
 8008e9e:	e002      	b.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008ea0:	bf00      	nop
 8008ea2:	e000      	b.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008ea4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ea6:	7dfb      	ldrb	r3, [r7, #23]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d10a      	bne.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008eac:	4b8c      	ldr	r3, [pc, #560]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eb0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008eba:	4989      	ldr	r1, [pc, #548]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	654b      	str	r3, [r1, #84]	; 0x54
 8008ec0:	e001      	b.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ec2:	7dfb      	ldrb	r3, [r7, #23]
 8008ec4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d044      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008ed8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008edc:	d01b      	beq.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8008ede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ee2:	d805      	bhi.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d022      	beq.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8008ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008eec:	d00a      	beq.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8008eee:	e01b      	b.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8008ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ef4:	d01d      	beq.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8008ef6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008efa:	d01c      	beq.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8008efc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008f00:	d01b      	beq.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8008f02:	e011      	b.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	3304      	adds	r3, #4
 8008f08:	2100      	movs	r1, #0
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f001 f866 	bl	8009fdc <RCCEx_PLL2_Config>
 8008f10:	4603      	mov	r3, r0
 8008f12:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008f14:	e012      	b.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	3324      	adds	r3, #36	; 0x24
 8008f1a:	2102      	movs	r1, #2
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f001 f90f 	bl	800a140 <RCCEx_PLL3_Config>
 8008f22:	4603      	mov	r3, r0
 8008f24:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008f26:	e009      	b.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8008f2c:	e006      	b.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008f2e:	bf00      	nop
 8008f30:	e004      	b.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008f32:	bf00      	nop
 8008f34:	e002      	b.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008f36:	bf00      	nop
 8008f38:	e000      	b.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008f3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f3c:	7dfb      	ldrb	r3, [r7, #23]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d10a      	bne.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008f42:	4b67      	ldr	r3, [pc, #412]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f46:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008f50:	4963      	ldr	r1, [pc, #396]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008f52:	4313      	orrs	r3, r2
 8008f54:	658b      	str	r3, [r1, #88]	; 0x58
 8008f56:	e001      	b.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f58:	7dfb      	ldrb	r3, [r7, #23]
 8008f5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d044      	beq.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f72:	d01b      	beq.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8008f74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f78:	d805      	bhi.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d022      	beq.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f82:	d00a      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008f84:	e01b      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8008f86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f8a:	d01d      	beq.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8008f8c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008f90:	d01c      	beq.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8008f92:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008f96:	d01b      	beq.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8008f98:	e011      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	3304      	adds	r3, #4
 8008f9e:	2100      	movs	r1, #0
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f001 f81b 	bl	8009fdc <RCCEx_PLL2_Config>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008faa:	e012      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	3324      	adds	r3, #36	; 0x24
 8008fb0:	2102      	movs	r1, #2
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f001 f8c4 	bl	800a140 <RCCEx_PLL3_Config>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008fbc:	e009      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	75fb      	strb	r3, [r7, #23]
      break;
 8008fc2:	e006      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008fc4:	bf00      	nop
 8008fc6:	e004      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008fc8:	bf00      	nop
 8008fca:	e002      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008fcc:	bf00      	nop
 8008fce:	e000      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008fd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fd2:	7dfb      	ldrb	r3, [r7, #23]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d10a      	bne.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008fd8:	4b41      	ldr	r3, [pc, #260]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fdc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008fe6:	493e      	ldr	r1, [pc, #248]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	658b      	str	r3, [r1, #88]	; 0x58
 8008fec:	e001      	b.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fee:	7dfb      	ldrb	r3, [r7, #23]
 8008ff0:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f003 0308 	and.w	r3, r3, #8
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d01a      	beq.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009008:	d10a      	bne.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	3324      	adds	r3, #36	; 0x24
 800900e:	2102      	movs	r1, #2
 8009010:	4618      	mov	r0, r3
 8009012:	f001 f895 	bl	800a140 <RCCEx_PLL3_Config>
 8009016:	4603      	mov	r3, r0
 8009018:	2b00      	cmp	r3, #0
 800901a:	d001      	beq.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800901c:	2301      	movs	r3, #1
 800901e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009020:	4b2f      	ldr	r3, [pc, #188]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009024:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800902e:	492c      	ldr	r1, [pc, #176]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009030:	4313      	orrs	r3, r2
 8009032:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f003 0310 	and.w	r3, r3, #16
 800903c:	2b00      	cmp	r3, #0
 800903e:	d01a      	beq.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800904a:	d10a      	bne.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	3324      	adds	r3, #36	; 0x24
 8009050:	2102      	movs	r1, #2
 8009052:	4618      	mov	r0, r3
 8009054:	f001 f874 	bl	800a140 <RCCEx_PLL3_Config>
 8009058:	4603      	mov	r3, r0
 800905a:	2b00      	cmp	r3, #0
 800905c:	d001      	beq.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009062:	4b1f      	ldr	r3, [pc, #124]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009066:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009070:	491b      	ldr	r1, [pc, #108]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009072:	4313      	orrs	r3, r2
 8009074:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800907e:	2b00      	cmp	r3, #0
 8009080:	d032      	beq.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800908c:	d00d      	beq.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800908e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009092:	d016      	beq.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8009094:	2b00      	cmp	r3, #0
 8009096:	d111      	bne.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	3304      	adds	r3, #4
 800909c:	2100      	movs	r1, #0
 800909e:	4618      	mov	r0, r3
 80090a0:	f000 ff9c 	bl	8009fdc <RCCEx_PLL2_Config>
 80090a4:	4603      	mov	r3, r0
 80090a6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80090a8:	e00c      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	3324      	adds	r3, #36	; 0x24
 80090ae:	2102      	movs	r1, #2
 80090b0:	4618      	mov	r0, r3
 80090b2:	f001 f845 	bl	800a140 <RCCEx_PLL3_Config>
 80090b6:	4603      	mov	r3, r0
 80090b8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80090ba:	e003      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	75fb      	strb	r3, [r7, #23]
      break;
 80090c0:	e000      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80090c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090c4:	7dfb      	ldrb	r3, [r7, #23]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d10c      	bne.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80090ca:	4b05      	ldr	r3, [pc, #20]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80090cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80090d8:	4901      	ldr	r1, [pc, #4]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80090da:	4313      	orrs	r3, r2
 80090dc:	658b      	str	r3, [r1, #88]	; 0x58
 80090de:	e003      	b.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80090e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090e4:	7dfb      	ldrb	r3, [r7, #23]
 80090e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d02f      	beq.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80090fe:	d00c      	beq.n	800911a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009100:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009104:	d015      	beq.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8009106:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800910a:	d10f      	bne.n	800912c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800910c:	4b79      	ldr	r3, [pc, #484]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800910e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009110:	4a78      	ldr	r2, [pc, #480]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009112:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009116:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009118:	e00c      	b.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	3324      	adds	r3, #36	; 0x24
 800911e:	2101      	movs	r1, #1
 8009120:	4618      	mov	r0, r3
 8009122:	f001 f80d 	bl	800a140 <RCCEx_PLL3_Config>
 8009126:	4603      	mov	r3, r0
 8009128:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800912a:	e003      	b.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	75fb      	strb	r3, [r7, #23]
      break;
 8009130:	e000      	b.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8009132:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009134:	7dfb      	ldrb	r3, [r7, #23]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d10a      	bne.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800913a:	4b6e      	ldr	r3, [pc, #440]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800913c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800913e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009148:	496a      	ldr	r1, [pc, #424]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800914a:	4313      	orrs	r3, r2
 800914c:	654b      	str	r3, [r1, #84]	; 0x54
 800914e:	e001      	b.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009150:	7dfb      	ldrb	r3, [r7, #23]
 8009152:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800915c:	2b00      	cmp	r3, #0
 800915e:	d029      	beq.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009164:	2b00      	cmp	r3, #0
 8009166:	d003      	beq.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8009168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800916c:	d007      	beq.n	800917e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800916e:	e00f      	b.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009170:	4b60      	ldr	r3, [pc, #384]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009174:	4a5f      	ldr	r2, [pc, #380]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800917a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800917c:	e00b      	b.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	3304      	adds	r3, #4
 8009182:	2102      	movs	r1, #2
 8009184:	4618      	mov	r0, r3
 8009186:	f000 ff29 	bl	8009fdc <RCCEx_PLL2_Config>
 800918a:	4603      	mov	r3, r0
 800918c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800918e:	e002      	b.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8009190:	2301      	movs	r3, #1
 8009192:	75fb      	strb	r3, [r7, #23]
      break;
 8009194:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009196:	7dfb      	ldrb	r3, [r7, #23]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d109      	bne.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800919c:	4b55      	ldr	r3, [pc, #340]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800919e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091a8:	4952      	ldr	r1, [pc, #328]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80091aa:	4313      	orrs	r3, r2
 80091ac:	64cb      	str	r3, [r1, #76]	; 0x4c
 80091ae:	e001      	b.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091b0:	7dfb      	ldrb	r3, [r7, #23]
 80091b2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00a      	beq.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	3324      	adds	r3, #36	; 0x24
 80091c4:	2102      	movs	r1, #2
 80091c6:	4618      	mov	r0, r3
 80091c8:	f000 ffba 	bl	800a140 <RCCEx_PLL3_Config>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d001      	beq.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d02f      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091ea:	d00c      	beq.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80091ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091f0:	d802      	bhi.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d011      	beq.n	800921a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80091f6:	e00d      	b.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80091f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091fc:	d00f      	beq.n	800921e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80091fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009202:	d00e      	beq.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8009204:	e006      	b.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009206:	4b3b      	ldr	r3, [pc, #236]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800920a:	4a3a      	ldr	r2, [pc, #232]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800920c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009210:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009212:	e007      	b.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	75fb      	strb	r3, [r7, #23]
      break;
 8009218:	e004      	b.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800921a:	bf00      	nop
 800921c:	e002      	b.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800921e:	bf00      	nop
 8009220:	e000      	b.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8009222:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009224:	7dfb      	ldrb	r3, [r7, #23]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d109      	bne.n	800923e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800922a:	4b32      	ldr	r3, [pc, #200]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800922c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800922e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009236:	492f      	ldr	r1, [pc, #188]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009238:	4313      	orrs	r3, r2
 800923a:	654b      	str	r3, [r1, #84]	; 0x54
 800923c:	e001      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800923e:	7dfb      	ldrb	r3, [r7, #23]
 8009240:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800924a:	2b00      	cmp	r3, #0
 800924c:	d008      	beq.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800924e:	4b29      	ldr	r3, [pc, #164]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009252:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800925a:	4926      	ldr	r1, [pc, #152]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800925c:	4313      	orrs	r3, r2
 800925e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009268:	2b00      	cmp	r3, #0
 800926a:	d009      	beq.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800926c:	4b21      	ldr	r3, [pc, #132]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800926e:	691b      	ldr	r3, [r3, #16]
 8009270:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800927a:	491e      	ldr	r1, [pc, #120]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800927c:	4313      	orrs	r3, r2
 800927e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009288:	2b00      	cmp	r3, #0
 800928a:	d008      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800928c:	4b19      	ldr	r3, [pc, #100]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800928e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009290:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009298:	4916      	ldr	r1, [pc, #88]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800929a:	4313      	orrs	r3, r2
 800929c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d00d      	beq.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80092aa:	4b12      	ldr	r3, [pc, #72]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80092ac:	691b      	ldr	r3, [r3, #16]
 80092ae:	4a11      	ldr	r2, [pc, #68]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80092b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80092b4:	6113      	str	r3, [r2, #16]
 80092b6:	4b0f      	ldr	r3, [pc, #60]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80092b8:	691a      	ldr	r2, [r3, #16]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80092c0:	490c      	ldr	r1, [pc, #48]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80092c2:	4313      	orrs	r3, r2
 80092c4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	da08      	bge.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80092ce:	4b09      	ldr	r3, [pc, #36]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80092d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092da:	4906      	ldr	r1, [pc, #24]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80092dc:	4313      	orrs	r3, r2
 80092de:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80092e0:	7dbb      	ldrb	r3, [r7, #22]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d101      	bne.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80092e6:	2300      	movs	r3, #0
 80092e8:	e000      	b.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 80092ea:	2301      	movs	r3, #1
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3718      	adds	r7, #24
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	58024400 	.word	0x58024400

080092f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b090      	sub	sp, #64	; 0x40
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009306:	d150      	bne.n	80093aa <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8009308:	4ba1      	ldr	r3, [pc, #644]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800930a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800930c:	f003 0307 	and.w	r3, r3, #7
 8009310:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009314:	2b04      	cmp	r3, #4
 8009316:	d844      	bhi.n	80093a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8009318:	a201      	add	r2, pc, #4	; (adr r2, 8009320 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800931a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800931e:	bf00      	nop
 8009320:	08009335 	.word	0x08009335
 8009324:	08009345 	.word	0x08009345
 8009328:	08009355 	.word	0x08009355
 800932c:	0800939d 	.word	0x0800939d
 8009330:	08009365 	.word	0x08009365
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009338:	4618      	mov	r0, r3
 800933a:	f000 fd03 	bl	8009d44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800933e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009340:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009342:	e241      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009344:	f107 0318 	add.w	r3, r7, #24
 8009348:	4618      	mov	r0, r3
 800934a:	f000 fa63 	bl	8009814 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009352:	e239      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009354:	f107 030c 	add.w	r3, r7, #12
 8009358:	4618      	mov	r0, r3
 800935a:	f000 fba7 	bl	8009aac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009362:	e231      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009364:	4b8a      	ldr	r3, [pc, #552]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009368:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800936c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800936e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009370:	2b00      	cmp	r3, #0
 8009372:	d102      	bne.n	800937a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009374:	4b87      	ldr	r3, [pc, #540]	; (8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009376:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009378:	e226      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800937a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800937c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009380:	d102      	bne.n	8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8009382:	4b85      	ldr	r3, [pc, #532]	; (8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009384:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009386:	e21f      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800938a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800938e:	d102      	bne.n	8009396 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8009390:	4b82      	ldr	r3, [pc, #520]	; (800959c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009392:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009394:	e218      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009396:	2300      	movs	r3, #0
 8009398:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800939a:	e215      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800939c:	4b80      	ldr	r3, [pc, #512]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800939e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093a0:	e212      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80093a2:	2300      	movs	r3, #0
 80093a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093a6:	bf00      	nop
 80093a8:	e20e      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093b0:	d14f      	bne.n	8009452 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80093b2:	4b77      	ldr	r3, [pc, #476]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80093b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093b6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80093ba:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80093bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093be:	2b80      	cmp	r3, #128	; 0x80
 80093c0:	d01c      	beq.n	80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80093c2:	2b80      	cmp	r3, #128	; 0x80
 80093c4:	d804      	bhi.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d008      	beq.n	80093dc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 80093ca:	2b40      	cmp	r3, #64	; 0x40
 80093cc:	d00e      	beq.n	80093ec <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80093ce:	e03c      	b.n	800944a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 80093d0:	2bc0      	cmp	r3, #192	; 0xc0
 80093d2:	d037      	beq.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80093d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093d8:	d018      	beq.n	800940c <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80093da:	e036      	b.n	800944a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093e0:	4618      	mov	r0, r3
 80093e2:	f000 fcaf 	bl	8009d44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80093e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093ea:	e1ed      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093ec:	f107 0318 	add.w	r3, r7, #24
 80093f0:	4618      	mov	r0, r3
 80093f2:	f000 fa0f 	bl	8009814 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093fa:	e1e5      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093fc:	f107 030c 	add.w	r3, r7, #12
 8009400:	4618      	mov	r0, r3
 8009402:	f000 fb53 	bl	8009aac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800940a:	e1dd      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800940c:	4b60      	ldr	r3, [pc, #384]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800940e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009410:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009414:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8009416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009418:	2b00      	cmp	r3, #0
 800941a:	d102      	bne.n	8009422 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800941c:	4b5d      	ldr	r3, [pc, #372]	; (8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800941e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009420:	e1d2      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009424:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009428:	d102      	bne.n	8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800942a:	4b5b      	ldr	r3, [pc, #364]	; (8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800942c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800942e:	e1cb      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009432:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009436:	d102      	bne.n	800943e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8009438:	4b58      	ldr	r3, [pc, #352]	; (800959c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800943a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800943c:	e1c4      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800943e:	2300      	movs	r3, #0
 8009440:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009442:	e1c1      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009444:	4b56      	ldr	r3, [pc, #344]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009446:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009448:	e1be      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800944a:	2300      	movs	r3, #0
 800944c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800944e:	bf00      	nop
 8009450:	e1ba      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009458:	d153      	bne.n	8009502 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800945a:	4b4d      	ldr	r3, [pc, #308]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800945c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800945e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009462:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009466:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800946a:	d01f      	beq.n	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800946c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009470:	d805      	bhi.n	800947e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00a      	beq.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8009476:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800947a:	d00f      	beq.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800947c:	e03d      	b.n	80094fa <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800947e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009482:	d037      	beq.n	80094f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8009484:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009488:	d018      	beq.n	80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800948a:	e036      	b.n	80094fa <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800948c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009490:	4618      	mov	r0, r3
 8009492:	f000 fc57 	bl	8009d44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009498:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800949a:	e195      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800949c:	f107 0318 	add.w	r3, r7, #24
 80094a0:	4618      	mov	r0, r3
 80094a2:	f000 f9b7 	bl	8009814 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094aa:	e18d      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094ac:	f107 030c 	add.w	r3, r7, #12
 80094b0:	4618      	mov	r0, r3
 80094b2:	f000 fafb 	bl	8009aac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094ba:	e185      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80094bc:	4b34      	ldr	r3, [pc, #208]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80094be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80094c4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80094c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d102      	bne.n	80094d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80094cc:	4b31      	ldr	r3, [pc, #196]	; (8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80094ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80094d0:	e17a      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80094d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094d8:	d102      	bne.n	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 80094da:	4b2f      	ldr	r3, [pc, #188]	; (8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80094dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094de:	e173      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80094e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094e6:	d102      	bne.n	80094ee <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 80094e8:	4b2c      	ldr	r3, [pc, #176]	; (800959c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80094ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094ec:	e16c      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80094ee:	2300      	movs	r3, #0
 80094f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094f2:	e169      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80094f4:	4b2a      	ldr	r3, [pc, #168]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80094f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094f8:	e166      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80094fa:	2300      	movs	r3, #0
 80094fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094fe:	bf00      	nop
 8009500:	e162      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009508:	d15d      	bne.n	80095c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800950a:	4b21      	ldr	r3, [pc, #132]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800950c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800950e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009512:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009516:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800951a:	d01f      	beq.n	800955c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800951c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009520:	d805      	bhi.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00a      	beq.n	800953c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8009526:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800952a:	d00f      	beq.n	800954c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800952c:	e047      	b.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800952e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009532:	d041      	beq.n	80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8009534:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009538:	d018      	beq.n	800956c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800953a:	e040      	b.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800953c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009540:	4618      	mov	r0, r3
 8009542:	f000 fbff 	bl	8009d44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009548:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800954a:	e13d      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800954c:	f107 0318 	add.w	r3, r7, #24
 8009550:	4618      	mov	r0, r3
 8009552:	f000 f95f 	bl	8009814 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009556:	69bb      	ldr	r3, [r7, #24]
 8009558:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800955a:	e135      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800955c:	f107 030c 	add.w	r3, r7, #12
 8009560:	4618      	mov	r0, r3
 8009562:	f000 faa3 	bl	8009aac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800956a:	e12d      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800956c:	4b08      	ldr	r3, [pc, #32]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800956e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009570:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009574:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8009576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009578:	2b00      	cmp	r3, #0
 800957a:	d102      	bne.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800957c:	4b05      	ldr	r3, [pc, #20]	; (8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800957e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009580:	e122      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009584:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009588:	d10c      	bne.n	80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800958a:	4b03      	ldr	r3, [pc, #12]	; (8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800958c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800958e:	e11b      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8009590:	58024400 	.word	0x58024400
 8009594:	03d09000 	.word	0x03d09000
 8009598:	003d0900 	.word	0x003d0900
 800959c:	007a1200 	.word	0x007a1200
 80095a0:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80095a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095aa:	d102      	bne.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 80095ac:	4b89      	ldr	r3, [pc, #548]	; (80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80095ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095b0:	e10a      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80095b2:	2300      	movs	r3, #0
 80095b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095b6:	e107      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80095b8:	4b87      	ldr	r3, [pc, #540]	; (80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 80095ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095bc:	e104      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80095be:	2300      	movs	r3, #0
 80095c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095c2:	bf00      	nop
 80095c4:	e100      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095cc:	d153      	bne.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80095ce:	4b83      	ldr	r3, [pc, #524]	; (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80095d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095d2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80095d6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80095d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095de:	d01f      	beq.n	8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80095e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095e4:	d805      	bhi.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d00a      	beq.n	8009600 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80095ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095ee:	d00f      	beq.n	8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80095f0:	e03d      	b.n	800966e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 80095f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80095f6:	d037      	beq.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80095f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095fc:	d018      	beq.n	8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80095fe:	e036      	b.n	800966e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009604:	4618      	mov	r0, r3
 8009606:	f000 fb9d 	bl	8009d44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800960a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800960c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800960e:	e0db      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009610:	f107 0318 	add.w	r3, r7, #24
 8009614:	4618      	mov	r0, r3
 8009616:	f000 f8fd 	bl	8009814 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800961e:	e0d3      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009620:	f107 030c 	add.w	r3, r7, #12
 8009624:	4618      	mov	r0, r3
 8009626:	f000 fa41 	bl	8009aac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800962e:	e0cb      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009630:	4b6a      	ldr	r3, [pc, #424]	; (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009634:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009638:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800963a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800963c:	2b00      	cmp	r3, #0
 800963e:	d102      	bne.n	8009646 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009640:	4b67      	ldr	r3, [pc, #412]	; (80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8009642:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009644:	e0c0      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009648:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800964c:	d102      	bne.n	8009654 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800964e:	4b65      	ldr	r3, [pc, #404]	; (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009650:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009652:	e0b9      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009656:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800965a:	d102      	bne.n	8009662 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800965c:	4b5d      	ldr	r3, [pc, #372]	; (80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800965e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009660:	e0b2      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009662:	2300      	movs	r3, #0
 8009664:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009666:	e0af      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009668:	4b5b      	ldr	r3, [pc, #364]	; (80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800966a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800966c:	e0ac      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800966e:	2300      	movs	r3, #0
 8009670:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009672:	bf00      	nop
 8009674:	e0a8      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800967c:	d13d      	bne.n	80096fa <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800967e:	4b57      	ldr	r3, [pc, #348]	; (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009682:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009686:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800968a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800968e:	d00c      	beq.n	80096aa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009690:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009694:	d011      	beq.n	80096ba <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009696:	2b00      	cmp	r3, #0
 8009698:	d12b      	bne.n	80096f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800969a:	f107 0318 	add.w	r3, r7, #24
 800969e:	4618      	mov	r0, r3
 80096a0:	f000 f8b8 	bl	8009814 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80096a4:	69bb      	ldr	r3, [r7, #24]
 80096a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096a8:	e08e      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096aa:	f107 030c 	add.w	r3, r7, #12
 80096ae:	4618      	mov	r0, r3
 80096b0:	f000 f9fc 	bl	8009aac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096b8:	e086      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80096ba:	4b48      	ldr	r3, [pc, #288]	; (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80096bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80096c2:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80096c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d102      	bne.n	80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80096ca:	4b45      	ldr	r3, [pc, #276]	; (80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80096cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80096ce:	e07b      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80096d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096d6:	d102      	bne.n	80096de <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 80096d8:	4b42      	ldr	r3, [pc, #264]	; (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80096da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096dc:	e074      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80096de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096e4:	d102      	bne.n	80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 80096e6:	4b3b      	ldr	r3, [pc, #236]	; (80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80096e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096ea:	e06d      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80096ec:	2300      	movs	r3, #0
 80096ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096f0:	e06a      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80096f2:	2300      	movs	r3, #0
 80096f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096f6:	bf00      	nop
 80096f8:	e066      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009700:	d11f      	bne.n	8009742 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009702:	4b36      	ldr	r3, [pc, #216]	; (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800970a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800970c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970e:	2b00      	cmp	r3, #0
 8009710:	d003      	beq.n	800971a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8009712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009716:	d008      	beq.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8009718:	e00f      	b.n	800973a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800971a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800971e:	4618      	mov	r0, r3
 8009720:	f000 fb10 	bl	8009d44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009726:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009728:	e04e      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800972a:	f107 0318 	add.w	r3, r7, #24
 800972e:	4618      	mov	r0, r3
 8009730:	f000 f870 	bl	8009814 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009734:	6a3b      	ldr	r3, [r7, #32]
 8009736:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009738:	e046      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800973a:	2300      	movs	r3, #0
 800973c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800973e:	bf00      	nop
 8009740:	e042      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009748:	d13c      	bne.n	80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800974a:	4b24      	ldr	r3, [pc, #144]	; (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800974c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800974e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009752:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009756:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800975a:	d01e      	beq.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800975c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009760:	d805      	bhi.n	800976e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8009762:	2b00      	cmp	r3, #0
 8009764:	d00d      	beq.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8009766:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800976a:	d00e      	beq.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800976c:	e026      	b.n	80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800976e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009772:	d01d      	beq.n	80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8009774:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009778:	d01d      	beq.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800977a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800977e:	d014      	beq.n	80097aa <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8009780:	e01c      	b.n	80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009782:	f000 f831 	bl	80097e8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009786:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8009788:	e01e      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800978a:	f107 0318 	add.w	r3, r7, #24
 800978e:	4618      	mov	r0, r3
 8009790:	f000 f840 	bl	8009814 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009794:	69fb      	ldr	r3, [r7, #28]
 8009796:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009798:	e016      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800979a:	f107 030c 	add.w	r3, r7, #12
 800979e:	4618      	mov	r0, r3
 80097a0:	f000 f984 	bl	8009aac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097a8:	e00e      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 80097aa:	4b0d      	ldr	r3, [pc, #52]	; (80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80097ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097ae:	e00b      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 80097b0:	4b0c      	ldr	r3, [pc, #48]	; (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80097b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097b4:	e008      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 80097b6:	4b07      	ldr	r3, [pc, #28]	; (80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80097b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097ba:	e005      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80097bc:	2300      	movs	r3, #0
 80097be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097c0:	bf00      	nop
 80097c2:	e001      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 80097c4:	2300      	movs	r3, #0
 80097c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80097c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3740      	adds	r7, #64	; 0x40
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	007a1200 	.word	0x007a1200
 80097d8:	00bb8000 	.word	0x00bb8000
 80097dc:	58024400 	.word	0x58024400
 80097e0:	03d09000 	.word	0x03d09000
 80097e4:	003d0900 	.word	0x003d0900

080097e8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80097ec:	f7fe fe3a 	bl	8008464 <HAL_RCC_GetHCLKFreq>
 80097f0:	4601      	mov	r1, r0
 80097f2:	4b06      	ldr	r3, [pc, #24]	; (800980c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80097f4:	6a1b      	ldr	r3, [r3, #32]
 80097f6:	091b      	lsrs	r3, r3, #4
 80097f8:	f003 0307 	and.w	r3, r3, #7
 80097fc:	4a04      	ldr	r2, [pc, #16]	; (8009810 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80097fe:	5cd3      	ldrb	r3, [r2, r3]
 8009800:	f003 031f 	and.w	r3, r3, #31
 8009804:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009808:	4618      	mov	r0, r3
 800980a:	bd80      	pop	{r7, pc}
 800980c:	58024400 	.word	0x58024400
 8009810:	08011c8c 	.word	0x08011c8c

08009814 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009814:	b480      	push	{r7}
 8009816:	b089      	sub	sp, #36	; 0x24
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800981c:	4b9d      	ldr	r3, [pc, #628]	; (8009a94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800981e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009820:	f003 0303 	and.w	r3, r3, #3
 8009824:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009826:	4b9b      	ldr	r3, [pc, #620]	; (8009a94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800982a:	0b1b      	lsrs	r3, r3, #12
 800982c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009830:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009832:	4b98      	ldr	r3, [pc, #608]	; (8009a94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009836:	091b      	lsrs	r3, r3, #4
 8009838:	f003 0301 	and.w	r3, r3, #1
 800983c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800983e:	4b95      	ldr	r3, [pc, #596]	; (8009a94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009842:	08db      	lsrs	r3, r3, #3
 8009844:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009848:	693a      	ldr	r2, [r7, #16]
 800984a:	fb02 f303 	mul.w	r3, r2, r3
 800984e:	ee07 3a90 	vmov	s15, r3
 8009852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009856:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	2b00      	cmp	r3, #0
 800985e:	f000 810a 	beq.w	8009a76 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8009862:	69bb      	ldr	r3, [r7, #24]
 8009864:	2b01      	cmp	r3, #1
 8009866:	d05a      	beq.n	800991e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8009868:	2b01      	cmp	r3, #1
 800986a:	d302      	bcc.n	8009872 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800986c:	2b02      	cmp	r3, #2
 800986e:	d078      	beq.n	8009962 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8009870:	e099      	b.n	80099a6 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009872:	4b88      	ldr	r3, [pc, #544]	; (8009a94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f003 0320 	and.w	r3, r3, #32
 800987a:	2b00      	cmp	r3, #0
 800987c:	d02d      	beq.n	80098da <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800987e:	4b85      	ldr	r3, [pc, #532]	; (8009a94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	08db      	lsrs	r3, r3, #3
 8009884:	f003 0303 	and.w	r3, r3, #3
 8009888:	4a83      	ldr	r2, [pc, #524]	; (8009a98 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800988a:	fa22 f303 	lsr.w	r3, r2, r3
 800988e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	ee07 3a90 	vmov	s15, r3
 8009896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	ee07 3a90 	vmov	s15, r3
 80098a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098a8:	4b7a      	ldr	r3, [pc, #488]	; (8009a94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80098aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098b0:	ee07 3a90 	vmov	s15, r3
 80098b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80098bc:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009a9c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80098c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098d4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80098d8:	e087      	b.n	80099ea <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	ee07 3a90 	vmov	s15, r3
 80098e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098e4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80098e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098ec:	4b69      	ldr	r3, [pc, #420]	; (8009a94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80098ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098f4:	ee07 3a90 	vmov	s15, r3
 80098f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009900:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009a9c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009904:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009908:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800990c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009910:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009918:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800991c:	e065      	b.n	80099ea <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	ee07 3a90 	vmov	s15, r3
 8009924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009928:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800992c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009930:	4b58      	ldr	r3, [pc, #352]	; (8009a94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009938:	ee07 3a90 	vmov	s15, r3
 800993c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009940:	ed97 6a03 	vldr	s12, [r7, #12]
 8009944:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009a9c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009948:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800994c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009950:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009954:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800995c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009960:	e043      	b.n	80099ea <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	ee07 3a90 	vmov	s15, r3
 8009968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800996c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8009970:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009974:	4b47      	ldr	r3, [pc, #284]	; (8009a94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800997c:	ee07 3a90 	vmov	s15, r3
 8009980:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009984:	ed97 6a03 	vldr	s12, [r7, #12]
 8009988:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009a9c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800998c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009990:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009994:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009998:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800999c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099a4:	e021      	b.n	80099ea <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	ee07 3a90 	vmov	s15, r3
 80099ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099b0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8009aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80099b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099b8:	4b36      	ldr	r3, [pc, #216]	; (8009a94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80099ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099c0:	ee07 3a90 	vmov	s15, r3
 80099c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80099cc:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009a9c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80099d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099e8:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80099ea:	4b2a      	ldr	r3, [pc, #168]	; (8009a94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80099ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ee:	0a5b      	lsrs	r3, r3, #9
 80099f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099f4:	ee07 3a90 	vmov	s15, r3
 80099f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a04:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a10:	ee17 2a90 	vmov	r2, s15
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009a18:	4b1e      	ldr	r3, [pc, #120]	; (8009a94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a1c:	0c1b      	lsrs	r3, r3, #16
 8009a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a22:	ee07 3a90 	vmov	s15, r3
 8009a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a32:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a3e:	ee17 2a90 	vmov	r2, s15
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009a46:	4b13      	ldr	r3, [pc, #76]	; (8009a94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a4a:	0e1b      	lsrs	r3, r3, #24
 8009a4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a50:	ee07 3a90 	vmov	s15, r3
 8009a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a60:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a6c:	ee17 2a90 	vmov	r2, s15
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009a74:	e008      	b.n	8009a88 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2200      	movs	r2, #0
 8009a86:	609a      	str	r2, [r3, #8]
}
 8009a88:	bf00      	nop
 8009a8a:	3724      	adds	r7, #36	; 0x24
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr
 8009a94:	58024400 	.word	0x58024400
 8009a98:	03d09000 	.word	0x03d09000
 8009a9c:	46000000 	.word	0x46000000
 8009aa0:	4c742400 	.word	0x4c742400
 8009aa4:	4a742400 	.word	0x4a742400
 8009aa8:	4af42400 	.word	0x4af42400

08009aac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b089      	sub	sp, #36	; 0x24
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ab4:	4b9d      	ldr	r3, [pc, #628]	; (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ab8:	f003 0303 	and.w	r3, r3, #3
 8009abc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009abe:	4b9b      	ldr	r3, [pc, #620]	; (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ac2:	0d1b      	lsrs	r3, r3, #20
 8009ac4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ac8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009aca:	4b98      	ldr	r3, [pc, #608]	; (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ace:	0a1b      	lsrs	r3, r3, #8
 8009ad0:	f003 0301 	and.w	r3, r3, #1
 8009ad4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009ad6:	4b95      	ldr	r3, [pc, #596]	; (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ada:	08db      	lsrs	r3, r3, #3
 8009adc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ae0:	693a      	ldr	r2, [r7, #16]
 8009ae2:	fb02 f303 	mul.w	r3, r2, r3
 8009ae6:	ee07 3a90 	vmov	s15, r3
 8009aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	f000 810a 	beq.w	8009d0e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8009afa:	69bb      	ldr	r3, [r7, #24]
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	d05a      	beq.n	8009bb6 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d302      	bcc.n	8009b0a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8009b04:	2b02      	cmp	r3, #2
 8009b06:	d078      	beq.n	8009bfa <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8009b08:	e099      	b.n	8009c3e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b0a:	4b88      	ldr	r3, [pc, #544]	; (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f003 0320 	and.w	r3, r3, #32
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d02d      	beq.n	8009b72 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b16:	4b85      	ldr	r3, [pc, #532]	; (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	08db      	lsrs	r3, r3, #3
 8009b1c:	f003 0303 	and.w	r3, r3, #3
 8009b20:	4a83      	ldr	r2, [pc, #524]	; (8009d30 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8009b22:	fa22 f303 	lsr.w	r3, r2, r3
 8009b26:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	ee07 3a90 	vmov	s15, r3
 8009b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	ee07 3a90 	vmov	s15, r3
 8009b38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b40:	4b7a      	ldr	r3, [pc, #488]	; (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b48:	ee07 3a90 	vmov	s15, r3
 8009b4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b50:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b54:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009d34 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009b58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b6c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009b70:	e087      	b.n	8009c82 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	ee07 3a90 	vmov	s15, r3
 8009b78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b7c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009d38 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8009b80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b84:	4b69      	ldr	r3, [pc, #420]	; (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b8c:	ee07 3a90 	vmov	s15, r3
 8009b90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b94:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b98:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009d34 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009b9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ba0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ba4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ba8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bb0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009bb4:	e065      	b.n	8009c82 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	ee07 3a90 	vmov	s15, r3
 8009bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bc0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8009bc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bc8:	4b58      	ldr	r3, [pc, #352]	; (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bd0:	ee07 3a90 	vmov	s15, r3
 8009bd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bd8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bdc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009d34 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009be0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009be4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009be8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bf4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009bf8:	e043      	b.n	8009c82 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	ee07 3a90 	vmov	s15, r3
 8009c00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c04:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009d40 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8009c08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c0c:	4b47      	ldr	r3, [pc, #284]	; (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c14:	ee07 3a90 	vmov	s15, r3
 8009c18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c1c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c20:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009d34 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009c24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c38:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c3c:	e021      	b.n	8009c82 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	ee07 3a90 	vmov	s15, r3
 8009c44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c48:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8009d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8009c4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c50:	4b36      	ldr	r3, [pc, #216]	; (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c58:	ee07 3a90 	vmov	s15, r3
 8009c5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c60:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c64:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009d34 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009c68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c7c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c80:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009c82:	4b2a      	ldr	r3, [pc, #168]	; (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c86:	0a5b      	lsrs	r3, r3, #9
 8009c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c8c:	ee07 3a90 	vmov	s15, r3
 8009c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ca8:	ee17 2a90 	vmov	r2, s15
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009cb0:	4b1e      	ldr	r3, [pc, #120]	; (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cb4:	0c1b      	lsrs	r3, r3, #16
 8009cb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cba:	ee07 3a90 	vmov	s15, r3
 8009cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cca:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cd6:	ee17 2a90 	vmov	r2, s15
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009cde:	4b13      	ldr	r3, [pc, #76]	; (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce2:	0e1b      	lsrs	r3, r3, #24
 8009ce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ce8:	ee07 3a90 	vmov	s15, r3
 8009cec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cf0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cf4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cf8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d04:	ee17 2a90 	vmov	r2, s15
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009d0c:	e008      	b.n	8009d20 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2200      	movs	r2, #0
 8009d12:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2200      	movs	r2, #0
 8009d18:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	609a      	str	r2, [r3, #8]
}
 8009d20:	bf00      	nop
 8009d22:	3724      	adds	r7, #36	; 0x24
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr
 8009d2c:	58024400 	.word	0x58024400
 8009d30:	03d09000 	.word	0x03d09000
 8009d34:	46000000 	.word	0x46000000
 8009d38:	4c742400 	.word	0x4c742400
 8009d3c:	4a742400 	.word	0x4a742400
 8009d40:	4af42400 	.word	0x4af42400

08009d44 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b089      	sub	sp, #36	; 0x24
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d4c:	4b9d      	ldr	r3, [pc, #628]	; (8009fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d50:	f003 0303 	and.w	r3, r3, #3
 8009d54:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009d56:	4b9b      	ldr	r3, [pc, #620]	; (8009fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d5a:	091b      	lsrs	r3, r3, #4
 8009d5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d60:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009d62:	4b98      	ldr	r3, [pc, #608]	; (8009fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d66:	f003 0301 	and.w	r3, r3, #1
 8009d6a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009d6c:	4b95      	ldr	r3, [pc, #596]	; (8009fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d70:	08db      	lsrs	r3, r3, #3
 8009d72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d76:	693a      	ldr	r2, [r7, #16]
 8009d78:	fb02 f303 	mul.w	r3, r2, r3
 8009d7c:	ee07 3a90 	vmov	s15, r3
 8009d80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d84:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	f000 810a 	beq.w	8009fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8009d90:	69bb      	ldr	r3, [r7, #24]
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	d05a      	beq.n	8009e4c <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d302      	bcc.n	8009da0 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8009d9a:	2b02      	cmp	r3, #2
 8009d9c:	d078      	beq.n	8009e90 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8009d9e:	e099      	b.n	8009ed4 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009da0:	4b88      	ldr	r3, [pc, #544]	; (8009fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f003 0320 	and.w	r3, r3, #32
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d02d      	beq.n	8009e08 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009dac:	4b85      	ldr	r3, [pc, #532]	; (8009fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	08db      	lsrs	r3, r3, #3
 8009db2:	f003 0303 	and.w	r3, r3, #3
 8009db6:	4a84      	ldr	r2, [pc, #528]	; (8009fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8009db8:	fa22 f303 	lsr.w	r3, r2, r3
 8009dbc:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	ee07 3a90 	vmov	s15, r3
 8009dc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	ee07 3a90 	vmov	s15, r3
 8009dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dd6:	4b7b      	ldr	r3, [pc, #492]	; (8009fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dde:	ee07 3a90 	vmov	s15, r3
 8009de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009de6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dea:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009fcc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009df6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e02:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009e06:	e087      	b.n	8009f18 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	ee07 3a90 	vmov	s15, r3
 8009e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e12:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8009e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e1a:	4b6a      	ldr	r3, [pc, #424]	; (8009fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e22:	ee07 3a90 	vmov	s15, r3
 8009e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e2e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009fcc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e4a:	e065      	b.n	8009f18 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	ee07 3a90 	vmov	s15, r3
 8009e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e56:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009fd4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8009e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e5e:	4b59      	ldr	r3, [pc, #356]	; (8009fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e66:	ee07 3a90 	vmov	s15, r3
 8009e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e72:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009fcc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e8e:	e043      	b.n	8009f18 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	ee07 3a90 	vmov	s15, r3
 8009e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e9a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ea2:	4b48      	ldr	r3, [pc, #288]	; (8009fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eaa:	ee07 3a90 	vmov	s15, r3
 8009eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009eb6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009fcc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ece:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ed2:	e021      	b.n	8009f18 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	ee07 3a90 	vmov	s15, r3
 8009eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ede:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009fd4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8009ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ee6:	4b37      	ldr	r3, [pc, #220]	; (8009fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eee:	ee07 3a90 	vmov	s15, r3
 8009ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ef6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009efa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009fcc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f16:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009f18:	4b2a      	ldr	r3, [pc, #168]	; (8009fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f1c:	0a5b      	lsrs	r3, r3, #9
 8009f1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f22:	ee07 3a90 	vmov	s15, r3
 8009f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f32:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f3e:	ee17 2a90 	vmov	r2, s15
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009f46:	4b1f      	ldr	r3, [pc, #124]	; (8009fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f4a:	0c1b      	lsrs	r3, r3, #16
 8009f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f50:	ee07 3a90 	vmov	s15, r3
 8009f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f60:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f6c:	ee17 2a90 	vmov	r2, s15
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009f74:	4b13      	ldr	r3, [pc, #76]	; (8009fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f78:	0e1b      	lsrs	r3, r3, #24
 8009f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f7e:	ee07 3a90 	vmov	s15, r3
 8009f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f9a:	ee17 2a90 	vmov	r2, s15
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009fa2:	e008      	b.n	8009fb6 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	609a      	str	r2, [r3, #8]
}
 8009fb6:	bf00      	nop
 8009fb8:	3724      	adds	r7, #36	; 0x24
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop
 8009fc4:	58024400 	.word	0x58024400
 8009fc8:	03d09000 	.word	0x03d09000
 8009fcc:	46000000 	.word	0x46000000
 8009fd0:	4c742400 	.word	0x4c742400
 8009fd4:	4a742400 	.word	0x4a742400
 8009fd8:	4af42400 	.word	0x4af42400

08009fdc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009fea:	4b53      	ldr	r3, [pc, #332]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 8009fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fee:	f003 0303 	and.w	r3, r3, #3
 8009ff2:	2b03      	cmp	r3, #3
 8009ff4:	d101      	bne.n	8009ffa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	e099      	b.n	800a12e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009ffa:	4b4f      	ldr	r3, [pc, #316]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a4e      	ldr	r2, [pc, #312]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a000:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a004:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a006:	f7f8 f8bb 	bl	8002180 <HAL_GetTick>
 800a00a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a00c:	e008      	b.n	800a020 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a00e:	f7f8 f8b7 	bl	8002180 <HAL_GetTick>
 800a012:	4602      	mov	r2, r0
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	1ad3      	subs	r3, r2, r3
 800a018:	2b02      	cmp	r3, #2
 800a01a:	d901      	bls.n	800a020 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a01c:	2303      	movs	r3, #3
 800a01e:	e086      	b.n	800a12e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a020:	4b45      	ldr	r3, [pc, #276]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d1f0      	bne.n	800a00e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a02c:	4b42      	ldr	r3, [pc, #264]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a02e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a030:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	031b      	lsls	r3, r3, #12
 800a03a:	493f      	ldr	r1, [pc, #252]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a03c:	4313      	orrs	r3, r2
 800a03e:	628b      	str	r3, [r1, #40]	; 0x28
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	3b01      	subs	r3, #1
 800a046:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	689b      	ldr	r3, [r3, #8]
 800a04e:	3b01      	subs	r3, #1
 800a050:	025b      	lsls	r3, r3, #9
 800a052:	b29b      	uxth	r3, r3
 800a054:	431a      	orrs	r2, r3
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	3b01      	subs	r3, #1
 800a05c:	041b      	lsls	r3, r3, #16
 800a05e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a062:	431a      	orrs	r2, r3
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	691b      	ldr	r3, [r3, #16]
 800a068:	3b01      	subs	r3, #1
 800a06a:	061b      	lsls	r3, r3, #24
 800a06c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a070:	4931      	ldr	r1, [pc, #196]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a072:	4313      	orrs	r3, r2
 800a074:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a076:	4b30      	ldr	r3, [pc, #192]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	695b      	ldr	r3, [r3, #20]
 800a082:	492d      	ldr	r1, [pc, #180]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a084:	4313      	orrs	r3, r2
 800a086:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a088:	4b2b      	ldr	r3, [pc, #172]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a08c:	f023 0220 	bic.w	r2, r3, #32
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	699b      	ldr	r3, [r3, #24]
 800a094:	4928      	ldr	r1, [pc, #160]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a096:	4313      	orrs	r3, r2
 800a098:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a09a:	4b27      	ldr	r3, [pc, #156]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a09c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a09e:	4a26      	ldr	r2, [pc, #152]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a0a0:	f023 0310 	bic.w	r3, r3, #16
 800a0a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a0a6:	4b24      	ldr	r3, [pc, #144]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a0a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0aa:	4b24      	ldr	r3, [pc, #144]	; (800a13c <RCCEx_PLL2_Config+0x160>)
 800a0ac:	4013      	ands	r3, r2
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	69d2      	ldr	r2, [r2, #28]
 800a0b2:	00d2      	lsls	r2, r2, #3
 800a0b4:	4920      	ldr	r1, [pc, #128]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a0ba:	4b1f      	ldr	r3, [pc, #124]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0be:	4a1e      	ldr	r2, [pc, #120]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a0c0:	f043 0310 	orr.w	r3, r3, #16
 800a0c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d106      	bne.n	800a0da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a0cc:	4b1a      	ldr	r3, [pc, #104]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d0:	4a19      	ldr	r2, [pc, #100]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a0d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a0d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a0d8:	e00f      	b.n	800a0fa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d106      	bne.n	800a0ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a0e0:	4b15      	ldr	r3, [pc, #84]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e4:	4a14      	ldr	r2, [pc, #80]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a0e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a0ec:	e005      	b.n	800a0fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a0ee:	4b12      	ldr	r3, [pc, #72]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a0f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f2:	4a11      	ldr	r2, [pc, #68]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a0f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a0f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a0fa:	4b0f      	ldr	r3, [pc, #60]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4a0e      	ldr	r2, [pc, #56]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a100:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a104:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a106:	f7f8 f83b 	bl	8002180 <HAL_GetTick>
 800a10a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a10c:	e008      	b.n	800a120 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a10e:	f7f8 f837 	bl	8002180 <HAL_GetTick>
 800a112:	4602      	mov	r2, r0
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	1ad3      	subs	r3, r2, r3
 800a118:	2b02      	cmp	r3, #2
 800a11a:	d901      	bls.n	800a120 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a11c:	2303      	movs	r3, #3
 800a11e:	e006      	b.n	800a12e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a120:	4b05      	ldr	r3, [pc, #20]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d0f0      	beq.n	800a10e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a12c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3710      	adds	r7, #16
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
 800a136:	bf00      	nop
 800a138:	58024400 	.word	0x58024400
 800a13c:	ffff0007 	.word	0xffff0007

0800a140 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a14a:	2300      	movs	r3, #0
 800a14c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a14e:	4b53      	ldr	r3, [pc, #332]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a152:	f003 0303 	and.w	r3, r3, #3
 800a156:	2b03      	cmp	r3, #3
 800a158:	d101      	bne.n	800a15e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	e099      	b.n	800a292 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a15e:	4b4f      	ldr	r3, [pc, #316]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a4e      	ldr	r2, [pc, #312]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a168:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a16a:	f7f8 f809 	bl	8002180 <HAL_GetTick>
 800a16e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a170:	e008      	b.n	800a184 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a172:	f7f8 f805 	bl	8002180 <HAL_GetTick>
 800a176:	4602      	mov	r2, r0
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	1ad3      	subs	r3, r2, r3
 800a17c:	2b02      	cmp	r3, #2
 800a17e:	d901      	bls.n	800a184 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a180:	2303      	movs	r3, #3
 800a182:	e086      	b.n	800a292 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a184:	4b45      	ldr	r3, [pc, #276]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d1f0      	bne.n	800a172 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a190:	4b42      	ldr	r3, [pc, #264]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a194:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	051b      	lsls	r3, r3, #20
 800a19e:	493f      	ldr	r1, [pc, #252]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	628b      	str	r3, [r1, #40]	; 0x28
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	3b01      	subs	r3, #1
 800a1aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	3b01      	subs	r3, #1
 800a1b4:	025b      	lsls	r3, r3, #9
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	431a      	orrs	r2, r3
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	68db      	ldr	r3, [r3, #12]
 800a1be:	3b01      	subs	r3, #1
 800a1c0:	041b      	lsls	r3, r3, #16
 800a1c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a1c6:	431a      	orrs	r2, r3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	691b      	ldr	r3, [r3, #16]
 800a1cc:	3b01      	subs	r3, #1
 800a1ce:	061b      	lsls	r3, r3, #24
 800a1d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a1d4:	4931      	ldr	r1, [pc, #196]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a1da:	4b30      	ldr	r3, [pc, #192]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	695b      	ldr	r3, [r3, #20]
 800a1e6:	492d      	ldr	r1, [pc, #180]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a1ec:	4b2b      	ldr	r3, [pc, #172]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	699b      	ldr	r3, [r3, #24]
 800a1f8:	4928      	ldr	r1, [pc, #160]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a1fe:	4b27      	ldr	r3, [pc, #156]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a202:	4a26      	ldr	r2, [pc, #152]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a208:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a20a:	4b24      	ldr	r3, [pc, #144]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a20c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a20e:	4b24      	ldr	r3, [pc, #144]	; (800a2a0 <RCCEx_PLL3_Config+0x160>)
 800a210:	4013      	ands	r3, r2
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	69d2      	ldr	r2, [r2, #28]
 800a216:	00d2      	lsls	r2, r2, #3
 800a218:	4920      	ldr	r1, [pc, #128]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a21a:	4313      	orrs	r3, r2
 800a21c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a21e:	4b1f      	ldr	r3, [pc, #124]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a222:	4a1e      	ldr	r2, [pc, #120]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a228:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d106      	bne.n	800a23e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a230:	4b1a      	ldr	r3, [pc, #104]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a234:	4a19      	ldr	r2, [pc, #100]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a236:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a23a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a23c:	e00f      	b.n	800a25e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	2b01      	cmp	r3, #1
 800a242:	d106      	bne.n	800a252 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a244:	4b15      	ldr	r3, [pc, #84]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a248:	4a14      	ldr	r2, [pc, #80]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a24a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a24e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a250:	e005      	b.n	800a25e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a252:	4b12      	ldr	r3, [pc, #72]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a256:	4a11      	ldr	r2, [pc, #68]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a258:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a25c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a25e:	4b0f      	ldr	r3, [pc, #60]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a0e      	ldr	r2, [pc, #56]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a268:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a26a:	f7f7 ff89 	bl	8002180 <HAL_GetTick>
 800a26e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a270:	e008      	b.n	800a284 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a272:	f7f7 ff85 	bl	8002180 <HAL_GetTick>
 800a276:	4602      	mov	r2, r0
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	1ad3      	subs	r3, r2, r3
 800a27c:	2b02      	cmp	r3, #2
 800a27e:	d901      	bls.n	800a284 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a280:	2303      	movs	r3, #3
 800a282:	e006      	b.n	800a292 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a284:	4b05      	ldr	r3, [pc, #20]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d0f0      	beq.n	800a272 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a290:	7bfb      	ldrb	r3, [r7, #15]
}
 800a292:	4618      	mov	r0, r3
 800a294:	3710      	adds	r7, #16
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	58024400 	.word	0x58024400
 800a2a0:	ffff0007 	.word	0xffff0007

0800a2a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b082      	sub	sp, #8
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d101      	bne.n	800a2b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	e049      	b.n	800a34a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d106      	bne.n	800a2d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f7f7 fc1c 	bl	8001b08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2202      	movs	r2, #2
 800a2d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	3304      	adds	r3, #4
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	4610      	mov	r0, r2
 800a2e4:	f000 f934 	bl	800a550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2201      	movs	r2, #1
 800a304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2201      	movs	r2, #1
 800a314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2201      	movs	r2, #1
 800a31c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2201      	movs	r2, #1
 800a324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2201      	movs	r2, #1
 800a32c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2201      	movs	r2, #1
 800a334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2201      	movs	r2, #1
 800a344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a348:	2300      	movs	r3, #0
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3708      	adds	r7, #8
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
	...

0800a354 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a354:	b480      	push	{r7}
 800a356:	b085      	sub	sp, #20
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a362:	b2db      	uxtb	r3, r3
 800a364:	2b01      	cmp	r3, #1
 800a366:	d001      	beq.n	800a36c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a368:	2301      	movs	r3, #1
 800a36a:	e019      	b.n	800a3a0 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2202      	movs	r2, #2
 800a370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	689a      	ldr	r2, [r3, #8]
 800a37a:	4b0c      	ldr	r3, [pc, #48]	; (800a3ac <HAL_TIM_Base_Start+0x58>)
 800a37c:	4013      	ands	r3, r2
 800a37e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2b06      	cmp	r3, #6
 800a384:	d00b      	beq.n	800a39e <HAL_TIM_Base_Start+0x4a>
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a38c:	d007      	beq.n	800a39e <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f042 0201 	orr.w	r2, r2, #1
 800a39c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a39e:	2300      	movs	r3, #0
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3714      	adds	r7, #20
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr
 800a3ac:	00010007 	.word	0x00010007

0800a3b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b084      	sub	sp, #16
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	d101      	bne.n	800a3c8 <HAL_TIM_ConfigClockSource+0x18>
 800a3c4:	2302      	movs	r3, #2
 800a3c6:	e0b7      	b.n	800a538 <HAL_TIM_ConfigClockSource+0x188>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2202      	movs	r2, #2
 800a3d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	689b      	ldr	r3, [r3, #8]
 800a3de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a3e0:	68fa      	ldr	r2, [r7, #12]
 800a3e2:	4b57      	ldr	r3, [pc, #348]	; (800a540 <HAL_TIM_ConfigClockSource+0x190>)
 800a3e4:	4013      	ands	r3, r2
 800a3e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a3ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	68fa      	ldr	r2, [r7, #12]
 800a3f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2b70      	cmp	r3, #112	; 0x70
 800a3fe:	d02e      	beq.n	800a45e <HAL_TIM_ConfigClockSource+0xae>
 800a400:	2b70      	cmp	r3, #112	; 0x70
 800a402:	d812      	bhi.n	800a42a <HAL_TIM_ConfigClockSource+0x7a>
 800a404:	2b30      	cmp	r3, #48	; 0x30
 800a406:	f000 8084 	beq.w	800a512 <HAL_TIM_ConfigClockSource+0x162>
 800a40a:	2b30      	cmp	r3, #48	; 0x30
 800a40c:	d806      	bhi.n	800a41c <HAL_TIM_ConfigClockSource+0x6c>
 800a40e:	2b10      	cmp	r3, #16
 800a410:	d07f      	beq.n	800a512 <HAL_TIM_ConfigClockSource+0x162>
 800a412:	2b20      	cmp	r3, #32
 800a414:	d07d      	beq.n	800a512 <HAL_TIM_ConfigClockSource+0x162>
 800a416:	2b00      	cmp	r3, #0
 800a418:	d07b      	beq.n	800a512 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a41a:	e084      	b.n	800a526 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800a41c:	2b50      	cmp	r3, #80	; 0x50
 800a41e:	d048      	beq.n	800a4b2 <HAL_TIM_ConfigClockSource+0x102>
 800a420:	2b60      	cmp	r3, #96	; 0x60
 800a422:	d056      	beq.n	800a4d2 <HAL_TIM_ConfigClockSource+0x122>
 800a424:	2b40      	cmp	r3, #64	; 0x40
 800a426:	d064      	beq.n	800a4f2 <HAL_TIM_ConfigClockSource+0x142>
      break;
 800a428:	e07d      	b.n	800a526 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800a42a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a42e:	d070      	beq.n	800a512 <HAL_TIM_ConfigClockSource+0x162>
 800a430:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a434:	d809      	bhi.n	800a44a <HAL_TIM_ConfigClockSource+0x9a>
 800a436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a43a:	d027      	beq.n	800a48c <HAL_TIM_ConfigClockSource+0xdc>
 800a43c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a440:	d067      	beq.n	800a512 <HAL_TIM_ConfigClockSource+0x162>
 800a442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a446:	d06d      	beq.n	800a524 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a448:	e06d      	b.n	800a526 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800a44a:	4a3e      	ldr	r2, [pc, #248]	; (800a544 <HAL_TIM_ConfigClockSource+0x194>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d060      	beq.n	800a512 <HAL_TIM_ConfigClockSource+0x162>
 800a450:	4a3d      	ldr	r2, [pc, #244]	; (800a548 <HAL_TIM_ConfigClockSource+0x198>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d05d      	beq.n	800a512 <HAL_TIM_ConfigClockSource+0x162>
 800a456:	4a3d      	ldr	r2, [pc, #244]	; (800a54c <HAL_TIM_ConfigClockSource+0x19c>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d05a      	beq.n	800a512 <HAL_TIM_ConfigClockSource+0x162>
      break;
 800a45c:	e063      	b.n	800a526 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6818      	ldr	r0, [r3, #0]
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	6899      	ldr	r1, [r3, #8]
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	685a      	ldr	r2, [r3, #4]
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	68db      	ldr	r3, [r3, #12]
 800a46e:	f000 f987 	bl	800a780 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a480:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	68fa      	ldr	r2, [r7, #12]
 800a488:	609a      	str	r2, [r3, #8]
      break;
 800a48a:	e04c      	b.n	800a526 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6818      	ldr	r0, [r3, #0]
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	6899      	ldr	r1, [r3, #8]
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	685a      	ldr	r2, [r3, #4]
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	68db      	ldr	r3, [r3, #12]
 800a49c:	f000 f970 	bl	800a780 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	689a      	ldr	r2, [r3, #8]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a4ae:	609a      	str	r2, [r3, #8]
      break;
 800a4b0:	e039      	b.n	800a526 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6818      	ldr	r0, [r3, #0]
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	6859      	ldr	r1, [r3, #4]
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	68db      	ldr	r3, [r3, #12]
 800a4be:	461a      	mov	r2, r3
 800a4c0:	f000 f8e0 	bl	800a684 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	2150      	movs	r1, #80	; 0x50
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f000 f93a 	bl	800a744 <TIM_ITRx_SetConfig>
      break;
 800a4d0:	e029      	b.n	800a526 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6818      	ldr	r0, [r3, #0]
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	6859      	ldr	r1, [r3, #4]
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	68db      	ldr	r3, [r3, #12]
 800a4de:	461a      	mov	r2, r3
 800a4e0:	f000 f8ff 	bl	800a6e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	2160      	movs	r1, #96	; 0x60
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f000 f92a 	bl	800a744 <TIM_ITRx_SetConfig>
      break;
 800a4f0:	e019      	b.n	800a526 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6818      	ldr	r0, [r3, #0]
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	6859      	ldr	r1, [r3, #4]
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	68db      	ldr	r3, [r3, #12]
 800a4fe:	461a      	mov	r2, r3
 800a500:	f000 f8c0 	bl	800a684 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	2140      	movs	r1, #64	; 0x40
 800a50a:	4618      	mov	r0, r3
 800a50c:	f000 f91a 	bl	800a744 <TIM_ITRx_SetConfig>
      break;
 800a510:	e009      	b.n	800a526 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4619      	mov	r1, r3
 800a51c:	4610      	mov	r0, r2
 800a51e:	f000 f911 	bl	800a744 <TIM_ITRx_SetConfig>
      break;
 800a522:	e000      	b.n	800a526 <HAL_TIM_ConfigClockSource+0x176>
      break;
 800a524:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2201      	movs	r2, #1
 800a52a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2200      	movs	r2, #0
 800a532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a536:	2300      	movs	r3, #0
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3710      	adds	r7, #16
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	ffceff88 	.word	0xffceff88
 800a544:	00100030 	.word	0x00100030
 800a548:	00100040 	.word	0x00100040
 800a54c:	00100020 	.word	0x00100020

0800a550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a550:	b480      	push	{r7}
 800a552:	b085      	sub	sp, #20
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	4a40      	ldr	r2, [pc, #256]	; (800a664 <TIM_Base_SetConfig+0x114>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d013      	beq.n	800a590 <TIM_Base_SetConfig+0x40>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a56e:	d00f      	beq.n	800a590 <TIM_Base_SetConfig+0x40>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	4a3d      	ldr	r2, [pc, #244]	; (800a668 <TIM_Base_SetConfig+0x118>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d00b      	beq.n	800a590 <TIM_Base_SetConfig+0x40>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	4a3c      	ldr	r2, [pc, #240]	; (800a66c <TIM_Base_SetConfig+0x11c>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d007      	beq.n	800a590 <TIM_Base_SetConfig+0x40>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	4a3b      	ldr	r2, [pc, #236]	; (800a670 <TIM_Base_SetConfig+0x120>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d003      	beq.n	800a590 <TIM_Base_SetConfig+0x40>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	4a3a      	ldr	r2, [pc, #232]	; (800a674 <TIM_Base_SetConfig+0x124>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d108      	bne.n	800a5a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a596:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	68fa      	ldr	r2, [r7, #12]
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	4a2f      	ldr	r2, [pc, #188]	; (800a664 <TIM_Base_SetConfig+0x114>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d01f      	beq.n	800a5ea <TIM_Base_SetConfig+0x9a>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5b0:	d01b      	beq.n	800a5ea <TIM_Base_SetConfig+0x9a>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	4a2c      	ldr	r2, [pc, #176]	; (800a668 <TIM_Base_SetConfig+0x118>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d017      	beq.n	800a5ea <TIM_Base_SetConfig+0x9a>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	4a2b      	ldr	r2, [pc, #172]	; (800a66c <TIM_Base_SetConfig+0x11c>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d013      	beq.n	800a5ea <TIM_Base_SetConfig+0x9a>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	4a2a      	ldr	r2, [pc, #168]	; (800a670 <TIM_Base_SetConfig+0x120>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d00f      	beq.n	800a5ea <TIM_Base_SetConfig+0x9a>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	4a29      	ldr	r2, [pc, #164]	; (800a674 <TIM_Base_SetConfig+0x124>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d00b      	beq.n	800a5ea <TIM_Base_SetConfig+0x9a>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	4a28      	ldr	r2, [pc, #160]	; (800a678 <TIM_Base_SetConfig+0x128>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d007      	beq.n	800a5ea <TIM_Base_SetConfig+0x9a>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	4a27      	ldr	r2, [pc, #156]	; (800a67c <TIM_Base_SetConfig+0x12c>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d003      	beq.n	800a5ea <TIM_Base_SetConfig+0x9a>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	4a26      	ldr	r2, [pc, #152]	; (800a680 <TIM_Base_SetConfig+0x130>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d108      	bne.n	800a5fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	68db      	ldr	r3, [r3, #12]
 800a5f6:	68fa      	ldr	r2, [r7, #12]
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	695b      	ldr	r3, [r3, #20]
 800a606:	4313      	orrs	r3, r2
 800a608:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	68fa      	ldr	r2, [r7, #12]
 800a60e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	689a      	ldr	r2, [r3, #8]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	4a10      	ldr	r2, [pc, #64]	; (800a664 <TIM_Base_SetConfig+0x114>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d00f      	beq.n	800a648 <TIM_Base_SetConfig+0xf8>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	4a12      	ldr	r2, [pc, #72]	; (800a674 <TIM_Base_SetConfig+0x124>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d00b      	beq.n	800a648 <TIM_Base_SetConfig+0xf8>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	4a11      	ldr	r2, [pc, #68]	; (800a678 <TIM_Base_SetConfig+0x128>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d007      	beq.n	800a648 <TIM_Base_SetConfig+0xf8>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	4a10      	ldr	r2, [pc, #64]	; (800a67c <TIM_Base_SetConfig+0x12c>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d003      	beq.n	800a648 <TIM_Base_SetConfig+0xf8>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	4a0f      	ldr	r2, [pc, #60]	; (800a680 <TIM_Base_SetConfig+0x130>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d103      	bne.n	800a650 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	691a      	ldr	r2, [r3, #16]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2201      	movs	r2, #1
 800a654:	615a      	str	r2, [r3, #20]
}
 800a656:	bf00      	nop
 800a658:	3714      	adds	r7, #20
 800a65a:	46bd      	mov	sp, r7
 800a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a660:	4770      	bx	lr
 800a662:	bf00      	nop
 800a664:	40010000 	.word	0x40010000
 800a668:	40000400 	.word	0x40000400
 800a66c:	40000800 	.word	0x40000800
 800a670:	40000c00 	.word	0x40000c00
 800a674:	40010400 	.word	0x40010400
 800a678:	40014000 	.word	0x40014000
 800a67c:	40014400 	.word	0x40014400
 800a680:	40014800 	.word	0x40014800

0800a684 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a684:	b480      	push	{r7}
 800a686:	b087      	sub	sp, #28
 800a688:	af00      	add	r7, sp, #0
 800a68a:	60f8      	str	r0, [r7, #12]
 800a68c:	60b9      	str	r1, [r7, #8]
 800a68e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	6a1b      	ldr	r3, [r3, #32]
 800a694:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	6a1b      	ldr	r3, [r3, #32]
 800a69a:	f023 0201 	bic.w	r2, r3, #1
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	699b      	ldr	r3, [r3, #24]
 800a6a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a6ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	011b      	lsls	r3, r3, #4
 800a6b4:	693a      	ldr	r2, [r7, #16]
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	f023 030a 	bic.w	r3, r3, #10
 800a6c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a6c2:	697a      	ldr	r2, [r7, #20]
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	693a      	ldr	r2, [r7, #16]
 800a6ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	697a      	ldr	r2, [r7, #20]
 800a6d4:	621a      	str	r2, [r3, #32]
}
 800a6d6:	bf00      	nop
 800a6d8:	371c      	adds	r7, #28
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr

0800a6e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a6e2:	b480      	push	{r7}
 800a6e4:	b087      	sub	sp, #28
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	60f8      	str	r0, [r7, #12]
 800a6ea:	60b9      	str	r1, [r7, #8]
 800a6ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	6a1b      	ldr	r3, [r3, #32]
 800a6f2:	f023 0210 	bic.w	r2, r3, #16
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	699b      	ldr	r3, [r3, #24]
 800a6fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	6a1b      	ldr	r3, [r3, #32]
 800a704:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a70c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	031b      	lsls	r3, r3, #12
 800a712:	697a      	ldr	r2, [r7, #20]
 800a714:	4313      	orrs	r3, r2
 800a716:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a71e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	011b      	lsls	r3, r3, #4
 800a724:	693a      	ldr	r2, [r7, #16]
 800a726:	4313      	orrs	r3, r2
 800a728:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	697a      	ldr	r2, [r7, #20]
 800a72e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	693a      	ldr	r2, [r7, #16]
 800a734:	621a      	str	r2, [r3, #32]
}
 800a736:	bf00      	nop
 800a738:	371c      	adds	r7, #28
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr
	...

0800a744 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a744:	b480      	push	{r7}
 800a746:	b085      	sub	sp, #20
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	689b      	ldr	r3, [r3, #8]
 800a752:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a754:	68fa      	ldr	r2, [r7, #12]
 800a756:	4b09      	ldr	r3, [pc, #36]	; (800a77c <TIM_ITRx_SetConfig+0x38>)
 800a758:	4013      	ands	r3, r2
 800a75a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a75c:	683a      	ldr	r2, [r7, #0]
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	4313      	orrs	r3, r2
 800a762:	f043 0307 	orr.w	r3, r3, #7
 800a766:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	68fa      	ldr	r2, [r7, #12]
 800a76c:	609a      	str	r2, [r3, #8]
}
 800a76e:	bf00      	nop
 800a770:	3714      	adds	r7, #20
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr
 800a77a:	bf00      	nop
 800a77c:	ffcfff8f 	.word	0xffcfff8f

0800a780 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a780:	b480      	push	{r7}
 800a782:	b087      	sub	sp, #28
 800a784:	af00      	add	r7, sp, #0
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	60b9      	str	r1, [r7, #8]
 800a78a:	607a      	str	r2, [r7, #4]
 800a78c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	689b      	ldr	r3, [r3, #8]
 800a792:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a79a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	021a      	lsls	r2, r3, #8
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	431a      	orrs	r2, r3
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	697a      	ldr	r2, [r7, #20]
 800a7aa:	4313      	orrs	r3, r2
 800a7ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	697a      	ldr	r2, [r7, #20]
 800a7b2:	609a      	str	r2, [r3, #8]
}
 800a7b4:	bf00      	nop
 800a7b6:	371c      	adds	r7, #28
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b085      	sub	sp, #20
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	d101      	bne.n	800a7d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a7d4:	2302      	movs	r3, #2
 800a7d6:	e068      	b.n	800a8aa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2202      	movs	r2, #2
 800a7e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	689b      	ldr	r3, [r3, #8]
 800a7f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4a2e      	ldr	r2, [pc, #184]	; (800a8b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d004      	beq.n	800a80c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	4a2d      	ldr	r2, [pc, #180]	; (800a8bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	d108      	bne.n	800a81e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a812:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	68fa      	ldr	r2, [r7, #12]
 800a81a:	4313      	orrs	r3, r2
 800a81c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a824:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	68fa      	ldr	r2, [r7, #12]
 800a82c:	4313      	orrs	r3, r2
 800a82e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	68fa      	ldr	r2, [r7, #12]
 800a836:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4a1e      	ldr	r2, [pc, #120]	; (800a8b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d01d      	beq.n	800a87e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a84a:	d018      	beq.n	800a87e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a1b      	ldr	r2, [pc, #108]	; (800a8c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d013      	beq.n	800a87e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4a1a      	ldr	r2, [pc, #104]	; (800a8c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d00e      	beq.n	800a87e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a18      	ldr	r2, [pc, #96]	; (800a8c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d009      	beq.n	800a87e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4a13      	ldr	r2, [pc, #76]	; (800a8bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d004      	beq.n	800a87e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a14      	ldr	r2, [pc, #80]	; (800a8cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d10c      	bne.n	800a898 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a884:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	689b      	ldr	r3, [r3, #8]
 800a88a:	68ba      	ldr	r2, [r7, #8]
 800a88c:	4313      	orrs	r3, r2
 800a88e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	68ba      	ldr	r2, [r7, #8]
 800a896:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2201      	movs	r2, #1
 800a89c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a8a8:	2300      	movs	r3, #0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3714      	adds	r7, #20
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr
 800a8b6:	bf00      	nop
 800a8b8:	40010000 	.word	0x40010000
 800a8bc:	40010400 	.word	0x40010400
 800a8c0:	40000400 	.word	0x40000400
 800a8c4:	40000800 	.word	0x40000800
 800a8c8:	40000c00 	.word	0x40000c00
 800a8cc:	40001800 	.word	0x40001800

0800a8d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b082      	sub	sp, #8
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d101      	bne.n	800a8e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	e042      	b.n	800a968 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d106      	bne.n	800a8fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f7f7 f929 	bl	8001b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2224      	movs	r2, #36	; 0x24
 800a8fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	681a      	ldr	r2, [r3, #0]
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f022 0201 	bic.w	r2, r2, #1
 800a910:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f000 fb26 	bl	800af64 <UART_SetConfig>
 800a918:	4603      	mov	r3, r0
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d101      	bne.n	800a922 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a91e:	2301      	movs	r3, #1
 800a920:	e022      	b.n	800a968 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a926:	2b00      	cmp	r3, #0
 800a928:	d002      	beq.n	800a930 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f001 f8ca 	bl	800bac4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	685a      	ldr	r2, [r3, #4]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a93e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	689a      	ldr	r2, [r3, #8]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a94e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	681a      	ldr	r2, [r3, #0]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f042 0201 	orr.w	r2, r2, #1
 800a95e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f001 f951 	bl	800bc08 <UART_CheckIdleState>
 800a966:	4603      	mov	r3, r0
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3708      	adds	r7, #8
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b08a      	sub	sp, #40	; 0x28
 800a974:	af02      	add	r7, sp, #8
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	603b      	str	r3, [r7, #0]
 800a97c:	4613      	mov	r3, r2
 800a97e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a986:	2b20      	cmp	r3, #32
 800a988:	f040 8083 	bne.w	800aa92 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d002      	beq.n	800a998 <HAL_UART_Transmit+0x28>
 800a992:	88fb      	ldrh	r3, [r7, #6]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d101      	bne.n	800a99c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a998:	2301      	movs	r3, #1
 800a99a:	e07b      	b.n	800aa94 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d101      	bne.n	800a9aa <HAL_UART_Transmit+0x3a>
 800a9a6:	2302      	movs	r3, #2
 800a9a8:	e074      	b.n	800aa94 <HAL_UART_Transmit+0x124>
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2221      	movs	r2, #33	; 0x21
 800a9be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800a9c2:	f7f7 fbdd 	bl	8002180 <HAL_GetTick>
 800a9c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	88fa      	ldrh	r2, [r7, #6]
 800a9cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	88fa      	ldrh	r2, [r7, #6]
 800a9d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	689b      	ldr	r3, [r3, #8]
 800a9dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9e0:	d108      	bne.n	800a9f4 <HAL_UART_Transmit+0x84>
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	691b      	ldr	r3, [r3, #16]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d104      	bne.n	800a9f4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	61bb      	str	r3, [r7, #24]
 800a9f2:	e003      	b.n	800a9fc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800aa04:	e02c      	b.n	800aa60 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	9300      	str	r3, [sp, #0]
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	2180      	movs	r1, #128	; 0x80
 800aa10:	68f8      	ldr	r0, [r7, #12]
 800aa12:	f001 f941 	bl	800bc98 <UART_WaitOnFlagUntilTimeout>
 800aa16:	4603      	mov	r3, r0
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d001      	beq.n	800aa20 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800aa1c:	2303      	movs	r3, #3
 800aa1e:	e039      	b.n	800aa94 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800aa20:	69fb      	ldr	r3, [r7, #28]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d10b      	bne.n	800aa3e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aa26:	69bb      	ldr	r3, [r7, #24]
 800aa28:	881b      	ldrh	r3, [r3, #0]
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aa34:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800aa36:	69bb      	ldr	r3, [r7, #24]
 800aa38:	3302      	adds	r3, #2
 800aa3a:	61bb      	str	r3, [r7, #24]
 800aa3c:	e007      	b.n	800aa4e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aa3e:	69fb      	ldr	r3, [r7, #28]
 800aa40:	781a      	ldrb	r2, [r3, #0]
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800aa48:	69fb      	ldr	r3, [r7, #28]
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	3b01      	subs	r3, #1
 800aa58:	b29a      	uxth	r2, r3
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aa66:	b29b      	uxth	r3, r3
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d1cc      	bne.n	800aa06 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	9300      	str	r3, [sp, #0]
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	2200      	movs	r2, #0
 800aa74:	2140      	movs	r1, #64	; 0x40
 800aa76:	68f8      	ldr	r0, [r7, #12]
 800aa78:	f001 f90e 	bl	800bc98 <UART_WaitOnFlagUntilTimeout>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d001      	beq.n	800aa86 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800aa82:	2303      	movs	r3, #3
 800aa84:	e006      	b.n	800aa94 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2220      	movs	r2, #32
 800aa8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	e000      	b.n	800aa94 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800aa92:	2302      	movs	r3, #2
  }
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3720      	adds	r7, #32
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b08a      	sub	sp, #40	; 0x28
 800aaa0:	af02      	add	r7, sp, #8
 800aaa2:	60f8      	str	r0, [r7, #12]
 800aaa4:	60b9      	str	r1, [r7, #8]
 800aaa6:	603b      	str	r3, [r7, #0]
 800aaa8:	4613      	mov	r3, r2
 800aaaa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aab2:	2b20      	cmp	r3, #32
 800aab4:	f040 80bd 	bne.w	800ac32 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d002      	beq.n	800aac4 <HAL_UART_Receive+0x28>
 800aabe:	88fb      	ldrh	r3, [r7, #6]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d101      	bne.n	800aac8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800aac4:	2301      	movs	r3, #1
 800aac6:	e0b5      	b.n	800ac34 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d101      	bne.n	800aad6 <HAL_UART_Receive+0x3a>
 800aad2:	2302      	movs	r3, #2
 800aad4:	e0ae      	b.n	800ac34 <HAL_UART_Receive+0x198>
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2201      	movs	r2, #1
 800aada:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2200      	movs	r2, #0
 800aae2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2222      	movs	r2, #34	; 0x22
 800aaea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800aaee:	f7f7 fb47 	bl	8002180 <HAL_GetTick>
 800aaf2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	88fa      	ldrh	r2, [r7, #6]
 800aaf8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	88fa      	ldrh	r2, [r7, #6]
 800ab00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	689b      	ldr	r3, [r3, #8]
 800ab08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab0c:	d10e      	bne.n	800ab2c <HAL_UART_Receive+0x90>
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	691b      	ldr	r3, [r3, #16]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d105      	bne.n	800ab22 <HAL_UART_Receive+0x86>
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ab1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ab20:	e02d      	b.n	800ab7e <HAL_UART_Receive+0xe2>
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	22ff      	movs	r2, #255	; 0xff
 800ab26:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ab2a:	e028      	b.n	800ab7e <HAL_UART_Receive+0xe2>
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d10d      	bne.n	800ab50 <HAL_UART_Receive+0xb4>
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	691b      	ldr	r3, [r3, #16]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d104      	bne.n	800ab46 <HAL_UART_Receive+0xaa>
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	22ff      	movs	r2, #255	; 0xff
 800ab40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ab44:	e01b      	b.n	800ab7e <HAL_UART_Receive+0xe2>
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	227f      	movs	r2, #127	; 0x7f
 800ab4a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ab4e:	e016      	b.n	800ab7e <HAL_UART_Receive+0xe2>
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	689b      	ldr	r3, [r3, #8]
 800ab54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab58:	d10d      	bne.n	800ab76 <HAL_UART_Receive+0xda>
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	691b      	ldr	r3, [r3, #16]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d104      	bne.n	800ab6c <HAL_UART_Receive+0xd0>
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	227f      	movs	r2, #127	; 0x7f
 800ab66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ab6a:	e008      	b.n	800ab7e <HAL_UART_Receive+0xe2>
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	223f      	movs	r2, #63	; 0x3f
 800ab70:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ab74:	e003      	b.n	800ab7e <HAL_UART_Receive+0xe2>
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ab84:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	689b      	ldr	r3, [r3, #8]
 800ab8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab8e:	d108      	bne.n	800aba2 <HAL_UART_Receive+0x106>
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	691b      	ldr	r3, [r3, #16]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d104      	bne.n	800aba2 <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	61bb      	str	r3, [r7, #24]
 800aba0:	e003      	b.n	800abaa <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aba6:	2300      	movs	r3, #0
 800aba8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2200      	movs	r2, #0
 800abae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800abb2:	e032      	b.n	800ac1a <HAL_UART_Receive+0x17e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	9300      	str	r3, [sp, #0]
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	2200      	movs	r2, #0
 800abbc:	2120      	movs	r1, #32
 800abbe:	68f8      	ldr	r0, [r7, #12]
 800abc0:	f001 f86a 	bl	800bc98 <UART_WaitOnFlagUntilTimeout>
 800abc4:	4603      	mov	r3, r0
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d001      	beq.n	800abce <HAL_UART_Receive+0x132>
      {
        return HAL_TIMEOUT;
 800abca:	2303      	movs	r3, #3
 800abcc:	e032      	b.n	800ac34 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 800abce:	69fb      	ldr	r3, [r7, #28]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d10c      	bne.n	800abee <HAL_UART_Receive+0x152>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abda:	b29a      	uxth	r2, r3
 800abdc:	8a7b      	ldrh	r3, [r7, #18]
 800abde:	4013      	ands	r3, r2
 800abe0:	b29a      	uxth	r2, r3
 800abe2:	69bb      	ldr	r3, [r7, #24]
 800abe4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800abe6:	69bb      	ldr	r3, [r7, #24]
 800abe8:	3302      	adds	r3, #2
 800abea:	61bb      	str	r3, [r7, #24]
 800abec:	e00c      	b.n	800ac08 <HAL_UART_Receive+0x16c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abf4:	b2da      	uxtb	r2, r3
 800abf6:	8a7b      	ldrh	r3, [r7, #18]
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	4013      	ands	r3, r2
 800abfc:	b2da      	uxtb	r2, r3
 800abfe:	69fb      	ldr	r3, [r7, #28]
 800ac00:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800ac02:	69fb      	ldr	r3, [r7, #28]
 800ac04:	3301      	adds	r3, #1
 800ac06:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ac0e:	b29b      	uxth	r3, r3
 800ac10:	3b01      	subs	r3, #1
 800ac12:	b29a      	uxth	r2, r3
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d1c6      	bne.n	800abb4 <HAL_UART_Receive+0x118>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2220      	movs	r2, #32
 800ac2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	e000      	b.n	800ac34 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 800ac32:	2302      	movs	r3, #2
  }
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3720      	adds	r7, #32
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b088      	sub	sp, #32
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	69db      	ldr	r3, [r3, #28]
 800ac4a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	689b      	ldr	r3, [r3, #8]
 800ac5a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ac5c:	69fa      	ldr	r2, [r7, #28]
 800ac5e:	f640 030f 	movw	r3, #2063	; 0x80f
 800ac62:	4013      	ands	r3, r2
 800ac64:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d118      	bne.n	800ac9e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ac6c:	69fb      	ldr	r3, [r7, #28]
 800ac6e:	f003 0320 	and.w	r3, r3, #32
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d013      	beq.n	800ac9e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ac76:	69bb      	ldr	r3, [r7, #24]
 800ac78:	f003 0320 	and.w	r3, r3, #32
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d104      	bne.n	800ac8a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d009      	beq.n	800ac9e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	f000 8145 	beq.w	800af1e <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	4798      	blx	r3
      }
      return;
 800ac9c:	e13f      	b.n	800af1e <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	f000 80e8 	beq.w	800ae76 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800aca6:	697a      	ldr	r2, [r7, #20]
 800aca8:	4ba1      	ldr	r3, [pc, #644]	; (800af30 <HAL_UART_IRQHandler+0x2f4>)
 800acaa:	4013      	ands	r3, r2
 800acac:	2b00      	cmp	r3, #0
 800acae:	d105      	bne.n	800acbc <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800acb0:	69ba      	ldr	r2, [r7, #24]
 800acb2:	4ba0      	ldr	r3, [pc, #640]	; (800af34 <HAL_UART_IRQHandler+0x2f8>)
 800acb4:	4013      	ands	r3, r2
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	f000 80dd 	beq.w	800ae76 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800acbc:	69fb      	ldr	r3, [r7, #28]
 800acbe:	f003 0301 	and.w	r3, r3, #1
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d010      	beq.n	800ace8 <HAL_UART_IRQHandler+0xac>
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800accc:	2b00      	cmp	r3, #0
 800acce:	d00b      	beq.n	800ace8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	2201      	movs	r2, #1
 800acd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acde:	f043 0201 	orr.w	r2, r3, #1
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ace8:	69fb      	ldr	r3, [r7, #28]
 800acea:	f003 0302 	and.w	r3, r3, #2
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d010      	beq.n	800ad14 <HAL_UART_IRQHandler+0xd8>
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	f003 0301 	and.w	r3, r3, #1
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d00b      	beq.n	800ad14 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	2202      	movs	r2, #2
 800ad02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad0a:	f043 0204 	orr.w	r2, r3, #4
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ad14:	69fb      	ldr	r3, [r7, #28]
 800ad16:	f003 0304 	and.w	r3, r3, #4
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d010      	beq.n	800ad40 <HAL_UART_IRQHandler+0x104>
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	f003 0301 	and.w	r3, r3, #1
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d00b      	beq.n	800ad40 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	2204      	movs	r2, #4
 800ad2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad36:	f043 0202 	orr.w	r2, r3, #2
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ad40:	69fb      	ldr	r3, [r7, #28]
 800ad42:	f003 0308 	and.w	r3, r3, #8
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d015      	beq.n	800ad76 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ad4a:	69bb      	ldr	r3, [r7, #24]
 800ad4c:	f003 0320 	and.w	r3, r3, #32
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d104      	bne.n	800ad5e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ad54:	697a      	ldr	r2, [r7, #20]
 800ad56:	4b76      	ldr	r3, [pc, #472]	; (800af30 <HAL_UART_IRQHandler+0x2f4>)
 800ad58:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d00b      	beq.n	800ad76 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	2208      	movs	r2, #8
 800ad64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad6c:	f043 0208 	orr.w	r2, r3, #8
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d011      	beq.n	800ada4 <HAL_UART_IRQHandler+0x168>
 800ad80:	69bb      	ldr	r3, [r7, #24]
 800ad82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d00c      	beq.n	800ada4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ad92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad9a:	f043 0220 	orr.w	r2, r3, #32
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adaa:	2b00      	cmp	r3, #0
 800adac:	f000 80b9 	beq.w	800af22 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800adb0:	69fb      	ldr	r3, [r7, #28]
 800adb2:	f003 0320 	and.w	r3, r3, #32
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d011      	beq.n	800adde <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800adba:	69bb      	ldr	r3, [r7, #24]
 800adbc:	f003 0320 	and.w	r3, r3, #32
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d104      	bne.n	800adce <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d007      	beq.n	800adde <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800add2:	2b00      	cmp	r3, #0
 800add4:	d003      	beq.n	800adde <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ade4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	689b      	ldr	r3, [r3, #8]
 800adec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adf0:	2b40      	cmp	r3, #64	; 0x40
 800adf2:	d004      	beq.n	800adfe <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d031      	beq.n	800ae62 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f000 ffca 	bl	800bd98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	689b      	ldr	r3, [r3, #8]
 800ae0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae0e:	2b40      	cmp	r3, #64	; 0x40
 800ae10:	d123      	bne.n	800ae5a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	689a      	ldr	r2, [r3, #8]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae20:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d013      	beq.n	800ae52 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae2e:	4a42      	ldr	r2, [pc, #264]	; (800af38 <HAL_UART_IRQHandler+0x2fc>)
 800ae30:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae36:	4618      	mov	r0, r3
 800ae38:	f7f9 fefa 	bl	8004c30 <HAL_DMA_Abort_IT>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d017      	beq.n	800ae72 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800ae4c:	4610      	mov	r0, r2
 800ae4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae50:	e00f      	b.n	800ae72 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 f87c 	bl	800af50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae58:	e00b      	b.n	800ae72 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 f878 	bl	800af50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae60:	e007      	b.n	800ae72 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f000 f874 	bl	800af50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800ae70:	e057      	b.n	800af22 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae72:	bf00      	nop
    return;
 800ae74:	e055      	b.n	800af22 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ae76:	69fb      	ldr	r3, [r7, #28]
 800ae78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d00d      	beq.n	800ae9c <HAL_UART_IRQHandler+0x260>
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d008      	beq.n	800ae9c <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ae92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 ffd3 	bl	800be40 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ae9a:	e045      	b.n	800af28 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ae9c:	69fb      	ldr	r3, [r7, #28]
 800ae9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d012      	beq.n	800aecc <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800aea6:	69bb      	ldr	r3, [r7, #24]
 800aea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d104      	bne.n	800aeba <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d008      	beq.n	800aecc <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d031      	beq.n	800af26 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	4798      	blx	r3
    }
    return;
 800aeca:	e02c      	b.n	800af26 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d008      	beq.n	800aee8 <HAL_UART_IRQHandler+0x2ac>
 800aed6:	69bb      	ldr	r3, [r7, #24]
 800aed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d003      	beq.n	800aee8 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f000 ff93 	bl	800be0c <UART_EndTransmit_IT>
    return;
 800aee6:	e01f      	b.n	800af28 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800aee8:	69fb      	ldr	r3, [r7, #28]
 800aeea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d008      	beq.n	800af04 <HAL_UART_IRQHandler+0x2c8>
 800aef2:	69bb      	ldr	r3, [r7, #24]
 800aef4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d003      	beq.n	800af04 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f000 ffb3 	bl	800be68 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800af02:	e011      	b.n	800af28 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800af04:	69fb      	ldr	r3, [r7, #28]
 800af06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d00c      	beq.n	800af28 <HAL_UART_IRQHandler+0x2ec>
 800af0e:	69bb      	ldr	r3, [r7, #24]
 800af10:	2b00      	cmp	r3, #0
 800af12:	da09      	bge.n	800af28 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 ff9d 	bl	800be54 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800af1a:	bf00      	nop
 800af1c:	e004      	b.n	800af28 <HAL_UART_IRQHandler+0x2ec>
      return;
 800af1e:	bf00      	nop
 800af20:	e002      	b.n	800af28 <HAL_UART_IRQHandler+0x2ec>
    return;
 800af22:	bf00      	nop
 800af24:	e000      	b.n	800af28 <HAL_UART_IRQHandler+0x2ec>
    return;
 800af26:	bf00      	nop
  }
}
 800af28:	3720      	adds	r7, #32
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	10000001 	.word	0x10000001
 800af34:	04000120 	.word	0x04000120
 800af38:	0800bde1 	.word	0x0800bde1

0800af3c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800af3c:	b480      	push	{r7}
 800af3e:	b083      	sub	sp, #12
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800af44:	bf00      	nop
 800af46:	370c      	adds	r7, #12
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr

0800af50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800af50:	b480      	push	{r7}
 800af52:	b083      	sub	sp, #12
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800af58:	bf00      	nop
 800af5a:	370c      	adds	r7, #12
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr

0800af64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af64:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800af68:	b08e      	sub	sp, #56	; 0x38
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800af6e:	2300      	movs	r3, #0
 800af70:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	689a      	ldr	r2, [r3, #8]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	691b      	ldr	r3, [r3, #16]
 800af7c:	431a      	orrs	r2, r3
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	695b      	ldr	r3, [r3, #20]
 800af82:	431a      	orrs	r2, r3
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	69db      	ldr	r3, [r3, #28]
 800af88:	4313      	orrs	r3, r2
 800af8a:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af92:	4313      	orrs	r3, r2
 800af94:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	681a      	ldr	r2, [r3, #0]
 800af9c:	4bc1      	ldr	r3, [pc, #772]	; (800b2a4 <UART_SetConfig+0x340>)
 800af9e:	4013      	ands	r3, r2
 800afa0:	687a      	ldr	r2, [r7, #4]
 800afa2:	6812      	ldr	r2, [r2, #0]
 800afa4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800afa6:	430b      	orrs	r3, r1
 800afa8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	68da      	ldr	r2, [r3, #12]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	430a      	orrs	r2, r1
 800afbe:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	699b      	ldr	r3, [r3, #24]
 800afc4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4ab7      	ldr	r2, [pc, #732]	; (800b2a8 <UART_SetConfig+0x344>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d004      	beq.n	800afda <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6a1b      	ldr	r3, [r3, #32]
 800afd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800afd6:	4313      	orrs	r3, r2
 800afd8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	689a      	ldr	r2, [r3, #8]
 800afe0:	4bb2      	ldr	r3, [pc, #712]	; (800b2ac <UART_SetConfig+0x348>)
 800afe2:	4013      	ands	r3, r2
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	6812      	ldr	r2, [r2, #0]
 800afe8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800afea:	430b      	orrs	r3, r1
 800afec:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff4:	f023 010f 	bic.w	r1, r3, #15
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	430a      	orrs	r2, r1
 800b002:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	4aa9      	ldr	r2, [pc, #676]	; (800b2b0 <UART_SetConfig+0x34c>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d177      	bne.n	800b0fe <UART_SetConfig+0x19a>
 800b00e:	4ba9      	ldr	r3, [pc, #676]	; (800b2b4 <UART_SetConfig+0x350>)
 800b010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b012:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b016:	2b28      	cmp	r3, #40	; 0x28
 800b018:	d86c      	bhi.n	800b0f4 <UART_SetConfig+0x190>
 800b01a:	a201      	add	r2, pc, #4	; (adr r2, 800b020 <UART_SetConfig+0xbc>)
 800b01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b020:	0800b0c5 	.word	0x0800b0c5
 800b024:	0800b0f5 	.word	0x0800b0f5
 800b028:	0800b0f5 	.word	0x0800b0f5
 800b02c:	0800b0f5 	.word	0x0800b0f5
 800b030:	0800b0f5 	.word	0x0800b0f5
 800b034:	0800b0f5 	.word	0x0800b0f5
 800b038:	0800b0f5 	.word	0x0800b0f5
 800b03c:	0800b0f5 	.word	0x0800b0f5
 800b040:	0800b0cd 	.word	0x0800b0cd
 800b044:	0800b0f5 	.word	0x0800b0f5
 800b048:	0800b0f5 	.word	0x0800b0f5
 800b04c:	0800b0f5 	.word	0x0800b0f5
 800b050:	0800b0f5 	.word	0x0800b0f5
 800b054:	0800b0f5 	.word	0x0800b0f5
 800b058:	0800b0f5 	.word	0x0800b0f5
 800b05c:	0800b0f5 	.word	0x0800b0f5
 800b060:	0800b0d5 	.word	0x0800b0d5
 800b064:	0800b0f5 	.word	0x0800b0f5
 800b068:	0800b0f5 	.word	0x0800b0f5
 800b06c:	0800b0f5 	.word	0x0800b0f5
 800b070:	0800b0f5 	.word	0x0800b0f5
 800b074:	0800b0f5 	.word	0x0800b0f5
 800b078:	0800b0f5 	.word	0x0800b0f5
 800b07c:	0800b0f5 	.word	0x0800b0f5
 800b080:	0800b0dd 	.word	0x0800b0dd
 800b084:	0800b0f5 	.word	0x0800b0f5
 800b088:	0800b0f5 	.word	0x0800b0f5
 800b08c:	0800b0f5 	.word	0x0800b0f5
 800b090:	0800b0f5 	.word	0x0800b0f5
 800b094:	0800b0f5 	.word	0x0800b0f5
 800b098:	0800b0f5 	.word	0x0800b0f5
 800b09c:	0800b0f5 	.word	0x0800b0f5
 800b0a0:	0800b0e5 	.word	0x0800b0e5
 800b0a4:	0800b0f5 	.word	0x0800b0f5
 800b0a8:	0800b0f5 	.word	0x0800b0f5
 800b0ac:	0800b0f5 	.word	0x0800b0f5
 800b0b0:	0800b0f5 	.word	0x0800b0f5
 800b0b4:	0800b0f5 	.word	0x0800b0f5
 800b0b8:	0800b0f5 	.word	0x0800b0f5
 800b0bc:	0800b0f5 	.word	0x0800b0f5
 800b0c0:	0800b0ed 	.word	0x0800b0ed
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0ca:	e233      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b0cc:	2304      	movs	r3, #4
 800b0ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0d2:	e22f      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b0d4:	2308      	movs	r3, #8
 800b0d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0da:	e22b      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b0dc:	2310      	movs	r3, #16
 800b0de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0e2:	e227      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b0e4:	2320      	movs	r3, #32
 800b0e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0ea:	e223      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b0ec:	2340      	movs	r3, #64	; 0x40
 800b0ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0f2:	e21f      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b0f4:	2380      	movs	r3, #128	; 0x80
 800b0f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0fa:	bf00      	nop
 800b0fc:	e21a      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4a6d      	ldr	r2, [pc, #436]	; (800b2b8 <UART_SetConfig+0x354>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d132      	bne.n	800b16e <UART_SetConfig+0x20a>
 800b108:	4b6a      	ldr	r3, [pc, #424]	; (800b2b4 <UART_SetConfig+0x350>)
 800b10a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b10c:	f003 0307 	and.w	r3, r3, #7
 800b110:	2b05      	cmp	r3, #5
 800b112:	d827      	bhi.n	800b164 <UART_SetConfig+0x200>
 800b114:	a201      	add	r2, pc, #4	; (adr r2, 800b11c <UART_SetConfig+0x1b8>)
 800b116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b11a:	bf00      	nop
 800b11c:	0800b135 	.word	0x0800b135
 800b120:	0800b13d 	.word	0x0800b13d
 800b124:	0800b145 	.word	0x0800b145
 800b128:	0800b14d 	.word	0x0800b14d
 800b12c:	0800b155 	.word	0x0800b155
 800b130:	0800b15d 	.word	0x0800b15d
 800b134:	2300      	movs	r3, #0
 800b136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b13a:	e1fb      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b13c:	2304      	movs	r3, #4
 800b13e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b142:	e1f7      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b144:	2308      	movs	r3, #8
 800b146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b14a:	e1f3      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b14c:	2310      	movs	r3, #16
 800b14e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b152:	e1ef      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b154:	2320      	movs	r3, #32
 800b156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b15a:	e1eb      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b15c:	2340      	movs	r3, #64	; 0x40
 800b15e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b162:	e1e7      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b164:	2380      	movs	r3, #128	; 0x80
 800b166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b16a:	bf00      	nop
 800b16c:	e1e2      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	4a52      	ldr	r2, [pc, #328]	; (800b2bc <UART_SetConfig+0x358>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d132      	bne.n	800b1de <UART_SetConfig+0x27a>
 800b178:	4b4e      	ldr	r3, [pc, #312]	; (800b2b4 <UART_SetConfig+0x350>)
 800b17a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b17c:	f003 0307 	and.w	r3, r3, #7
 800b180:	2b05      	cmp	r3, #5
 800b182:	d827      	bhi.n	800b1d4 <UART_SetConfig+0x270>
 800b184:	a201      	add	r2, pc, #4	; (adr r2, 800b18c <UART_SetConfig+0x228>)
 800b186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b18a:	bf00      	nop
 800b18c:	0800b1a5 	.word	0x0800b1a5
 800b190:	0800b1ad 	.word	0x0800b1ad
 800b194:	0800b1b5 	.word	0x0800b1b5
 800b198:	0800b1bd 	.word	0x0800b1bd
 800b19c:	0800b1c5 	.word	0x0800b1c5
 800b1a0:	0800b1cd 	.word	0x0800b1cd
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1aa:	e1c3      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b1ac:	2304      	movs	r3, #4
 800b1ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1b2:	e1bf      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b1b4:	2308      	movs	r3, #8
 800b1b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1ba:	e1bb      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b1bc:	2310      	movs	r3, #16
 800b1be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1c2:	e1b7      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b1c4:	2320      	movs	r3, #32
 800b1c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1ca:	e1b3      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b1cc:	2340      	movs	r3, #64	; 0x40
 800b1ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1d2:	e1af      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b1d4:	2380      	movs	r3, #128	; 0x80
 800b1d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1da:	bf00      	nop
 800b1dc:	e1aa      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	4a37      	ldr	r2, [pc, #220]	; (800b2c0 <UART_SetConfig+0x35c>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d132      	bne.n	800b24e <UART_SetConfig+0x2ea>
 800b1e8:	4b32      	ldr	r3, [pc, #200]	; (800b2b4 <UART_SetConfig+0x350>)
 800b1ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1ec:	f003 0307 	and.w	r3, r3, #7
 800b1f0:	2b05      	cmp	r3, #5
 800b1f2:	d827      	bhi.n	800b244 <UART_SetConfig+0x2e0>
 800b1f4:	a201      	add	r2, pc, #4	; (adr r2, 800b1fc <UART_SetConfig+0x298>)
 800b1f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1fa:	bf00      	nop
 800b1fc:	0800b215 	.word	0x0800b215
 800b200:	0800b21d 	.word	0x0800b21d
 800b204:	0800b225 	.word	0x0800b225
 800b208:	0800b22d 	.word	0x0800b22d
 800b20c:	0800b235 	.word	0x0800b235
 800b210:	0800b23d 	.word	0x0800b23d
 800b214:	2300      	movs	r3, #0
 800b216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b21a:	e18b      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b21c:	2304      	movs	r3, #4
 800b21e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b222:	e187      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b224:	2308      	movs	r3, #8
 800b226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b22a:	e183      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b22c:	2310      	movs	r3, #16
 800b22e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b232:	e17f      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b234:	2320      	movs	r3, #32
 800b236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b23a:	e17b      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b23c:	2340      	movs	r3, #64	; 0x40
 800b23e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b242:	e177      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b244:	2380      	movs	r3, #128	; 0x80
 800b246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b24a:	bf00      	nop
 800b24c:	e172      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	4a1c      	ldr	r2, [pc, #112]	; (800b2c4 <UART_SetConfig+0x360>)
 800b254:	4293      	cmp	r3, r2
 800b256:	d144      	bne.n	800b2e2 <UART_SetConfig+0x37e>
 800b258:	4b16      	ldr	r3, [pc, #88]	; (800b2b4 <UART_SetConfig+0x350>)
 800b25a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b25c:	f003 0307 	and.w	r3, r3, #7
 800b260:	2b05      	cmp	r3, #5
 800b262:	d839      	bhi.n	800b2d8 <UART_SetConfig+0x374>
 800b264:	a201      	add	r2, pc, #4	; (adr r2, 800b26c <UART_SetConfig+0x308>)
 800b266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b26a:	bf00      	nop
 800b26c:	0800b285 	.word	0x0800b285
 800b270:	0800b28d 	.word	0x0800b28d
 800b274:	0800b295 	.word	0x0800b295
 800b278:	0800b29d 	.word	0x0800b29d
 800b27c:	0800b2c9 	.word	0x0800b2c9
 800b280:	0800b2d1 	.word	0x0800b2d1
 800b284:	2300      	movs	r3, #0
 800b286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b28a:	e153      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b28c:	2304      	movs	r3, #4
 800b28e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b292:	e14f      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b294:	2308      	movs	r3, #8
 800b296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b29a:	e14b      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b29c:	2310      	movs	r3, #16
 800b29e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2a2:	e147      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b2a4:	cfff69f3 	.word	0xcfff69f3
 800b2a8:	58000c00 	.word	0x58000c00
 800b2ac:	11fff4ff 	.word	0x11fff4ff
 800b2b0:	40011000 	.word	0x40011000
 800b2b4:	58024400 	.word	0x58024400
 800b2b8:	40004400 	.word	0x40004400
 800b2bc:	40004800 	.word	0x40004800
 800b2c0:	40004c00 	.word	0x40004c00
 800b2c4:	40005000 	.word	0x40005000
 800b2c8:	2320      	movs	r3, #32
 800b2ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2ce:	e131      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b2d0:	2340      	movs	r3, #64	; 0x40
 800b2d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2d6:	e12d      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b2d8:	2380      	movs	r3, #128	; 0x80
 800b2da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2de:	bf00      	nop
 800b2e0:	e128      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	4ab6      	ldr	r2, [pc, #728]	; (800b5c0 <UART_SetConfig+0x65c>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d178      	bne.n	800b3de <UART_SetConfig+0x47a>
 800b2ec:	4bb5      	ldr	r3, [pc, #724]	; (800b5c4 <UART_SetConfig+0x660>)
 800b2ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b2f4:	2b28      	cmp	r3, #40	; 0x28
 800b2f6:	d86d      	bhi.n	800b3d4 <UART_SetConfig+0x470>
 800b2f8:	a201      	add	r2, pc, #4	; (adr r2, 800b300 <UART_SetConfig+0x39c>)
 800b2fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2fe:	bf00      	nop
 800b300:	0800b3a5 	.word	0x0800b3a5
 800b304:	0800b3d5 	.word	0x0800b3d5
 800b308:	0800b3d5 	.word	0x0800b3d5
 800b30c:	0800b3d5 	.word	0x0800b3d5
 800b310:	0800b3d5 	.word	0x0800b3d5
 800b314:	0800b3d5 	.word	0x0800b3d5
 800b318:	0800b3d5 	.word	0x0800b3d5
 800b31c:	0800b3d5 	.word	0x0800b3d5
 800b320:	0800b3ad 	.word	0x0800b3ad
 800b324:	0800b3d5 	.word	0x0800b3d5
 800b328:	0800b3d5 	.word	0x0800b3d5
 800b32c:	0800b3d5 	.word	0x0800b3d5
 800b330:	0800b3d5 	.word	0x0800b3d5
 800b334:	0800b3d5 	.word	0x0800b3d5
 800b338:	0800b3d5 	.word	0x0800b3d5
 800b33c:	0800b3d5 	.word	0x0800b3d5
 800b340:	0800b3b5 	.word	0x0800b3b5
 800b344:	0800b3d5 	.word	0x0800b3d5
 800b348:	0800b3d5 	.word	0x0800b3d5
 800b34c:	0800b3d5 	.word	0x0800b3d5
 800b350:	0800b3d5 	.word	0x0800b3d5
 800b354:	0800b3d5 	.word	0x0800b3d5
 800b358:	0800b3d5 	.word	0x0800b3d5
 800b35c:	0800b3d5 	.word	0x0800b3d5
 800b360:	0800b3bd 	.word	0x0800b3bd
 800b364:	0800b3d5 	.word	0x0800b3d5
 800b368:	0800b3d5 	.word	0x0800b3d5
 800b36c:	0800b3d5 	.word	0x0800b3d5
 800b370:	0800b3d5 	.word	0x0800b3d5
 800b374:	0800b3d5 	.word	0x0800b3d5
 800b378:	0800b3d5 	.word	0x0800b3d5
 800b37c:	0800b3d5 	.word	0x0800b3d5
 800b380:	0800b3c5 	.word	0x0800b3c5
 800b384:	0800b3d5 	.word	0x0800b3d5
 800b388:	0800b3d5 	.word	0x0800b3d5
 800b38c:	0800b3d5 	.word	0x0800b3d5
 800b390:	0800b3d5 	.word	0x0800b3d5
 800b394:	0800b3d5 	.word	0x0800b3d5
 800b398:	0800b3d5 	.word	0x0800b3d5
 800b39c:	0800b3d5 	.word	0x0800b3d5
 800b3a0:	0800b3cd 	.word	0x0800b3cd
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3aa:	e0c3      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b3ac:	2304      	movs	r3, #4
 800b3ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3b2:	e0bf      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b3b4:	2308      	movs	r3, #8
 800b3b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3ba:	e0bb      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b3bc:	2310      	movs	r3, #16
 800b3be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3c2:	e0b7      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b3c4:	2320      	movs	r3, #32
 800b3c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3ca:	e0b3      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b3cc:	2340      	movs	r3, #64	; 0x40
 800b3ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3d2:	e0af      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b3d4:	2380      	movs	r3, #128	; 0x80
 800b3d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3da:	bf00      	nop
 800b3dc:	e0aa      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	4a79      	ldr	r2, [pc, #484]	; (800b5c8 <UART_SetConfig+0x664>)
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d132      	bne.n	800b44e <UART_SetConfig+0x4ea>
 800b3e8:	4b76      	ldr	r3, [pc, #472]	; (800b5c4 <UART_SetConfig+0x660>)
 800b3ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3ec:	f003 0307 	and.w	r3, r3, #7
 800b3f0:	2b05      	cmp	r3, #5
 800b3f2:	d827      	bhi.n	800b444 <UART_SetConfig+0x4e0>
 800b3f4:	a201      	add	r2, pc, #4	; (adr r2, 800b3fc <UART_SetConfig+0x498>)
 800b3f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3fa:	bf00      	nop
 800b3fc:	0800b415 	.word	0x0800b415
 800b400:	0800b41d 	.word	0x0800b41d
 800b404:	0800b425 	.word	0x0800b425
 800b408:	0800b42d 	.word	0x0800b42d
 800b40c:	0800b435 	.word	0x0800b435
 800b410:	0800b43d 	.word	0x0800b43d
 800b414:	2300      	movs	r3, #0
 800b416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b41a:	e08b      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b41c:	2304      	movs	r3, #4
 800b41e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b422:	e087      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b424:	2308      	movs	r3, #8
 800b426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b42a:	e083      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b42c:	2310      	movs	r3, #16
 800b42e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b432:	e07f      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b434:	2320      	movs	r3, #32
 800b436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b43a:	e07b      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b43c:	2340      	movs	r3, #64	; 0x40
 800b43e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b442:	e077      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b444:	2380      	movs	r3, #128	; 0x80
 800b446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b44a:	bf00      	nop
 800b44c:	e072      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	4a5e      	ldr	r2, [pc, #376]	; (800b5cc <UART_SetConfig+0x668>)
 800b454:	4293      	cmp	r3, r2
 800b456:	d132      	bne.n	800b4be <UART_SetConfig+0x55a>
 800b458:	4b5a      	ldr	r3, [pc, #360]	; (800b5c4 <UART_SetConfig+0x660>)
 800b45a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b45c:	f003 0307 	and.w	r3, r3, #7
 800b460:	2b05      	cmp	r3, #5
 800b462:	d827      	bhi.n	800b4b4 <UART_SetConfig+0x550>
 800b464:	a201      	add	r2, pc, #4	; (adr r2, 800b46c <UART_SetConfig+0x508>)
 800b466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b46a:	bf00      	nop
 800b46c:	0800b485 	.word	0x0800b485
 800b470:	0800b48d 	.word	0x0800b48d
 800b474:	0800b495 	.word	0x0800b495
 800b478:	0800b49d 	.word	0x0800b49d
 800b47c:	0800b4a5 	.word	0x0800b4a5
 800b480:	0800b4ad 	.word	0x0800b4ad
 800b484:	2300      	movs	r3, #0
 800b486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b48a:	e053      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b48c:	2304      	movs	r3, #4
 800b48e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b492:	e04f      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b494:	2308      	movs	r3, #8
 800b496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b49a:	e04b      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b49c:	2310      	movs	r3, #16
 800b49e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4a2:	e047      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b4a4:	2320      	movs	r3, #32
 800b4a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4aa:	e043      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b4ac:	2340      	movs	r3, #64	; 0x40
 800b4ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4b2:	e03f      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b4b4:	2380      	movs	r3, #128	; 0x80
 800b4b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4ba:	bf00      	nop
 800b4bc:	e03a      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	4a43      	ldr	r2, [pc, #268]	; (800b5d0 <UART_SetConfig+0x66c>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d132      	bne.n	800b52e <UART_SetConfig+0x5ca>
 800b4c8:	4b3e      	ldr	r3, [pc, #248]	; (800b5c4 <UART_SetConfig+0x660>)
 800b4ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4cc:	f003 0307 	and.w	r3, r3, #7
 800b4d0:	2b05      	cmp	r3, #5
 800b4d2:	d827      	bhi.n	800b524 <UART_SetConfig+0x5c0>
 800b4d4:	a201      	add	r2, pc, #4	; (adr r2, 800b4dc <UART_SetConfig+0x578>)
 800b4d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4da:	bf00      	nop
 800b4dc:	0800b4f5 	.word	0x0800b4f5
 800b4e0:	0800b4fd 	.word	0x0800b4fd
 800b4e4:	0800b505 	.word	0x0800b505
 800b4e8:	0800b50d 	.word	0x0800b50d
 800b4ec:	0800b515 	.word	0x0800b515
 800b4f0:	0800b51d 	.word	0x0800b51d
 800b4f4:	2302      	movs	r3, #2
 800b4f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4fa:	e01b      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b4fc:	2304      	movs	r3, #4
 800b4fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b502:	e017      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b504:	2308      	movs	r3, #8
 800b506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b50a:	e013      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b50c:	2310      	movs	r3, #16
 800b50e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b512:	e00f      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b514:	2320      	movs	r3, #32
 800b516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b51a:	e00b      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b51c:	2340      	movs	r3, #64	; 0x40
 800b51e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b522:	e007      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b524:	2380      	movs	r3, #128	; 0x80
 800b526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b52a:	bf00      	nop
 800b52c:	e002      	b.n	800b534 <UART_SetConfig+0x5d0>
 800b52e:	2380      	movs	r3, #128	; 0x80
 800b530:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a25      	ldr	r2, [pc, #148]	; (800b5d0 <UART_SetConfig+0x66c>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	f040 80b8 	bne.w	800b6b0 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b540:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b544:	2b08      	cmp	r3, #8
 800b546:	d019      	beq.n	800b57c <UART_SetConfig+0x618>
 800b548:	2b08      	cmp	r3, #8
 800b54a:	dc04      	bgt.n	800b556 <UART_SetConfig+0x5f2>
 800b54c:	2b02      	cmp	r3, #2
 800b54e:	d009      	beq.n	800b564 <UART_SetConfig+0x600>
 800b550:	2b04      	cmp	r3, #4
 800b552:	d00b      	beq.n	800b56c <UART_SetConfig+0x608>
 800b554:	e042      	b.n	800b5dc <UART_SetConfig+0x678>
 800b556:	2b20      	cmp	r3, #32
 800b558:	d02b      	beq.n	800b5b2 <UART_SetConfig+0x64e>
 800b55a:	2b40      	cmp	r3, #64	; 0x40
 800b55c:	d02c      	beq.n	800b5b8 <UART_SetConfig+0x654>
 800b55e:	2b10      	cmp	r3, #16
 800b560:	d014      	beq.n	800b58c <UART_SetConfig+0x628>
 800b562:	e03b      	b.n	800b5dc <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b564:	f7fe f940 	bl	80097e8 <HAL_RCCEx_GetD3PCLK1Freq>
 800b568:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b56a:	e03d      	b.n	800b5e8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b56c:	f107 0314 	add.w	r3, r7, #20
 800b570:	4618      	mov	r0, r3
 800b572:	f7fe f94f 	bl	8009814 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b576:	69bb      	ldr	r3, [r7, #24]
 800b578:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b57a:	e035      	b.n	800b5e8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b57c:	f107 0308 	add.w	r3, r7, #8
 800b580:	4618      	mov	r0, r3
 800b582:	f7fe fa93 	bl	8009aac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b58a:	e02d      	b.n	800b5e8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b58c:	4b0d      	ldr	r3, [pc, #52]	; (800b5c4 <UART_SetConfig+0x660>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f003 0320 	and.w	r3, r3, #32
 800b594:	2b00      	cmp	r3, #0
 800b596:	d009      	beq.n	800b5ac <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b598:	4b0a      	ldr	r3, [pc, #40]	; (800b5c4 <UART_SetConfig+0x660>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	08db      	lsrs	r3, r3, #3
 800b59e:	f003 0303 	and.w	r3, r3, #3
 800b5a2:	4a0c      	ldr	r2, [pc, #48]	; (800b5d4 <UART_SetConfig+0x670>)
 800b5a4:	fa22 f303 	lsr.w	r3, r2, r3
 800b5a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b5aa:	e01d      	b.n	800b5e8 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800b5ac:	4b09      	ldr	r3, [pc, #36]	; (800b5d4 <UART_SetConfig+0x670>)
 800b5ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b5b0:	e01a      	b.n	800b5e8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b5b2:	4b09      	ldr	r3, [pc, #36]	; (800b5d8 <UART_SetConfig+0x674>)
 800b5b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b5b6:	e017      	b.n	800b5e8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b5b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b5be:	e013      	b.n	800b5e8 <UART_SetConfig+0x684>
 800b5c0:	40011400 	.word	0x40011400
 800b5c4:	58024400 	.word	0x58024400
 800b5c8:	40007800 	.word	0x40007800
 800b5cc:	40007c00 	.word	0x40007c00
 800b5d0:	58000c00 	.word	0x58000c00
 800b5d4:	03d09000 	.word	0x03d09000
 800b5d8:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b5e6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	f000 824d 	beq.w	800ba8a <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f4:	4aad      	ldr	r2, [pc, #692]	; (800b8ac <UART_SetConfig+0x948>)
 800b5f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5fe:	fbb3 f3f2 	udiv	r3, r3, r2
 800b602:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	685a      	ldr	r2, [r3, #4]
 800b608:	4613      	mov	r3, r2
 800b60a:	005b      	lsls	r3, r3, #1
 800b60c:	4413      	add	r3, r2
 800b60e:	6a3a      	ldr	r2, [r7, #32]
 800b610:	429a      	cmp	r2, r3
 800b612:	d305      	bcc.n	800b620 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b61a:	6a3a      	ldr	r2, [r7, #32]
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d903      	bls.n	800b628 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800b620:	2301      	movs	r3, #1
 800b622:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b626:	e230      	b.n	800ba8a <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b62a:	4618      	mov	r0, r3
 800b62c:	f04f 0100 	mov.w	r1, #0
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b634:	4a9d      	ldr	r2, [pc, #628]	; (800b8ac <UART_SetConfig+0x948>)
 800b636:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b63a:	b29b      	uxth	r3, r3
 800b63c:	f04f 0400 	mov.w	r4, #0
 800b640:	461a      	mov	r2, r3
 800b642:	4623      	mov	r3, r4
 800b644:	f7f4 fea4 	bl	8000390 <__aeabi_uldivmod>
 800b648:	4603      	mov	r3, r0
 800b64a:	460c      	mov	r4, r1
 800b64c:	4619      	mov	r1, r3
 800b64e:	4622      	mov	r2, r4
 800b650:	f04f 0300 	mov.w	r3, #0
 800b654:	f04f 0400 	mov.w	r4, #0
 800b658:	0214      	lsls	r4, r2, #8
 800b65a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800b65e:	020b      	lsls	r3, r1, #8
 800b660:	687a      	ldr	r2, [r7, #4]
 800b662:	6852      	ldr	r2, [r2, #4]
 800b664:	0852      	lsrs	r2, r2, #1
 800b666:	4611      	mov	r1, r2
 800b668:	f04f 0200 	mov.w	r2, #0
 800b66c:	eb13 0b01 	adds.w	fp, r3, r1
 800b670:	eb44 0c02 	adc.w	ip, r4, r2
 800b674:	4658      	mov	r0, fp
 800b676:	4661      	mov	r1, ip
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	685b      	ldr	r3, [r3, #4]
 800b67c:	f04f 0400 	mov.w	r4, #0
 800b680:	461a      	mov	r2, r3
 800b682:	4623      	mov	r3, r4
 800b684:	f7f4 fe84 	bl	8000390 <__aeabi_uldivmod>
 800b688:	4603      	mov	r3, r0
 800b68a:	460c      	mov	r4, r1
 800b68c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b690:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b694:	d308      	bcc.n	800b6a8 <UART_SetConfig+0x744>
 800b696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b698:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b69c:	d204      	bcs.n	800b6a8 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6a4:	60da      	str	r2, [r3, #12]
 800b6a6:	e1f0      	b.n	800ba8a <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b6ae:	e1ec      	b.n	800ba8a <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	69db      	ldr	r3, [r3, #28]
 800b6b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6b8:	f040 8100 	bne.w	800b8bc <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800b6bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b6c0:	2b40      	cmp	r3, #64	; 0x40
 800b6c2:	f200 80b7 	bhi.w	800b834 <UART_SetConfig+0x8d0>
 800b6c6:	a201      	add	r2, pc, #4	; (adr r2, 800b6cc <UART_SetConfig+0x768>)
 800b6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6cc:	0800b7d1 	.word	0x0800b7d1
 800b6d0:	0800b7d9 	.word	0x0800b7d9
 800b6d4:	0800b835 	.word	0x0800b835
 800b6d8:	0800b835 	.word	0x0800b835
 800b6dc:	0800b7e1 	.word	0x0800b7e1
 800b6e0:	0800b835 	.word	0x0800b835
 800b6e4:	0800b835 	.word	0x0800b835
 800b6e8:	0800b835 	.word	0x0800b835
 800b6ec:	0800b7f1 	.word	0x0800b7f1
 800b6f0:	0800b835 	.word	0x0800b835
 800b6f4:	0800b835 	.word	0x0800b835
 800b6f8:	0800b835 	.word	0x0800b835
 800b6fc:	0800b835 	.word	0x0800b835
 800b700:	0800b835 	.word	0x0800b835
 800b704:	0800b835 	.word	0x0800b835
 800b708:	0800b835 	.word	0x0800b835
 800b70c:	0800b801 	.word	0x0800b801
 800b710:	0800b835 	.word	0x0800b835
 800b714:	0800b835 	.word	0x0800b835
 800b718:	0800b835 	.word	0x0800b835
 800b71c:	0800b835 	.word	0x0800b835
 800b720:	0800b835 	.word	0x0800b835
 800b724:	0800b835 	.word	0x0800b835
 800b728:	0800b835 	.word	0x0800b835
 800b72c:	0800b835 	.word	0x0800b835
 800b730:	0800b835 	.word	0x0800b835
 800b734:	0800b835 	.word	0x0800b835
 800b738:	0800b835 	.word	0x0800b835
 800b73c:	0800b835 	.word	0x0800b835
 800b740:	0800b835 	.word	0x0800b835
 800b744:	0800b835 	.word	0x0800b835
 800b748:	0800b835 	.word	0x0800b835
 800b74c:	0800b827 	.word	0x0800b827
 800b750:	0800b835 	.word	0x0800b835
 800b754:	0800b835 	.word	0x0800b835
 800b758:	0800b835 	.word	0x0800b835
 800b75c:	0800b835 	.word	0x0800b835
 800b760:	0800b835 	.word	0x0800b835
 800b764:	0800b835 	.word	0x0800b835
 800b768:	0800b835 	.word	0x0800b835
 800b76c:	0800b835 	.word	0x0800b835
 800b770:	0800b835 	.word	0x0800b835
 800b774:	0800b835 	.word	0x0800b835
 800b778:	0800b835 	.word	0x0800b835
 800b77c:	0800b835 	.word	0x0800b835
 800b780:	0800b835 	.word	0x0800b835
 800b784:	0800b835 	.word	0x0800b835
 800b788:	0800b835 	.word	0x0800b835
 800b78c:	0800b835 	.word	0x0800b835
 800b790:	0800b835 	.word	0x0800b835
 800b794:	0800b835 	.word	0x0800b835
 800b798:	0800b835 	.word	0x0800b835
 800b79c:	0800b835 	.word	0x0800b835
 800b7a0:	0800b835 	.word	0x0800b835
 800b7a4:	0800b835 	.word	0x0800b835
 800b7a8:	0800b835 	.word	0x0800b835
 800b7ac:	0800b835 	.word	0x0800b835
 800b7b0:	0800b835 	.word	0x0800b835
 800b7b4:	0800b835 	.word	0x0800b835
 800b7b8:	0800b835 	.word	0x0800b835
 800b7bc:	0800b835 	.word	0x0800b835
 800b7c0:	0800b835 	.word	0x0800b835
 800b7c4:	0800b835 	.word	0x0800b835
 800b7c8:	0800b835 	.word	0x0800b835
 800b7cc:	0800b82d 	.word	0x0800b82d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7d0:	f7fc fe78 	bl	80084c4 <HAL_RCC_GetPCLK1Freq>
 800b7d4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b7d6:	e033      	b.n	800b840 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b7d8:	f7fc fe8a 	bl	80084f0 <HAL_RCC_GetPCLK2Freq>
 800b7dc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b7de:	e02f      	b.n	800b840 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7e0:	f107 0314 	add.w	r3, r7, #20
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f7fe f815 	bl	8009814 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b7ea:	69bb      	ldr	r3, [r7, #24]
 800b7ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b7ee:	e027      	b.n	800b840 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7f0:	f107 0308 	add.w	r3, r7, #8
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f7fe f959 	bl	8009aac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b7fe:	e01f      	b.n	800b840 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b800:	4b2b      	ldr	r3, [pc, #172]	; (800b8b0 <UART_SetConfig+0x94c>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f003 0320 	and.w	r3, r3, #32
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d009      	beq.n	800b820 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b80c:	4b28      	ldr	r3, [pc, #160]	; (800b8b0 <UART_SetConfig+0x94c>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	08db      	lsrs	r3, r3, #3
 800b812:	f003 0303 	and.w	r3, r3, #3
 800b816:	4a27      	ldr	r2, [pc, #156]	; (800b8b4 <UART_SetConfig+0x950>)
 800b818:	fa22 f303 	lsr.w	r3, r2, r3
 800b81c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b81e:	e00f      	b.n	800b840 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800b820:	4b24      	ldr	r3, [pc, #144]	; (800b8b4 <UART_SetConfig+0x950>)
 800b822:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b824:	e00c      	b.n	800b840 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b826:	4b24      	ldr	r3, [pc, #144]	; (800b8b8 <UART_SetConfig+0x954>)
 800b828:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b82a:	e009      	b.n	800b840 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b82c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b830:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b832:	e005      	b.n	800b840 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800b834:	2300      	movs	r3, #0
 800b836:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b838:	2301      	movs	r3, #1
 800b83a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b83e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b842:	2b00      	cmp	r3, #0
 800b844:	f000 8121 	beq.w	800ba8a <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b84c:	4a17      	ldr	r2, [pc, #92]	; (800b8ac <UART_SetConfig+0x948>)
 800b84e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b852:	461a      	mov	r2, r3
 800b854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b856:	fbb3 f3f2 	udiv	r3, r3, r2
 800b85a:	005a      	lsls	r2, r3, #1
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	685b      	ldr	r3, [r3, #4]
 800b860:	085b      	lsrs	r3, r3, #1
 800b862:	441a      	add	r2, r3
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	fbb2 f3f3 	udiv	r3, r2, r3
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b872:	2b0f      	cmp	r3, #15
 800b874:	d916      	bls.n	800b8a4 <UART_SetConfig+0x940>
 800b876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b87c:	d212      	bcs.n	800b8a4 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b880:	b29b      	uxth	r3, r3
 800b882:	f023 030f 	bic.w	r3, r3, #15
 800b886:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88a:	085b      	lsrs	r3, r3, #1
 800b88c:	b29b      	uxth	r3, r3
 800b88e:	f003 0307 	and.w	r3, r3, #7
 800b892:	b29a      	uxth	r2, r3
 800b894:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b896:	4313      	orrs	r3, r2
 800b898:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b8a0:	60da      	str	r2, [r3, #12]
 800b8a2:	e0f2      	b.n	800ba8a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b8aa:	e0ee      	b.n	800ba8a <UART_SetConfig+0xb26>
 800b8ac:	08011ca4 	.word	0x08011ca4
 800b8b0:	58024400 	.word	0x58024400
 800b8b4:	03d09000 	.word	0x03d09000
 800b8b8:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800b8bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b8c0:	2b40      	cmp	r3, #64	; 0x40
 800b8c2:	f200 80b7 	bhi.w	800ba34 <UART_SetConfig+0xad0>
 800b8c6:	a201      	add	r2, pc, #4	; (adr r2, 800b8cc <UART_SetConfig+0x968>)
 800b8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8cc:	0800b9d1 	.word	0x0800b9d1
 800b8d0:	0800b9d9 	.word	0x0800b9d9
 800b8d4:	0800ba35 	.word	0x0800ba35
 800b8d8:	0800ba35 	.word	0x0800ba35
 800b8dc:	0800b9e1 	.word	0x0800b9e1
 800b8e0:	0800ba35 	.word	0x0800ba35
 800b8e4:	0800ba35 	.word	0x0800ba35
 800b8e8:	0800ba35 	.word	0x0800ba35
 800b8ec:	0800b9f1 	.word	0x0800b9f1
 800b8f0:	0800ba35 	.word	0x0800ba35
 800b8f4:	0800ba35 	.word	0x0800ba35
 800b8f8:	0800ba35 	.word	0x0800ba35
 800b8fc:	0800ba35 	.word	0x0800ba35
 800b900:	0800ba35 	.word	0x0800ba35
 800b904:	0800ba35 	.word	0x0800ba35
 800b908:	0800ba35 	.word	0x0800ba35
 800b90c:	0800ba01 	.word	0x0800ba01
 800b910:	0800ba35 	.word	0x0800ba35
 800b914:	0800ba35 	.word	0x0800ba35
 800b918:	0800ba35 	.word	0x0800ba35
 800b91c:	0800ba35 	.word	0x0800ba35
 800b920:	0800ba35 	.word	0x0800ba35
 800b924:	0800ba35 	.word	0x0800ba35
 800b928:	0800ba35 	.word	0x0800ba35
 800b92c:	0800ba35 	.word	0x0800ba35
 800b930:	0800ba35 	.word	0x0800ba35
 800b934:	0800ba35 	.word	0x0800ba35
 800b938:	0800ba35 	.word	0x0800ba35
 800b93c:	0800ba35 	.word	0x0800ba35
 800b940:	0800ba35 	.word	0x0800ba35
 800b944:	0800ba35 	.word	0x0800ba35
 800b948:	0800ba35 	.word	0x0800ba35
 800b94c:	0800ba27 	.word	0x0800ba27
 800b950:	0800ba35 	.word	0x0800ba35
 800b954:	0800ba35 	.word	0x0800ba35
 800b958:	0800ba35 	.word	0x0800ba35
 800b95c:	0800ba35 	.word	0x0800ba35
 800b960:	0800ba35 	.word	0x0800ba35
 800b964:	0800ba35 	.word	0x0800ba35
 800b968:	0800ba35 	.word	0x0800ba35
 800b96c:	0800ba35 	.word	0x0800ba35
 800b970:	0800ba35 	.word	0x0800ba35
 800b974:	0800ba35 	.word	0x0800ba35
 800b978:	0800ba35 	.word	0x0800ba35
 800b97c:	0800ba35 	.word	0x0800ba35
 800b980:	0800ba35 	.word	0x0800ba35
 800b984:	0800ba35 	.word	0x0800ba35
 800b988:	0800ba35 	.word	0x0800ba35
 800b98c:	0800ba35 	.word	0x0800ba35
 800b990:	0800ba35 	.word	0x0800ba35
 800b994:	0800ba35 	.word	0x0800ba35
 800b998:	0800ba35 	.word	0x0800ba35
 800b99c:	0800ba35 	.word	0x0800ba35
 800b9a0:	0800ba35 	.word	0x0800ba35
 800b9a4:	0800ba35 	.word	0x0800ba35
 800b9a8:	0800ba35 	.word	0x0800ba35
 800b9ac:	0800ba35 	.word	0x0800ba35
 800b9b0:	0800ba35 	.word	0x0800ba35
 800b9b4:	0800ba35 	.word	0x0800ba35
 800b9b8:	0800ba35 	.word	0x0800ba35
 800b9bc:	0800ba35 	.word	0x0800ba35
 800b9c0:	0800ba35 	.word	0x0800ba35
 800b9c4:	0800ba35 	.word	0x0800ba35
 800b9c8:	0800ba35 	.word	0x0800ba35
 800b9cc:	0800ba2d 	.word	0x0800ba2d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b9d0:	f7fc fd78 	bl	80084c4 <HAL_RCC_GetPCLK1Freq>
 800b9d4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b9d6:	e033      	b.n	800ba40 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b9d8:	f7fc fd8a 	bl	80084f0 <HAL_RCC_GetPCLK2Freq>
 800b9dc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b9de:	e02f      	b.n	800ba40 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9e0:	f107 0314 	add.w	r3, r7, #20
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f7fd ff15 	bl	8009814 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b9ea:	69bb      	ldr	r3, [r7, #24]
 800b9ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b9ee:	e027      	b.n	800ba40 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9f0:	f107 0308 	add.w	r3, r7, #8
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7fe f859 	bl	8009aac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b9fe:	e01f      	b.n	800ba40 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba00:	4b2c      	ldr	r3, [pc, #176]	; (800bab4 <UART_SetConfig+0xb50>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f003 0320 	and.w	r3, r3, #32
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d009      	beq.n	800ba20 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ba0c:	4b29      	ldr	r3, [pc, #164]	; (800bab4 <UART_SetConfig+0xb50>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	08db      	lsrs	r3, r3, #3
 800ba12:	f003 0303 	and.w	r3, r3, #3
 800ba16:	4a28      	ldr	r2, [pc, #160]	; (800bab8 <UART_SetConfig+0xb54>)
 800ba18:	fa22 f303 	lsr.w	r3, r2, r3
 800ba1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ba1e:	e00f      	b.n	800ba40 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800ba20:	4b25      	ldr	r3, [pc, #148]	; (800bab8 <UART_SetConfig+0xb54>)
 800ba22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba24:	e00c      	b.n	800ba40 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ba26:	4b25      	ldr	r3, [pc, #148]	; (800babc <UART_SetConfig+0xb58>)
 800ba28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba2a:	e009      	b.n	800ba40 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba32:	e005      	b.n	800ba40 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800ba34:	2300      	movs	r3, #0
 800ba36:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ba38:	2301      	movs	r3, #1
 800ba3a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ba3e:	bf00      	nop
    }

    if (pclk != 0U)
 800ba40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d021      	beq.n	800ba8a <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba4a:	4a1d      	ldr	r2, [pc, #116]	; (800bac0 <UART_SetConfig+0xb5c>)
 800ba4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba50:	461a      	mov	r2, r3
 800ba52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba54:	fbb3 f2f2 	udiv	r2, r3, r2
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	085b      	lsrs	r3, r3, #1
 800ba5e:	441a      	add	r2, r3
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	685b      	ldr	r3, [r3, #4]
 800ba64:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba6e:	2b0f      	cmp	r3, #15
 800ba70:	d908      	bls.n	800ba84 <UART_SetConfig+0xb20>
 800ba72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba78:	d204      	bcs.n	800ba84 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba80:	60da      	str	r2, [r3, #12]
 800ba82:	e002      	b.n	800ba8a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800ba84:	2301      	movs	r3, #1
 800ba86:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2201      	movs	r2, #1
 800ba96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2200      	movs	r2, #0
 800baa4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800baa6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3738      	adds	r7, #56	; 0x38
 800baae:	46bd      	mov	sp, r7
 800bab0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800bab4:	58024400 	.word	0x58024400
 800bab8:	03d09000 	.word	0x03d09000
 800babc:	003d0900 	.word	0x003d0900
 800bac0:	08011ca4 	.word	0x08011ca4

0800bac4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b083      	sub	sp, #12
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bad0:	f003 0301 	and.w	r3, r3, #1
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d00a      	beq.n	800baee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	430a      	orrs	r2, r1
 800baec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baf2:	f003 0302 	and.w	r3, r3, #2
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d00a      	beq.n	800bb10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	685b      	ldr	r3, [r3, #4]
 800bb00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	430a      	orrs	r2, r1
 800bb0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb14:	f003 0304 	and.w	r3, r3, #4
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d00a      	beq.n	800bb32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	685b      	ldr	r3, [r3, #4]
 800bb22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	430a      	orrs	r2, r1
 800bb30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb36:	f003 0308 	and.w	r3, r3, #8
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d00a      	beq.n	800bb54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	685b      	ldr	r3, [r3, #4]
 800bb44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	430a      	orrs	r2, r1
 800bb52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb58:	f003 0310 	and.w	r3, r3, #16
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d00a      	beq.n	800bb76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	689b      	ldr	r3, [r3, #8]
 800bb66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	430a      	orrs	r2, r1
 800bb74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb7a:	f003 0320 	and.w	r3, r3, #32
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d00a      	beq.n	800bb98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	689b      	ldr	r3, [r3, #8]
 800bb88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	430a      	orrs	r2, r1
 800bb96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d01a      	beq.n	800bbda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	685b      	ldr	r3, [r3, #4]
 800bbaa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	430a      	orrs	r2, r1
 800bbb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bbc2:	d10a      	bne.n	800bbda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	685b      	ldr	r3, [r3, #4]
 800bbca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	430a      	orrs	r2, r1
 800bbd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d00a      	beq.n	800bbfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	685b      	ldr	r3, [r3, #4]
 800bbec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	430a      	orrs	r2, r1
 800bbfa:	605a      	str	r2, [r3, #4]
  }
}
 800bbfc:	bf00      	nop
 800bbfe:	370c      	adds	r7, #12
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr

0800bc08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b086      	sub	sp, #24
 800bc0c:	af02      	add	r7, sp, #8
 800bc0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2200      	movs	r2, #0
 800bc14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800bc18:	f7f6 fab2 	bl	8002180 <HAL_GetTick>
 800bc1c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f003 0308 	and.w	r3, r3, #8
 800bc28:	2b08      	cmp	r3, #8
 800bc2a:	d10e      	bne.n	800bc4a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bc30:	9300      	str	r3, [sp, #0]
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2200      	movs	r2, #0
 800bc36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f000 f82c 	bl	800bc98 <UART_WaitOnFlagUntilTimeout>
 800bc40:	4603      	mov	r3, r0
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d001      	beq.n	800bc4a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc46:	2303      	movs	r3, #3
 800bc48:	e022      	b.n	800bc90 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f003 0304 	and.w	r3, r3, #4
 800bc54:	2b04      	cmp	r3, #4
 800bc56:	d10e      	bne.n	800bc76 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bc5c:	9300      	str	r3, [sp, #0]
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2200      	movs	r2, #0
 800bc62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f000 f816 	bl	800bc98 <UART_WaitOnFlagUntilTimeout>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d001      	beq.n	800bc76 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc72:	2303      	movs	r3, #3
 800bc74:	e00c      	b.n	800bc90 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2220      	movs	r2, #32
 800bc7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2220      	movs	r2, #32
 800bc82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bc8e:	2300      	movs	r3, #0
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3710      	adds	r7, #16
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}

0800bc98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b084      	sub	sp, #16
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	60f8      	str	r0, [r7, #12]
 800bca0:	60b9      	str	r1, [r7, #8]
 800bca2:	603b      	str	r3, [r7, #0]
 800bca4:	4613      	mov	r3, r2
 800bca6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bca8:	e062      	b.n	800bd70 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bcaa:	69bb      	ldr	r3, [r7, #24]
 800bcac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bcb0:	d05e      	beq.n	800bd70 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bcb2:	f7f6 fa65 	bl	8002180 <HAL_GetTick>
 800bcb6:	4602      	mov	r2, r0
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	1ad3      	subs	r3, r2, r3
 800bcbc:	69ba      	ldr	r2, [r7, #24]
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d302      	bcc.n	800bcc8 <UART_WaitOnFlagUntilTimeout+0x30>
 800bcc2:	69bb      	ldr	r3, [r7, #24]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d11d      	bne.n	800bd04 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	681a      	ldr	r2, [r3, #0]
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bcd6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	689a      	ldr	r2, [r3, #8]
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f022 0201 	bic.w	r2, r2, #1
 800bce6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	2220      	movs	r2, #32
 800bcec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2220      	movs	r2, #32
 800bcf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800bd00:	2303      	movs	r3, #3
 800bd02:	e045      	b.n	800bd90 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f003 0304 	and.w	r3, r3, #4
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d02e      	beq.n	800bd70 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	69db      	ldr	r3, [r3, #28]
 800bd18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd20:	d126      	bne.n	800bd70 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bd2a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	681a      	ldr	r2, [r3, #0]
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bd3a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	689a      	ldr	r2, [r3, #8]
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f022 0201 	bic.w	r2, r2, #1
 800bd4a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2220      	movs	r2, #32
 800bd50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2220      	movs	r2, #32
 800bd58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	2220      	movs	r2, #32
 800bd60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2200      	movs	r2, #0
 800bd68:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800bd6c:	2303      	movs	r3, #3
 800bd6e:	e00f      	b.n	800bd90 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	69da      	ldr	r2, [r3, #28]
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	4013      	ands	r3, r2
 800bd7a:	68ba      	ldr	r2, [r7, #8]
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	bf0c      	ite	eq
 800bd80:	2301      	moveq	r3, #1
 800bd82:	2300      	movne	r3, #0
 800bd84:	b2db      	uxtb	r3, r3
 800bd86:	461a      	mov	r2, r3
 800bd88:	79fb      	ldrb	r3, [r7, #7]
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	d08d      	beq.n	800bcaa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bd8e:	2300      	movs	r3, #0
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3710      	adds	r7, #16
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b083      	sub	sp, #12
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	681a      	ldr	r2, [r3, #0]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bdae:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	6899      	ldr	r1, [r3, #8]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681a      	ldr	r2, [r3, #0]
 800bdba:	4b08      	ldr	r3, [pc, #32]	; (800bddc <UART_EndRxTransfer+0x44>)
 800bdbc:	400b      	ands	r3, r1
 800bdbe:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2220      	movs	r2, #32
 800bdc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800bdce:	bf00      	nop
 800bdd0:	370c      	adds	r7, #12
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd8:	4770      	bx	lr
 800bdda:	bf00      	nop
 800bddc:	effffffe 	.word	0xeffffffe

0800bde0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b084      	sub	sp, #16
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bdfe:	68f8      	ldr	r0, [r7, #12]
 800be00:	f7ff f8a6 	bl	800af50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be04:	bf00      	nop
 800be06:	3710      	adds	r7, #16
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}

0800be0c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b082      	sub	sp, #8
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	681a      	ldr	r2, [r3, #0]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be22:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2220      	movs	r2, #32
 800be28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2200      	movs	r2, #0
 800be30:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f7ff f882 	bl	800af3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be38:	bf00      	nop
 800be3a:	3708      	adds	r7, #8
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800be40:	b480      	push	{r7}
 800be42:	b083      	sub	sp, #12
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800be48:	bf00      	nop
 800be4a:	370c      	adds	r7, #12
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr

0800be54 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800be54:	b480      	push	{r7}
 800be56:	b083      	sub	sp, #12
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800be5c:	bf00      	nop
 800be5e:	370c      	adds	r7, #12
 800be60:	46bd      	mov	sp, r7
 800be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be66:	4770      	bx	lr

0800be68 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800be68:	b480      	push	{r7}
 800be6a:	b083      	sub	sp, #12
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800be70:	bf00      	nop
 800be72:	370c      	adds	r7, #12
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr

0800be7c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b085      	sub	sp, #20
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800be8a:	2b01      	cmp	r3, #1
 800be8c:	d101      	bne.n	800be92 <HAL_UARTEx_DisableFifoMode+0x16>
 800be8e:	2302      	movs	r3, #2
 800be90:	e027      	b.n	800bee2 <HAL_UARTEx_DisableFifoMode+0x66>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2201      	movs	r2, #1
 800be96:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2224      	movs	r2, #36	; 0x24
 800be9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	681a      	ldr	r2, [r3, #0]
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f022 0201 	bic.w	r2, r2, #1
 800beb8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bec0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2200      	movs	r2, #0
 800bec6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	68fa      	ldr	r2, [r7, #12]
 800bece:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2220      	movs	r2, #32
 800bed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2200      	movs	r2, #0
 800bedc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bee0:	2300      	movs	r3, #0
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3714      	adds	r7, #20
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr

0800beee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800beee:	b580      	push	{r7, lr}
 800bef0:	b084      	sub	sp, #16
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	6078      	str	r0, [r7, #4]
 800bef6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800befe:	2b01      	cmp	r3, #1
 800bf00:	d101      	bne.n	800bf06 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bf02:	2302      	movs	r3, #2
 800bf04:	e02d      	b.n	800bf62 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2201      	movs	r2, #1
 800bf0a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2224      	movs	r2, #36	; 0x24
 800bf12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	681a      	ldr	r2, [r3, #0]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f022 0201 	bic.w	r2, r2, #1
 800bf2c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	689b      	ldr	r3, [r3, #8]
 800bf34:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	683a      	ldr	r2, [r7, #0]
 800bf3e:	430a      	orrs	r2, r1
 800bf40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f000 f850 	bl	800bfe8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	68fa      	ldr	r2, [r7, #12]
 800bf4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2220      	movs	r2, #32
 800bf54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bf60:	2300      	movs	r3, #0
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3710      	adds	r7, #16
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}

0800bf6a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf6a:	b580      	push	{r7, lr}
 800bf6c:	b084      	sub	sp, #16
 800bf6e:	af00      	add	r7, sp, #0
 800bf70:	6078      	str	r0, [r7, #4]
 800bf72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bf7a:	2b01      	cmp	r3, #1
 800bf7c:	d101      	bne.n	800bf82 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bf7e:	2302      	movs	r3, #2
 800bf80:	e02d      	b.n	800bfde <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2201      	movs	r2, #1
 800bf86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2224      	movs	r2, #36	; 0x24
 800bf8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	681a      	ldr	r2, [r3, #0]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f022 0201 	bic.w	r2, r2, #1
 800bfa8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	689b      	ldr	r3, [r3, #8]
 800bfb0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	683a      	ldr	r2, [r7, #0]
 800bfba:	430a      	orrs	r2, r1
 800bfbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f000 f812 	bl	800bfe8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	68fa      	ldr	r2, [r7, #12]
 800bfca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2220      	movs	r2, #32
 800bfd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bfdc:	2300      	movs	r3, #0
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3710      	adds	r7, #16
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
	...

0800bfe8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b089      	sub	sp, #36	; 0x24
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800bff0:	4a2f      	ldr	r2, [pc, #188]	; (800c0b0 <UARTEx_SetNbDataToProcess+0xc8>)
 800bff2:	f107 0314 	add.w	r3, r7, #20
 800bff6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bffa:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800bffe:	4a2d      	ldr	r2, [pc, #180]	; (800c0b4 <UARTEx_SetNbDataToProcess+0xcc>)
 800c000:	f107 030c 	add.w	r3, r7, #12
 800c004:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c008:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c010:	2b00      	cmp	r3, #0
 800c012:	d108      	bne.n	800c026 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2201      	movs	r2, #1
 800c018:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2201      	movs	r2, #1
 800c020:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c024:	e03d      	b.n	800c0a2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c026:	2310      	movs	r3, #16
 800c028:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c02a:	2310      	movs	r3, #16
 800c02c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	689b      	ldr	r3, [r3, #8]
 800c034:	0e5b      	lsrs	r3, r3, #25
 800c036:	b2db      	uxtb	r3, r3
 800c038:	f003 0307 	and.w	r3, r3, #7
 800c03c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	689b      	ldr	r3, [r3, #8]
 800c044:	0f5b      	lsrs	r3, r3, #29
 800c046:	b2db      	uxtb	r3, r3
 800c048:	f003 0307 	and.w	r3, r3, #7
 800c04c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800c04e:	7fbb      	ldrb	r3, [r7, #30]
 800c050:	7f3a      	ldrb	r2, [r7, #28]
 800c052:	f107 0120 	add.w	r1, r7, #32
 800c056:	440a      	add	r2, r1
 800c058:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c05c:	fb02 f303 	mul.w	r3, r2, r3
 800c060:	7f3a      	ldrb	r2, [r7, #28]
 800c062:	f107 0120 	add.w	r1, r7, #32
 800c066:	440a      	add	r2, r1
 800c068:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c06c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c070:	b29a      	uxth	r2, r3
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800c078:	7ffb      	ldrb	r3, [r7, #31]
 800c07a:	7f7a      	ldrb	r2, [r7, #29]
 800c07c:	f107 0120 	add.w	r1, r7, #32
 800c080:	440a      	add	r2, r1
 800c082:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c086:	fb02 f303 	mul.w	r3, r2, r3
 800c08a:	7f7a      	ldrb	r2, [r7, #29]
 800c08c:	f107 0120 	add.w	r1, r7, #32
 800c090:	440a      	add	r2, r1
 800c092:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c096:	fb93 f3f2 	sdiv	r3, r3, r2
 800c09a:	b29a      	uxth	r2, r3
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c0a2:	bf00      	nop
 800c0a4:	3724      	adds	r7, #36	; 0x24
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr
 800c0ae:	bf00      	nop
 800c0b0:	08011c7c 	.word	0x08011c7c
 800c0b4:	08011c84 	.word	0x08011c84

0800c0b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c0b8:	b084      	sub	sp, #16
 800c0ba:	b580      	push	{r7, lr}
 800c0bc:	b084      	sub	sp, #16
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
 800c0c2:	f107 001c 	add.w	r0, r7, #28
 800c0c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	d120      	bne.n	800c112 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	68da      	ldr	r2, [r3, #12]
 800c0e0:	4b25      	ldr	r3, [pc, #148]	; (800c178 <USB_CoreInit+0xc0>)
 800c0e2:	4013      	ands	r3, r2
 800c0e4:	687a      	ldr	r2, [r7, #4]
 800c0e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	68db      	ldr	r3, [r3, #12]
 800c0ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c0f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0f6:	2b01      	cmp	r3, #1
 800c0f8:	d105      	bne.n	800c106 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	68db      	ldr	r3, [r3, #12]
 800c0fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f000 fa4c 	bl	800c5a4 <USB_CoreReset>
 800c10c:	4603      	mov	r3, r0
 800c10e:	73fb      	strb	r3, [r7, #15]
 800c110:	e01a      	b.n	800c148 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	68db      	ldr	r3, [r3, #12]
 800c116:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f000 fa40 	bl	800c5a4 <USB_CoreReset>
 800c124:	4603      	mov	r3, r0
 800c126:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d106      	bne.n	800c13c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c132:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	639a      	str	r2, [r3, #56]	; 0x38
 800c13a:	e005      	b.n	800c148 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c140:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c14a:	2b01      	cmp	r3, #1
 800c14c:	d10b      	bne.n	800c166 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	689b      	ldr	r3, [r3, #8]
 800c152:	f043 0206 	orr.w	r2, r3, #6
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	689b      	ldr	r3, [r3, #8]
 800c15e:	f043 0220 	orr.w	r2, r3, #32
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c166:	7bfb      	ldrb	r3, [r7, #15]
}
 800c168:	4618      	mov	r0, r3
 800c16a:	3710      	adds	r7, #16
 800c16c:	46bd      	mov	sp, r7
 800c16e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c172:	b004      	add	sp, #16
 800c174:	4770      	bx	lr
 800c176:	bf00      	nop
 800c178:	ffbdffbf 	.word	0xffbdffbf

0800c17c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b083      	sub	sp, #12
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	689b      	ldr	r3, [r3, #8]
 800c188:	f023 0201 	bic.w	r2, r3, #1
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c190:	2300      	movs	r3, #0
}
 800c192:	4618      	mov	r0, r3
 800c194:	370c      	adds	r7, #12
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr

0800c19e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c19e:	b580      	push	{r7, lr}
 800c1a0:	b082      	sub	sp, #8
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	6078      	str	r0, [r7, #4]
 800c1a6:	460b      	mov	r3, r1
 800c1a8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	68db      	ldr	r3, [r3, #12]
 800c1ae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c1b6:	78fb      	ldrb	r3, [r7, #3]
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	d106      	bne.n	800c1ca <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	68db      	ldr	r3, [r3, #12]
 800c1c0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	60da      	str	r2, [r3, #12]
 800c1c8:	e00b      	b.n	800c1e2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c1ca:	78fb      	ldrb	r3, [r7, #3]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d106      	bne.n	800c1de <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	68db      	ldr	r3, [r3, #12]
 800c1d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	60da      	str	r2, [r3, #12]
 800c1dc:	e001      	b.n	800c1e2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c1de:	2301      	movs	r3, #1
 800c1e0:	e003      	b.n	800c1ea <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c1e2:	2032      	movs	r0, #50	; 0x32
 800c1e4:	f7f5 ffd8 	bl	8002198 <HAL_Delay>

  return HAL_OK;
 800c1e8:	2300      	movs	r3, #0
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3708      	adds	r7, #8
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}
	...

0800c1f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c1f4:	b084      	sub	sp, #16
 800c1f6:	b580      	push	{r7, lr}
 800c1f8:	b086      	sub	sp, #24
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]
 800c1fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c202:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c206:	2300      	movs	r3, #0
 800c208:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c20e:	2300      	movs	r3, #0
 800c210:	613b      	str	r3, [r7, #16]
 800c212:	e009      	b.n	800c228 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	3340      	adds	r3, #64	; 0x40
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	4413      	add	r3, r2
 800c21e:	2200      	movs	r2, #0
 800c220:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	3301      	adds	r3, #1
 800c226:	613b      	str	r3, [r7, #16]
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	2b0e      	cmp	r3, #14
 800c22c:	d9f2      	bls.n	800c214 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c22e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c230:	2b00      	cmp	r3, #0
 800c232:	d11c      	bne.n	800c26e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c23a:	685b      	ldr	r3, [r3, #4]
 800c23c:	68fa      	ldr	r2, [r7, #12]
 800c23e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c242:	f043 0302 	orr.w	r3, r3, #2
 800c246:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c24c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	601a      	str	r2, [r3, #0]
 800c26c:	e005      	b.n	800c27a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c272:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c280:	461a      	mov	r2, r3
 800c282:	2300      	movs	r3, #0
 800c284:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c28c:	4619      	mov	r1, r3
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c294:	461a      	mov	r2, r3
 800c296:	680b      	ldr	r3, [r1, #0]
 800c298:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c29c:	2b01      	cmp	r3, #1
 800c29e:	d10c      	bne.n	800c2ba <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d104      	bne.n	800c2b0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c2a6:	2100      	movs	r1, #0
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f000 f949 	bl	800c540 <USB_SetDevSpeed>
 800c2ae:	e008      	b.n	800c2c2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c2b0:	2101      	movs	r1, #1
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f000 f944 	bl	800c540 <USB_SetDevSpeed>
 800c2b8:	e003      	b.n	800c2c2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c2ba:	2103      	movs	r1, #3
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f000 f93f 	bl	800c540 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c2c2:	2110      	movs	r1, #16
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f000 f8f3 	bl	800c4b0 <USB_FlushTxFifo>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d001      	beq.n	800c2d4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f000 f911 	bl	800c4fc <USB_FlushRxFifo>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d001      	beq.n	800c2e4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c302:	461a      	mov	r2, r3
 800c304:	2300      	movs	r3, #0
 800c306:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c308:	2300      	movs	r3, #0
 800c30a:	613b      	str	r3, [r7, #16]
 800c30c:	e043      	b.n	800c396 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	015a      	lsls	r2, r3, #5
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	4413      	add	r3, r2
 800c316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c320:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c324:	d118      	bne.n	800c358 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c326:	693b      	ldr	r3, [r7, #16]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d10a      	bne.n	800c342 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	015a      	lsls	r2, r3, #5
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	4413      	add	r3, r2
 800c334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c338:	461a      	mov	r2, r3
 800c33a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c33e:	6013      	str	r3, [r2, #0]
 800c340:	e013      	b.n	800c36a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c342:	693b      	ldr	r3, [r7, #16]
 800c344:	015a      	lsls	r2, r3, #5
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	4413      	add	r3, r2
 800c34a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c34e:	461a      	mov	r2, r3
 800c350:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c354:	6013      	str	r3, [r2, #0]
 800c356:	e008      	b.n	800c36a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	015a      	lsls	r2, r3, #5
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	4413      	add	r3, r2
 800c360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c364:	461a      	mov	r2, r3
 800c366:	2300      	movs	r3, #0
 800c368:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	015a      	lsls	r2, r3, #5
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	4413      	add	r3, r2
 800c372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c376:	461a      	mov	r2, r3
 800c378:	2300      	movs	r3, #0
 800c37a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	015a      	lsls	r2, r3, #5
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	4413      	add	r3, r2
 800c384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c388:	461a      	mov	r2, r3
 800c38a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c38e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	3301      	adds	r3, #1
 800c394:	613b      	str	r3, [r7, #16]
 800c396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c398:	693a      	ldr	r2, [r7, #16]
 800c39a:	429a      	cmp	r2, r3
 800c39c:	d3b7      	bcc.n	800c30e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c39e:	2300      	movs	r3, #0
 800c3a0:	613b      	str	r3, [r7, #16]
 800c3a2:	e043      	b.n	800c42c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	015a      	lsls	r2, r3, #5
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	4413      	add	r3, r2
 800c3ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c3b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c3ba:	d118      	bne.n	800c3ee <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d10a      	bne.n	800c3d8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	015a      	lsls	r2, r3, #5
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	4413      	add	r3, r2
 800c3ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c3d4:	6013      	str	r3, [r2, #0]
 800c3d6:	e013      	b.n	800c400 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	015a      	lsls	r2, r3, #5
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	4413      	add	r3, r2
 800c3e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3e4:	461a      	mov	r2, r3
 800c3e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c3ea:	6013      	str	r3, [r2, #0]
 800c3ec:	e008      	b.n	800c400 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	015a      	lsls	r2, r3, #5
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	4413      	add	r3, r2
 800c3f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3fa:	461a      	mov	r2, r3
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	015a      	lsls	r2, r3, #5
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	4413      	add	r3, r2
 800c408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c40c:	461a      	mov	r2, r3
 800c40e:	2300      	movs	r3, #0
 800c410:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c412:	693b      	ldr	r3, [r7, #16]
 800c414:	015a      	lsls	r2, r3, #5
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	4413      	add	r3, r2
 800c41a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c41e:	461a      	mov	r2, r3
 800c420:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c424:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	3301      	adds	r3, #1
 800c42a:	613b      	str	r3, [r7, #16]
 800c42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c42e:	693a      	ldr	r2, [r7, #16]
 800c430:	429a      	cmp	r2, r3
 800c432:	d3b7      	bcc.n	800c3a4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c43a:	691b      	ldr	r3, [r3, #16]
 800c43c:	68fa      	ldr	r2, [r7, #12]
 800c43e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c442:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c446:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2200      	movs	r2, #0
 800c44c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c454:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d105      	bne.n	800c468 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	699b      	ldr	r3, [r3, #24]
 800c460:	f043 0210 	orr.w	r2, r3, #16
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	699a      	ldr	r2, [r3, #24]
 800c46c:	4b0e      	ldr	r3, [pc, #56]	; (800c4a8 <USB_DevInit+0x2b4>)
 800c46e:	4313      	orrs	r3, r2
 800c470:	687a      	ldr	r2, [r7, #4]
 800c472:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c476:	2b00      	cmp	r3, #0
 800c478:	d005      	beq.n	800c486 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	699b      	ldr	r3, [r3, #24]
 800c47e:	f043 0208 	orr.w	r2, r3, #8
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c488:	2b01      	cmp	r3, #1
 800c48a:	d105      	bne.n	800c498 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	699a      	ldr	r2, [r3, #24]
 800c490:	4b06      	ldr	r3, [pc, #24]	; (800c4ac <USB_DevInit+0x2b8>)
 800c492:	4313      	orrs	r3, r2
 800c494:	687a      	ldr	r2, [r7, #4]
 800c496:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c498:	7dfb      	ldrb	r3, [r7, #23]
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3718      	adds	r7, #24
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c4a4:	b004      	add	sp, #16
 800c4a6:	4770      	bx	lr
 800c4a8:	803c3800 	.word	0x803c3800
 800c4ac:	40000004 	.word	0x40000004

0800c4b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	b085      	sub	sp, #20
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	019b      	lsls	r3, r3, #6
 800c4c2:	f043 0220 	orr.w	r2, r3, #32
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	3301      	adds	r3, #1
 800c4ce:	60fb      	str	r3, [r7, #12]
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	4a09      	ldr	r2, [pc, #36]	; (800c4f8 <USB_FlushTxFifo+0x48>)
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d901      	bls.n	800c4dc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c4d8:	2303      	movs	r3, #3
 800c4da:	e006      	b.n	800c4ea <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	691b      	ldr	r3, [r3, #16]
 800c4e0:	f003 0320 	and.w	r3, r3, #32
 800c4e4:	2b20      	cmp	r3, #32
 800c4e6:	d0f0      	beq.n	800c4ca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c4e8:	2300      	movs	r3, #0
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3714      	adds	r7, #20
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f4:	4770      	bx	lr
 800c4f6:	bf00      	nop
 800c4f8:	00030d40 	.word	0x00030d40

0800c4fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b085      	sub	sp, #20
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c504:	2300      	movs	r3, #0
 800c506:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2210      	movs	r2, #16
 800c50c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	3301      	adds	r3, #1
 800c512:	60fb      	str	r3, [r7, #12]
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	4a09      	ldr	r2, [pc, #36]	; (800c53c <USB_FlushRxFifo+0x40>)
 800c518:	4293      	cmp	r3, r2
 800c51a:	d901      	bls.n	800c520 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c51c:	2303      	movs	r3, #3
 800c51e:	e006      	b.n	800c52e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	691b      	ldr	r3, [r3, #16]
 800c524:	f003 0310 	and.w	r3, r3, #16
 800c528:	2b10      	cmp	r3, #16
 800c52a:	d0f0      	beq.n	800c50e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c52c:	2300      	movs	r3, #0
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3714      	adds	r7, #20
 800c532:	46bd      	mov	sp, r7
 800c534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c538:	4770      	bx	lr
 800c53a:	bf00      	nop
 800c53c:	00030d40 	.word	0x00030d40

0800c540 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c540:	b480      	push	{r7}
 800c542:	b085      	sub	sp, #20
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
 800c548:	460b      	mov	r3, r1
 800c54a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c556:	681a      	ldr	r2, [r3, #0]
 800c558:	78fb      	ldrb	r3, [r7, #3]
 800c55a:	68f9      	ldr	r1, [r7, #12]
 800c55c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c560:	4313      	orrs	r3, r2
 800c562:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c564:	2300      	movs	r3, #0
}
 800c566:	4618      	mov	r0, r3
 800c568:	3714      	adds	r7, #20
 800c56a:	46bd      	mov	sp, r7
 800c56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c570:	4770      	bx	lr

0800c572 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c572:	b580      	push	{r7, lr}
 800c574:	b084      	sub	sp, #16
 800c576:	af00      	add	r7, sp, #0
 800c578:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c584:	685b      	ldr	r3, [r3, #4]
 800c586:	68fa      	ldr	r2, [r7, #12]
 800c588:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c58c:	f043 0302 	orr.w	r3, r3, #2
 800c590:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c592:	2003      	movs	r0, #3
 800c594:	f7f5 fe00 	bl	8002198 <HAL_Delay>

  return HAL_OK;
 800c598:	2300      	movs	r3, #0
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3710      	adds	r7, #16
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
	...

0800c5a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b085      	sub	sp, #20
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	3301      	adds	r3, #1
 800c5b4:	60fb      	str	r3, [r7, #12]
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	4a13      	ldr	r2, [pc, #76]	; (800c608 <USB_CoreReset+0x64>)
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d901      	bls.n	800c5c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c5be:	2303      	movs	r3, #3
 800c5c0:	e01b      	b.n	800c5fa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	691b      	ldr	r3, [r3, #16]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	daf2      	bge.n	800c5b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	691b      	ldr	r3, [r3, #16]
 800c5d2:	f043 0201 	orr.w	r2, r3, #1
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	3301      	adds	r3, #1
 800c5de:	60fb      	str	r3, [r7, #12]
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	4a09      	ldr	r2, [pc, #36]	; (800c608 <USB_CoreReset+0x64>)
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d901      	bls.n	800c5ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c5e8:	2303      	movs	r3, #3
 800c5ea:	e006      	b.n	800c5fa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	691b      	ldr	r3, [r3, #16]
 800c5f0:	f003 0301 	and.w	r3, r3, #1
 800c5f4:	2b01      	cmp	r3, #1
 800c5f6:	d0f0      	beq.n	800c5da <USB_CoreReset+0x36>

  return HAL_OK;
 800c5f8:	2300      	movs	r3, #0
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3714      	adds	r7, #20
 800c5fe:	46bd      	mov	sp, r7
 800c600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c604:	4770      	bx	lr
 800c606:	bf00      	nop
 800c608:	00030d40 	.word	0x00030d40

0800c60c <__errno>:
 800c60c:	4b01      	ldr	r3, [pc, #4]	; (800c614 <__errno+0x8>)
 800c60e:	6818      	ldr	r0, [r3, #0]
 800c610:	4770      	bx	lr
 800c612:	bf00      	nop
 800c614:	24000018 	.word	0x24000018

0800c618 <__sflush_r>:
 800c618:	898a      	ldrh	r2, [r1, #12]
 800c61a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c61e:	4605      	mov	r5, r0
 800c620:	0710      	lsls	r0, r2, #28
 800c622:	460c      	mov	r4, r1
 800c624:	d458      	bmi.n	800c6d8 <__sflush_r+0xc0>
 800c626:	684b      	ldr	r3, [r1, #4]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	dc05      	bgt.n	800c638 <__sflush_r+0x20>
 800c62c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c62e:	2b00      	cmp	r3, #0
 800c630:	dc02      	bgt.n	800c638 <__sflush_r+0x20>
 800c632:	2000      	movs	r0, #0
 800c634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c638:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c63a:	2e00      	cmp	r6, #0
 800c63c:	d0f9      	beq.n	800c632 <__sflush_r+0x1a>
 800c63e:	2300      	movs	r3, #0
 800c640:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c644:	682f      	ldr	r7, [r5, #0]
 800c646:	6a21      	ldr	r1, [r4, #32]
 800c648:	602b      	str	r3, [r5, #0]
 800c64a:	d032      	beq.n	800c6b2 <__sflush_r+0x9a>
 800c64c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c64e:	89a3      	ldrh	r3, [r4, #12]
 800c650:	075a      	lsls	r2, r3, #29
 800c652:	d505      	bpl.n	800c660 <__sflush_r+0x48>
 800c654:	6863      	ldr	r3, [r4, #4]
 800c656:	1ac0      	subs	r0, r0, r3
 800c658:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c65a:	b10b      	cbz	r3, 800c660 <__sflush_r+0x48>
 800c65c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c65e:	1ac0      	subs	r0, r0, r3
 800c660:	2300      	movs	r3, #0
 800c662:	4602      	mov	r2, r0
 800c664:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c666:	6a21      	ldr	r1, [r4, #32]
 800c668:	4628      	mov	r0, r5
 800c66a:	47b0      	blx	r6
 800c66c:	1c43      	adds	r3, r0, #1
 800c66e:	89a3      	ldrh	r3, [r4, #12]
 800c670:	d106      	bne.n	800c680 <__sflush_r+0x68>
 800c672:	6829      	ldr	r1, [r5, #0]
 800c674:	291d      	cmp	r1, #29
 800c676:	d848      	bhi.n	800c70a <__sflush_r+0xf2>
 800c678:	4a29      	ldr	r2, [pc, #164]	; (800c720 <__sflush_r+0x108>)
 800c67a:	40ca      	lsrs	r2, r1
 800c67c:	07d6      	lsls	r6, r2, #31
 800c67e:	d544      	bpl.n	800c70a <__sflush_r+0xf2>
 800c680:	2200      	movs	r2, #0
 800c682:	6062      	str	r2, [r4, #4]
 800c684:	04d9      	lsls	r1, r3, #19
 800c686:	6922      	ldr	r2, [r4, #16]
 800c688:	6022      	str	r2, [r4, #0]
 800c68a:	d504      	bpl.n	800c696 <__sflush_r+0x7e>
 800c68c:	1c42      	adds	r2, r0, #1
 800c68e:	d101      	bne.n	800c694 <__sflush_r+0x7c>
 800c690:	682b      	ldr	r3, [r5, #0]
 800c692:	b903      	cbnz	r3, 800c696 <__sflush_r+0x7e>
 800c694:	6560      	str	r0, [r4, #84]	; 0x54
 800c696:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c698:	602f      	str	r7, [r5, #0]
 800c69a:	2900      	cmp	r1, #0
 800c69c:	d0c9      	beq.n	800c632 <__sflush_r+0x1a>
 800c69e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6a2:	4299      	cmp	r1, r3
 800c6a4:	d002      	beq.n	800c6ac <__sflush_r+0x94>
 800c6a6:	4628      	mov	r0, r5
 800c6a8:	f000 f96e 	bl	800c988 <_free_r>
 800c6ac:	2000      	movs	r0, #0
 800c6ae:	6360      	str	r0, [r4, #52]	; 0x34
 800c6b0:	e7c0      	b.n	800c634 <__sflush_r+0x1c>
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	4628      	mov	r0, r5
 800c6b6:	47b0      	blx	r6
 800c6b8:	1c41      	adds	r1, r0, #1
 800c6ba:	d1c8      	bne.n	800c64e <__sflush_r+0x36>
 800c6bc:	682b      	ldr	r3, [r5, #0]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d0c5      	beq.n	800c64e <__sflush_r+0x36>
 800c6c2:	2b1d      	cmp	r3, #29
 800c6c4:	d001      	beq.n	800c6ca <__sflush_r+0xb2>
 800c6c6:	2b16      	cmp	r3, #22
 800c6c8:	d101      	bne.n	800c6ce <__sflush_r+0xb6>
 800c6ca:	602f      	str	r7, [r5, #0]
 800c6cc:	e7b1      	b.n	800c632 <__sflush_r+0x1a>
 800c6ce:	89a3      	ldrh	r3, [r4, #12]
 800c6d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6d4:	81a3      	strh	r3, [r4, #12]
 800c6d6:	e7ad      	b.n	800c634 <__sflush_r+0x1c>
 800c6d8:	690f      	ldr	r7, [r1, #16]
 800c6da:	2f00      	cmp	r7, #0
 800c6dc:	d0a9      	beq.n	800c632 <__sflush_r+0x1a>
 800c6de:	0793      	lsls	r3, r2, #30
 800c6e0:	680e      	ldr	r6, [r1, #0]
 800c6e2:	bf08      	it	eq
 800c6e4:	694b      	ldreq	r3, [r1, #20]
 800c6e6:	600f      	str	r7, [r1, #0]
 800c6e8:	bf18      	it	ne
 800c6ea:	2300      	movne	r3, #0
 800c6ec:	eba6 0807 	sub.w	r8, r6, r7
 800c6f0:	608b      	str	r3, [r1, #8]
 800c6f2:	f1b8 0f00 	cmp.w	r8, #0
 800c6f6:	dd9c      	ble.n	800c632 <__sflush_r+0x1a>
 800c6f8:	4643      	mov	r3, r8
 800c6fa:	463a      	mov	r2, r7
 800c6fc:	6a21      	ldr	r1, [r4, #32]
 800c6fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c700:	4628      	mov	r0, r5
 800c702:	47b0      	blx	r6
 800c704:	2800      	cmp	r0, #0
 800c706:	dc06      	bgt.n	800c716 <__sflush_r+0xfe>
 800c708:	89a3      	ldrh	r3, [r4, #12]
 800c70a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c70e:	81a3      	strh	r3, [r4, #12]
 800c710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c714:	e78e      	b.n	800c634 <__sflush_r+0x1c>
 800c716:	4407      	add	r7, r0
 800c718:	eba8 0800 	sub.w	r8, r8, r0
 800c71c:	e7e9      	b.n	800c6f2 <__sflush_r+0xda>
 800c71e:	bf00      	nop
 800c720:	20400001 	.word	0x20400001

0800c724 <_fflush_r>:
 800c724:	b538      	push	{r3, r4, r5, lr}
 800c726:	690b      	ldr	r3, [r1, #16]
 800c728:	4605      	mov	r5, r0
 800c72a:	460c      	mov	r4, r1
 800c72c:	b1db      	cbz	r3, 800c766 <_fflush_r+0x42>
 800c72e:	b118      	cbz	r0, 800c738 <_fflush_r+0x14>
 800c730:	6983      	ldr	r3, [r0, #24]
 800c732:	b90b      	cbnz	r3, 800c738 <_fflush_r+0x14>
 800c734:	f000 f872 	bl	800c81c <__sinit>
 800c738:	4b0c      	ldr	r3, [pc, #48]	; (800c76c <_fflush_r+0x48>)
 800c73a:	429c      	cmp	r4, r3
 800c73c:	d109      	bne.n	800c752 <_fflush_r+0x2e>
 800c73e:	686c      	ldr	r4, [r5, #4]
 800c740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c744:	b17b      	cbz	r3, 800c766 <_fflush_r+0x42>
 800c746:	4621      	mov	r1, r4
 800c748:	4628      	mov	r0, r5
 800c74a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c74e:	f7ff bf63 	b.w	800c618 <__sflush_r>
 800c752:	4b07      	ldr	r3, [pc, #28]	; (800c770 <_fflush_r+0x4c>)
 800c754:	429c      	cmp	r4, r3
 800c756:	d101      	bne.n	800c75c <_fflush_r+0x38>
 800c758:	68ac      	ldr	r4, [r5, #8]
 800c75a:	e7f1      	b.n	800c740 <_fflush_r+0x1c>
 800c75c:	4b05      	ldr	r3, [pc, #20]	; (800c774 <_fflush_r+0x50>)
 800c75e:	429c      	cmp	r4, r3
 800c760:	bf08      	it	eq
 800c762:	68ec      	ldreq	r4, [r5, #12]
 800c764:	e7ec      	b.n	800c740 <_fflush_r+0x1c>
 800c766:	2000      	movs	r0, #0
 800c768:	bd38      	pop	{r3, r4, r5, pc}
 800c76a:	bf00      	nop
 800c76c:	08011cdc 	.word	0x08011cdc
 800c770:	08011cfc 	.word	0x08011cfc
 800c774:	08011cbc 	.word	0x08011cbc

0800c778 <fflush>:
 800c778:	4601      	mov	r1, r0
 800c77a:	b920      	cbnz	r0, 800c786 <fflush+0xe>
 800c77c:	4b04      	ldr	r3, [pc, #16]	; (800c790 <fflush+0x18>)
 800c77e:	4905      	ldr	r1, [pc, #20]	; (800c794 <fflush+0x1c>)
 800c780:	6818      	ldr	r0, [r3, #0]
 800c782:	f000 b8b7 	b.w	800c8f4 <_fwalk_reent>
 800c786:	4b04      	ldr	r3, [pc, #16]	; (800c798 <fflush+0x20>)
 800c788:	6818      	ldr	r0, [r3, #0]
 800c78a:	f7ff bfcb 	b.w	800c724 <_fflush_r>
 800c78e:	bf00      	nop
 800c790:	08011d1c 	.word	0x08011d1c
 800c794:	0800c725 	.word	0x0800c725
 800c798:	24000018 	.word	0x24000018

0800c79c <std>:
 800c79c:	2300      	movs	r3, #0
 800c79e:	b510      	push	{r4, lr}
 800c7a0:	4604      	mov	r4, r0
 800c7a2:	e9c0 3300 	strd	r3, r3, [r0]
 800c7a6:	6083      	str	r3, [r0, #8]
 800c7a8:	8181      	strh	r1, [r0, #12]
 800c7aa:	6643      	str	r3, [r0, #100]	; 0x64
 800c7ac:	81c2      	strh	r2, [r0, #14]
 800c7ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c7b2:	6183      	str	r3, [r0, #24]
 800c7b4:	4619      	mov	r1, r3
 800c7b6:	2208      	movs	r2, #8
 800c7b8:	305c      	adds	r0, #92	; 0x5c
 800c7ba:	f000 f8dd 	bl	800c978 <memset>
 800c7be:	4b05      	ldr	r3, [pc, #20]	; (800c7d4 <std+0x38>)
 800c7c0:	6263      	str	r3, [r4, #36]	; 0x24
 800c7c2:	4b05      	ldr	r3, [pc, #20]	; (800c7d8 <std+0x3c>)
 800c7c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c7c6:	4b05      	ldr	r3, [pc, #20]	; (800c7dc <std+0x40>)
 800c7c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c7ca:	4b05      	ldr	r3, [pc, #20]	; (800c7e0 <std+0x44>)
 800c7cc:	6224      	str	r4, [r4, #32]
 800c7ce:	6323      	str	r3, [r4, #48]	; 0x30
 800c7d0:	bd10      	pop	{r4, pc}
 800c7d2:	bf00      	nop
 800c7d4:	0800d865 	.word	0x0800d865
 800c7d8:	0800d887 	.word	0x0800d887
 800c7dc:	0800d8bf 	.word	0x0800d8bf
 800c7e0:	0800d8e3 	.word	0x0800d8e3

0800c7e4 <_cleanup_r>:
 800c7e4:	4901      	ldr	r1, [pc, #4]	; (800c7ec <_cleanup_r+0x8>)
 800c7e6:	f000 b885 	b.w	800c8f4 <_fwalk_reent>
 800c7ea:	bf00      	nop
 800c7ec:	0800c725 	.word	0x0800c725

0800c7f0 <__sfmoreglue>:
 800c7f0:	b570      	push	{r4, r5, r6, lr}
 800c7f2:	1e4a      	subs	r2, r1, #1
 800c7f4:	2568      	movs	r5, #104	; 0x68
 800c7f6:	4355      	muls	r5, r2
 800c7f8:	460e      	mov	r6, r1
 800c7fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c7fe:	f000 f911 	bl	800ca24 <_malloc_r>
 800c802:	4604      	mov	r4, r0
 800c804:	b140      	cbz	r0, 800c818 <__sfmoreglue+0x28>
 800c806:	2100      	movs	r1, #0
 800c808:	e9c0 1600 	strd	r1, r6, [r0]
 800c80c:	300c      	adds	r0, #12
 800c80e:	60a0      	str	r0, [r4, #8]
 800c810:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c814:	f000 f8b0 	bl	800c978 <memset>
 800c818:	4620      	mov	r0, r4
 800c81a:	bd70      	pop	{r4, r5, r6, pc}

0800c81c <__sinit>:
 800c81c:	6983      	ldr	r3, [r0, #24]
 800c81e:	b510      	push	{r4, lr}
 800c820:	4604      	mov	r4, r0
 800c822:	bb33      	cbnz	r3, 800c872 <__sinit+0x56>
 800c824:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800c828:	6503      	str	r3, [r0, #80]	; 0x50
 800c82a:	4b12      	ldr	r3, [pc, #72]	; (800c874 <__sinit+0x58>)
 800c82c:	4a12      	ldr	r2, [pc, #72]	; (800c878 <__sinit+0x5c>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	6282      	str	r2, [r0, #40]	; 0x28
 800c832:	4298      	cmp	r0, r3
 800c834:	bf04      	itt	eq
 800c836:	2301      	moveq	r3, #1
 800c838:	6183      	streq	r3, [r0, #24]
 800c83a:	f000 f81f 	bl	800c87c <__sfp>
 800c83e:	6060      	str	r0, [r4, #4]
 800c840:	4620      	mov	r0, r4
 800c842:	f000 f81b 	bl	800c87c <__sfp>
 800c846:	60a0      	str	r0, [r4, #8]
 800c848:	4620      	mov	r0, r4
 800c84a:	f000 f817 	bl	800c87c <__sfp>
 800c84e:	2200      	movs	r2, #0
 800c850:	60e0      	str	r0, [r4, #12]
 800c852:	2104      	movs	r1, #4
 800c854:	6860      	ldr	r0, [r4, #4]
 800c856:	f7ff ffa1 	bl	800c79c <std>
 800c85a:	2201      	movs	r2, #1
 800c85c:	2109      	movs	r1, #9
 800c85e:	68a0      	ldr	r0, [r4, #8]
 800c860:	f7ff ff9c 	bl	800c79c <std>
 800c864:	2202      	movs	r2, #2
 800c866:	2112      	movs	r1, #18
 800c868:	68e0      	ldr	r0, [r4, #12]
 800c86a:	f7ff ff97 	bl	800c79c <std>
 800c86e:	2301      	movs	r3, #1
 800c870:	61a3      	str	r3, [r4, #24]
 800c872:	bd10      	pop	{r4, pc}
 800c874:	08011d1c 	.word	0x08011d1c
 800c878:	0800c7e5 	.word	0x0800c7e5

0800c87c <__sfp>:
 800c87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c87e:	4b1b      	ldr	r3, [pc, #108]	; (800c8ec <__sfp+0x70>)
 800c880:	681e      	ldr	r6, [r3, #0]
 800c882:	69b3      	ldr	r3, [r6, #24]
 800c884:	4607      	mov	r7, r0
 800c886:	b913      	cbnz	r3, 800c88e <__sfp+0x12>
 800c888:	4630      	mov	r0, r6
 800c88a:	f7ff ffc7 	bl	800c81c <__sinit>
 800c88e:	3648      	adds	r6, #72	; 0x48
 800c890:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c894:	3b01      	subs	r3, #1
 800c896:	d503      	bpl.n	800c8a0 <__sfp+0x24>
 800c898:	6833      	ldr	r3, [r6, #0]
 800c89a:	b133      	cbz	r3, 800c8aa <__sfp+0x2e>
 800c89c:	6836      	ldr	r6, [r6, #0]
 800c89e:	e7f7      	b.n	800c890 <__sfp+0x14>
 800c8a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c8a4:	b16d      	cbz	r5, 800c8c2 <__sfp+0x46>
 800c8a6:	3468      	adds	r4, #104	; 0x68
 800c8a8:	e7f4      	b.n	800c894 <__sfp+0x18>
 800c8aa:	2104      	movs	r1, #4
 800c8ac:	4638      	mov	r0, r7
 800c8ae:	f7ff ff9f 	bl	800c7f0 <__sfmoreglue>
 800c8b2:	6030      	str	r0, [r6, #0]
 800c8b4:	2800      	cmp	r0, #0
 800c8b6:	d1f1      	bne.n	800c89c <__sfp+0x20>
 800c8b8:	230c      	movs	r3, #12
 800c8ba:	603b      	str	r3, [r7, #0]
 800c8bc:	4604      	mov	r4, r0
 800c8be:	4620      	mov	r0, r4
 800c8c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8c2:	4b0b      	ldr	r3, [pc, #44]	; (800c8f0 <__sfp+0x74>)
 800c8c4:	6665      	str	r5, [r4, #100]	; 0x64
 800c8c6:	e9c4 5500 	strd	r5, r5, [r4]
 800c8ca:	60a5      	str	r5, [r4, #8]
 800c8cc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c8d0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c8d4:	2208      	movs	r2, #8
 800c8d6:	4629      	mov	r1, r5
 800c8d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c8dc:	f000 f84c 	bl	800c978 <memset>
 800c8e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c8e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c8e8:	e7e9      	b.n	800c8be <__sfp+0x42>
 800c8ea:	bf00      	nop
 800c8ec:	08011d1c 	.word	0x08011d1c
 800c8f0:	ffff0001 	.word	0xffff0001

0800c8f4 <_fwalk_reent>:
 800c8f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8f8:	4680      	mov	r8, r0
 800c8fa:	4689      	mov	r9, r1
 800c8fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c900:	2600      	movs	r6, #0
 800c902:	b914      	cbnz	r4, 800c90a <_fwalk_reent+0x16>
 800c904:	4630      	mov	r0, r6
 800c906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c90a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800c90e:	3f01      	subs	r7, #1
 800c910:	d501      	bpl.n	800c916 <_fwalk_reent+0x22>
 800c912:	6824      	ldr	r4, [r4, #0]
 800c914:	e7f5      	b.n	800c902 <_fwalk_reent+0xe>
 800c916:	89ab      	ldrh	r3, [r5, #12]
 800c918:	2b01      	cmp	r3, #1
 800c91a:	d907      	bls.n	800c92c <_fwalk_reent+0x38>
 800c91c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c920:	3301      	adds	r3, #1
 800c922:	d003      	beq.n	800c92c <_fwalk_reent+0x38>
 800c924:	4629      	mov	r1, r5
 800c926:	4640      	mov	r0, r8
 800c928:	47c8      	blx	r9
 800c92a:	4306      	orrs	r6, r0
 800c92c:	3568      	adds	r5, #104	; 0x68
 800c92e:	e7ee      	b.n	800c90e <_fwalk_reent+0x1a>

0800c930 <__libc_init_array>:
 800c930:	b570      	push	{r4, r5, r6, lr}
 800c932:	4e0d      	ldr	r6, [pc, #52]	; (800c968 <__libc_init_array+0x38>)
 800c934:	4c0d      	ldr	r4, [pc, #52]	; (800c96c <__libc_init_array+0x3c>)
 800c936:	1ba4      	subs	r4, r4, r6
 800c938:	10a4      	asrs	r4, r4, #2
 800c93a:	2500      	movs	r5, #0
 800c93c:	42a5      	cmp	r5, r4
 800c93e:	d109      	bne.n	800c954 <__libc_init_array+0x24>
 800c940:	4e0b      	ldr	r6, [pc, #44]	; (800c970 <__libc_init_array+0x40>)
 800c942:	4c0c      	ldr	r4, [pc, #48]	; (800c974 <__libc_init_array+0x44>)
 800c944:	f004 ff9a 	bl	801187c <_init>
 800c948:	1ba4      	subs	r4, r4, r6
 800c94a:	10a4      	asrs	r4, r4, #2
 800c94c:	2500      	movs	r5, #0
 800c94e:	42a5      	cmp	r5, r4
 800c950:	d105      	bne.n	800c95e <__libc_init_array+0x2e>
 800c952:	bd70      	pop	{r4, r5, r6, pc}
 800c954:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c958:	4798      	blx	r3
 800c95a:	3501      	adds	r5, #1
 800c95c:	e7ee      	b.n	800c93c <__libc_init_array+0xc>
 800c95e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c962:	4798      	blx	r3
 800c964:	3501      	adds	r5, #1
 800c966:	e7f2      	b.n	800c94e <__libc_init_array+0x1e>
 800c968:	080121f0 	.word	0x080121f0
 800c96c:	080121f0 	.word	0x080121f0
 800c970:	080121f0 	.word	0x080121f0
 800c974:	080121f4 	.word	0x080121f4

0800c978 <memset>:
 800c978:	4402      	add	r2, r0
 800c97a:	4603      	mov	r3, r0
 800c97c:	4293      	cmp	r3, r2
 800c97e:	d100      	bne.n	800c982 <memset+0xa>
 800c980:	4770      	bx	lr
 800c982:	f803 1b01 	strb.w	r1, [r3], #1
 800c986:	e7f9      	b.n	800c97c <memset+0x4>

0800c988 <_free_r>:
 800c988:	b538      	push	{r3, r4, r5, lr}
 800c98a:	4605      	mov	r5, r0
 800c98c:	2900      	cmp	r1, #0
 800c98e:	d045      	beq.n	800ca1c <_free_r+0x94>
 800c990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c994:	1f0c      	subs	r4, r1, #4
 800c996:	2b00      	cmp	r3, #0
 800c998:	bfb8      	it	lt
 800c99a:	18e4      	addlt	r4, r4, r3
 800c99c:	f003 f8d1 	bl	800fb42 <__malloc_lock>
 800c9a0:	4a1f      	ldr	r2, [pc, #124]	; (800ca20 <_free_r+0x98>)
 800c9a2:	6813      	ldr	r3, [r2, #0]
 800c9a4:	4610      	mov	r0, r2
 800c9a6:	b933      	cbnz	r3, 800c9b6 <_free_r+0x2e>
 800c9a8:	6063      	str	r3, [r4, #4]
 800c9aa:	6014      	str	r4, [r2, #0]
 800c9ac:	4628      	mov	r0, r5
 800c9ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9b2:	f003 b8c7 	b.w	800fb44 <__malloc_unlock>
 800c9b6:	42a3      	cmp	r3, r4
 800c9b8:	d90c      	bls.n	800c9d4 <_free_r+0x4c>
 800c9ba:	6821      	ldr	r1, [r4, #0]
 800c9bc:	1862      	adds	r2, r4, r1
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	bf04      	itt	eq
 800c9c2:	681a      	ldreq	r2, [r3, #0]
 800c9c4:	685b      	ldreq	r3, [r3, #4]
 800c9c6:	6063      	str	r3, [r4, #4]
 800c9c8:	bf04      	itt	eq
 800c9ca:	1852      	addeq	r2, r2, r1
 800c9cc:	6022      	streq	r2, [r4, #0]
 800c9ce:	6004      	str	r4, [r0, #0]
 800c9d0:	e7ec      	b.n	800c9ac <_free_r+0x24>
 800c9d2:	4613      	mov	r3, r2
 800c9d4:	685a      	ldr	r2, [r3, #4]
 800c9d6:	b10a      	cbz	r2, 800c9dc <_free_r+0x54>
 800c9d8:	42a2      	cmp	r2, r4
 800c9da:	d9fa      	bls.n	800c9d2 <_free_r+0x4a>
 800c9dc:	6819      	ldr	r1, [r3, #0]
 800c9de:	1858      	adds	r0, r3, r1
 800c9e0:	42a0      	cmp	r0, r4
 800c9e2:	d10b      	bne.n	800c9fc <_free_r+0x74>
 800c9e4:	6820      	ldr	r0, [r4, #0]
 800c9e6:	4401      	add	r1, r0
 800c9e8:	1858      	adds	r0, r3, r1
 800c9ea:	4282      	cmp	r2, r0
 800c9ec:	6019      	str	r1, [r3, #0]
 800c9ee:	d1dd      	bne.n	800c9ac <_free_r+0x24>
 800c9f0:	6810      	ldr	r0, [r2, #0]
 800c9f2:	6852      	ldr	r2, [r2, #4]
 800c9f4:	605a      	str	r2, [r3, #4]
 800c9f6:	4401      	add	r1, r0
 800c9f8:	6019      	str	r1, [r3, #0]
 800c9fa:	e7d7      	b.n	800c9ac <_free_r+0x24>
 800c9fc:	d902      	bls.n	800ca04 <_free_r+0x7c>
 800c9fe:	230c      	movs	r3, #12
 800ca00:	602b      	str	r3, [r5, #0]
 800ca02:	e7d3      	b.n	800c9ac <_free_r+0x24>
 800ca04:	6820      	ldr	r0, [r4, #0]
 800ca06:	1821      	adds	r1, r4, r0
 800ca08:	428a      	cmp	r2, r1
 800ca0a:	bf04      	itt	eq
 800ca0c:	6811      	ldreq	r1, [r2, #0]
 800ca0e:	6852      	ldreq	r2, [r2, #4]
 800ca10:	6062      	str	r2, [r4, #4]
 800ca12:	bf04      	itt	eq
 800ca14:	1809      	addeq	r1, r1, r0
 800ca16:	6021      	streq	r1, [r4, #0]
 800ca18:	605c      	str	r4, [r3, #4]
 800ca1a:	e7c7      	b.n	800c9ac <_free_r+0x24>
 800ca1c:	bd38      	pop	{r3, r4, r5, pc}
 800ca1e:	bf00      	nop
 800ca20:	240052e4 	.word	0x240052e4

0800ca24 <_malloc_r>:
 800ca24:	b570      	push	{r4, r5, r6, lr}
 800ca26:	1ccd      	adds	r5, r1, #3
 800ca28:	f025 0503 	bic.w	r5, r5, #3
 800ca2c:	3508      	adds	r5, #8
 800ca2e:	2d0c      	cmp	r5, #12
 800ca30:	bf38      	it	cc
 800ca32:	250c      	movcc	r5, #12
 800ca34:	2d00      	cmp	r5, #0
 800ca36:	4606      	mov	r6, r0
 800ca38:	db01      	blt.n	800ca3e <_malloc_r+0x1a>
 800ca3a:	42a9      	cmp	r1, r5
 800ca3c:	d903      	bls.n	800ca46 <_malloc_r+0x22>
 800ca3e:	230c      	movs	r3, #12
 800ca40:	6033      	str	r3, [r6, #0]
 800ca42:	2000      	movs	r0, #0
 800ca44:	bd70      	pop	{r4, r5, r6, pc}
 800ca46:	f003 f87c 	bl	800fb42 <__malloc_lock>
 800ca4a:	4a21      	ldr	r2, [pc, #132]	; (800cad0 <_malloc_r+0xac>)
 800ca4c:	6814      	ldr	r4, [r2, #0]
 800ca4e:	4621      	mov	r1, r4
 800ca50:	b991      	cbnz	r1, 800ca78 <_malloc_r+0x54>
 800ca52:	4c20      	ldr	r4, [pc, #128]	; (800cad4 <_malloc_r+0xb0>)
 800ca54:	6823      	ldr	r3, [r4, #0]
 800ca56:	b91b      	cbnz	r3, 800ca60 <_malloc_r+0x3c>
 800ca58:	4630      	mov	r0, r6
 800ca5a:	f000 fecd 	bl	800d7f8 <_sbrk_r>
 800ca5e:	6020      	str	r0, [r4, #0]
 800ca60:	4629      	mov	r1, r5
 800ca62:	4630      	mov	r0, r6
 800ca64:	f000 fec8 	bl	800d7f8 <_sbrk_r>
 800ca68:	1c43      	adds	r3, r0, #1
 800ca6a:	d124      	bne.n	800cab6 <_malloc_r+0x92>
 800ca6c:	230c      	movs	r3, #12
 800ca6e:	6033      	str	r3, [r6, #0]
 800ca70:	4630      	mov	r0, r6
 800ca72:	f003 f867 	bl	800fb44 <__malloc_unlock>
 800ca76:	e7e4      	b.n	800ca42 <_malloc_r+0x1e>
 800ca78:	680b      	ldr	r3, [r1, #0]
 800ca7a:	1b5b      	subs	r3, r3, r5
 800ca7c:	d418      	bmi.n	800cab0 <_malloc_r+0x8c>
 800ca7e:	2b0b      	cmp	r3, #11
 800ca80:	d90f      	bls.n	800caa2 <_malloc_r+0x7e>
 800ca82:	600b      	str	r3, [r1, #0]
 800ca84:	50cd      	str	r5, [r1, r3]
 800ca86:	18cc      	adds	r4, r1, r3
 800ca88:	4630      	mov	r0, r6
 800ca8a:	f003 f85b 	bl	800fb44 <__malloc_unlock>
 800ca8e:	f104 000b 	add.w	r0, r4, #11
 800ca92:	1d23      	adds	r3, r4, #4
 800ca94:	f020 0007 	bic.w	r0, r0, #7
 800ca98:	1ac3      	subs	r3, r0, r3
 800ca9a:	d0d3      	beq.n	800ca44 <_malloc_r+0x20>
 800ca9c:	425a      	negs	r2, r3
 800ca9e:	50e2      	str	r2, [r4, r3]
 800caa0:	e7d0      	b.n	800ca44 <_malloc_r+0x20>
 800caa2:	428c      	cmp	r4, r1
 800caa4:	684b      	ldr	r3, [r1, #4]
 800caa6:	bf16      	itet	ne
 800caa8:	6063      	strne	r3, [r4, #4]
 800caaa:	6013      	streq	r3, [r2, #0]
 800caac:	460c      	movne	r4, r1
 800caae:	e7eb      	b.n	800ca88 <_malloc_r+0x64>
 800cab0:	460c      	mov	r4, r1
 800cab2:	6849      	ldr	r1, [r1, #4]
 800cab4:	e7cc      	b.n	800ca50 <_malloc_r+0x2c>
 800cab6:	1cc4      	adds	r4, r0, #3
 800cab8:	f024 0403 	bic.w	r4, r4, #3
 800cabc:	42a0      	cmp	r0, r4
 800cabe:	d005      	beq.n	800cacc <_malloc_r+0xa8>
 800cac0:	1a21      	subs	r1, r4, r0
 800cac2:	4630      	mov	r0, r6
 800cac4:	f000 fe98 	bl	800d7f8 <_sbrk_r>
 800cac8:	3001      	adds	r0, #1
 800caca:	d0cf      	beq.n	800ca6c <_malloc_r+0x48>
 800cacc:	6025      	str	r5, [r4, #0]
 800cace:	e7db      	b.n	800ca88 <_malloc_r+0x64>
 800cad0:	240052e4 	.word	0x240052e4
 800cad4:	240052e8 	.word	0x240052e8

0800cad8 <__cvt>:
 800cad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cada:	ed2d 8b02 	vpush	{d8}
 800cade:	eeb0 8b40 	vmov.f64	d8, d0
 800cae2:	b085      	sub	sp, #20
 800cae4:	4617      	mov	r7, r2
 800cae6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800cae8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800caea:	ee18 2a90 	vmov	r2, s17
 800caee:	f025 0520 	bic.w	r5, r5, #32
 800caf2:	2a00      	cmp	r2, #0
 800caf4:	bfb6      	itet	lt
 800caf6:	222d      	movlt	r2, #45	; 0x2d
 800caf8:	2200      	movge	r2, #0
 800cafa:	eeb1 8b40 	vneglt.f64	d8, d0
 800cafe:	2d46      	cmp	r5, #70	; 0x46
 800cb00:	460c      	mov	r4, r1
 800cb02:	701a      	strb	r2, [r3, #0]
 800cb04:	d004      	beq.n	800cb10 <__cvt+0x38>
 800cb06:	2d45      	cmp	r5, #69	; 0x45
 800cb08:	d100      	bne.n	800cb0c <__cvt+0x34>
 800cb0a:	3401      	adds	r4, #1
 800cb0c:	2102      	movs	r1, #2
 800cb0e:	e000      	b.n	800cb12 <__cvt+0x3a>
 800cb10:	2103      	movs	r1, #3
 800cb12:	ab03      	add	r3, sp, #12
 800cb14:	9301      	str	r3, [sp, #4]
 800cb16:	ab02      	add	r3, sp, #8
 800cb18:	9300      	str	r3, [sp, #0]
 800cb1a:	4622      	mov	r2, r4
 800cb1c:	4633      	mov	r3, r6
 800cb1e:	eeb0 0b48 	vmov.f64	d0, d8
 800cb22:	f001 feed 	bl	800e900 <_dtoa_r>
 800cb26:	2d47      	cmp	r5, #71	; 0x47
 800cb28:	d101      	bne.n	800cb2e <__cvt+0x56>
 800cb2a:	07fb      	lsls	r3, r7, #31
 800cb2c:	d51e      	bpl.n	800cb6c <__cvt+0x94>
 800cb2e:	2d46      	cmp	r5, #70	; 0x46
 800cb30:	eb00 0304 	add.w	r3, r0, r4
 800cb34:	d10c      	bne.n	800cb50 <__cvt+0x78>
 800cb36:	7802      	ldrb	r2, [r0, #0]
 800cb38:	2a30      	cmp	r2, #48	; 0x30
 800cb3a:	d107      	bne.n	800cb4c <__cvt+0x74>
 800cb3c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cb40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb44:	bf1c      	itt	ne
 800cb46:	f1c4 0401 	rsbne	r4, r4, #1
 800cb4a:	6034      	strne	r4, [r6, #0]
 800cb4c:	6832      	ldr	r2, [r6, #0]
 800cb4e:	4413      	add	r3, r2
 800cb50:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cb54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb58:	d007      	beq.n	800cb6a <__cvt+0x92>
 800cb5a:	2130      	movs	r1, #48	; 0x30
 800cb5c:	9a03      	ldr	r2, [sp, #12]
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d204      	bcs.n	800cb6c <__cvt+0x94>
 800cb62:	1c54      	adds	r4, r2, #1
 800cb64:	9403      	str	r4, [sp, #12]
 800cb66:	7011      	strb	r1, [r2, #0]
 800cb68:	e7f8      	b.n	800cb5c <__cvt+0x84>
 800cb6a:	9303      	str	r3, [sp, #12]
 800cb6c:	9b03      	ldr	r3, [sp, #12]
 800cb6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb70:	1a1b      	subs	r3, r3, r0
 800cb72:	6013      	str	r3, [r2, #0]
 800cb74:	b005      	add	sp, #20
 800cb76:	ecbd 8b02 	vpop	{d8}
 800cb7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cb7c <__exponent>:
 800cb7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb7e:	2900      	cmp	r1, #0
 800cb80:	4604      	mov	r4, r0
 800cb82:	bfba      	itte	lt
 800cb84:	4249      	neglt	r1, r1
 800cb86:	232d      	movlt	r3, #45	; 0x2d
 800cb88:	232b      	movge	r3, #43	; 0x2b
 800cb8a:	2909      	cmp	r1, #9
 800cb8c:	f804 2b02 	strb.w	r2, [r4], #2
 800cb90:	7043      	strb	r3, [r0, #1]
 800cb92:	dd20      	ble.n	800cbd6 <__exponent+0x5a>
 800cb94:	f10d 0307 	add.w	r3, sp, #7
 800cb98:	461f      	mov	r7, r3
 800cb9a:	260a      	movs	r6, #10
 800cb9c:	fb91 f5f6 	sdiv	r5, r1, r6
 800cba0:	fb06 1115 	mls	r1, r6, r5, r1
 800cba4:	3130      	adds	r1, #48	; 0x30
 800cba6:	2d09      	cmp	r5, #9
 800cba8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cbac:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800cbb0:	4629      	mov	r1, r5
 800cbb2:	dc09      	bgt.n	800cbc8 <__exponent+0x4c>
 800cbb4:	3130      	adds	r1, #48	; 0x30
 800cbb6:	3b02      	subs	r3, #2
 800cbb8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800cbbc:	42bb      	cmp	r3, r7
 800cbbe:	4622      	mov	r2, r4
 800cbc0:	d304      	bcc.n	800cbcc <__exponent+0x50>
 800cbc2:	1a10      	subs	r0, r2, r0
 800cbc4:	b003      	add	sp, #12
 800cbc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbc8:	4613      	mov	r3, r2
 800cbca:	e7e7      	b.n	800cb9c <__exponent+0x20>
 800cbcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbd0:	f804 2b01 	strb.w	r2, [r4], #1
 800cbd4:	e7f2      	b.n	800cbbc <__exponent+0x40>
 800cbd6:	2330      	movs	r3, #48	; 0x30
 800cbd8:	4419      	add	r1, r3
 800cbda:	7083      	strb	r3, [r0, #2]
 800cbdc:	1d02      	adds	r2, r0, #4
 800cbde:	70c1      	strb	r1, [r0, #3]
 800cbe0:	e7ef      	b.n	800cbc2 <__exponent+0x46>
 800cbe2:	0000      	movs	r0, r0
 800cbe4:	0000      	movs	r0, r0
	...

0800cbe8 <_printf_float>:
 800cbe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbec:	b08d      	sub	sp, #52	; 0x34
 800cbee:	460c      	mov	r4, r1
 800cbf0:	4616      	mov	r6, r2
 800cbf2:	461f      	mov	r7, r3
 800cbf4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800cbf8:	4605      	mov	r5, r0
 800cbfa:	f002 fef9 	bl	800f9f0 <_localeconv_r>
 800cbfe:	f8d0 b000 	ldr.w	fp, [r0]
 800cc02:	4658      	mov	r0, fp
 800cc04:	f7f3 fb6c 	bl	80002e0 <strlen>
 800cc08:	2300      	movs	r3, #0
 800cc0a:	930a      	str	r3, [sp, #40]	; 0x28
 800cc0c:	f8d8 3000 	ldr.w	r3, [r8]
 800cc10:	9005      	str	r0, [sp, #20]
 800cc12:	3307      	adds	r3, #7
 800cc14:	f023 0307 	bic.w	r3, r3, #7
 800cc18:	f103 0108 	add.w	r1, r3, #8
 800cc1c:	f894 9018 	ldrb.w	r9, [r4, #24]
 800cc20:	6822      	ldr	r2, [r4, #0]
 800cc22:	f8c8 1000 	str.w	r1, [r8]
 800cc26:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cc2a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800cc2e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800ceb8 <_printf_float+0x2d0>
 800cc32:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800cc36:	eeb0 6bc0 	vabs.f64	d6, d0
 800cc3a:	eeb4 6b47 	vcmp.f64	d6, d7
 800cc3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc42:	dd24      	ble.n	800cc8e <_printf_float+0xa6>
 800cc44:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cc48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc4c:	d502      	bpl.n	800cc54 <_printf_float+0x6c>
 800cc4e:	232d      	movs	r3, #45	; 0x2d
 800cc50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc54:	499a      	ldr	r1, [pc, #616]	; (800cec0 <_printf_float+0x2d8>)
 800cc56:	4b9b      	ldr	r3, [pc, #620]	; (800cec4 <_printf_float+0x2dc>)
 800cc58:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800cc5c:	bf8c      	ite	hi
 800cc5e:	4688      	movhi	r8, r1
 800cc60:	4698      	movls	r8, r3
 800cc62:	f022 0204 	bic.w	r2, r2, #4
 800cc66:	2303      	movs	r3, #3
 800cc68:	6123      	str	r3, [r4, #16]
 800cc6a:	6022      	str	r2, [r4, #0]
 800cc6c:	f04f 0a00 	mov.w	sl, #0
 800cc70:	9700      	str	r7, [sp, #0]
 800cc72:	4633      	mov	r3, r6
 800cc74:	aa0b      	add	r2, sp, #44	; 0x2c
 800cc76:	4621      	mov	r1, r4
 800cc78:	4628      	mov	r0, r5
 800cc7a:	f000 f9e1 	bl	800d040 <_printf_common>
 800cc7e:	3001      	adds	r0, #1
 800cc80:	f040 8089 	bne.w	800cd96 <_printf_float+0x1ae>
 800cc84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc88:	b00d      	add	sp, #52	; 0x34
 800cc8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc8e:	eeb4 0b40 	vcmp.f64	d0, d0
 800cc92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc96:	d702      	bvc.n	800cc9e <_printf_float+0xb6>
 800cc98:	498b      	ldr	r1, [pc, #556]	; (800cec8 <_printf_float+0x2e0>)
 800cc9a:	4b8c      	ldr	r3, [pc, #560]	; (800cecc <_printf_float+0x2e4>)
 800cc9c:	e7dc      	b.n	800cc58 <_printf_float+0x70>
 800cc9e:	6861      	ldr	r1, [r4, #4]
 800cca0:	1c4b      	adds	r3, r1, #1
 800cca2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cca6:	ab0a      	add	r3, sp, #40	; 0x28
 800cca8:	a809      	add	r0, sp, #36	; 0x24
 800ccaa:	d13b      	bne.n	800cd24 <_printf_float+0x13c>
 800ccac:	2106      	movs	r1, #6
 800ccae:	6061      	str	r1, [r4, #4]
 800ccb0:	f04f 0c00 	mov.w	ip, #0
 800ccb4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800ccb8:	e9cd 0900 	strd	r0, r9, [sp]
 800ccbc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ccc0:	6022      	str	r2, [r4, #0]
 800ccc2:	6861      	ldr	r1, [r4, #4]
 800ccc4:	4628      	mov	r0, r5
 800ccc6:	f7ff ff07 	bl	800cad8 <__cvt>
 800ccca:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800ccce:	2b47      	cmp	r3, #71	; 0x47
 800ccd0:	4680      	mov	r8, r0
 800ccd2:	d109      	bne.n	800cce8 <_printf_float+0x100>
 800ccd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccd6:	1cd8      	adds	r0, r3, #3
 800ccd8:	db02      	blt.n	800cce0 <_printf_float+0xf8>
 800ccda:	6862      	ldr	r2, [r4, #4]
 800ccdc:	4293      	cmp	r3, r2
 800ccde:	dd47      	ble.n	800cd70 <_printf_float+0x188>
 800cce0:	f1a9 0902 	sub.w	r9, r9, #2
 800cce4:	fa5f f989 	uxtb.w	r9, r9
 800cce8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ccec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ccee:	d824      	bhi.n	800cd3a <_printf_float+0x152>
 800ccf0:	3901      	subs	r1, #1
 800ccf2:	464a      	mov	r2, r9
 800ccf4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ccf8:	9109      	str	r1, [sp, #36]	; 0x24
 800ccfa:	f7ff ff3f 	bl	800cb7c <__exponent>
 800ccfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd00:	1813      	adds	r3, r2, r0
 800cd02:	2a01      	cmp	r2, #1
 800cd04:	4682      	mov	sl, r0
 800cd06:	6123      	str	r3, [r4, #16]
 800cd08:	dc02      	bgt.n	800cd10 <_printf_float+0x128>
 800cd0a:	6822      	ldr	r2, [r4, #0]
 800cd0c:	07d1      	lsls	r1, r2, #31
 800cd0e:	d501      	bpl.n	800cd14 <_printf_float+0x12c>
 800cd10:	3301      	adds	r3, #1
 800cd12:	6123      	str	r3, [r4, #16]
 800cd14:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d0a9      	beq.n	800cc70 <_printf_float+0x88>
 800cd1c:	232d      	movs	r3, #45	; 0x2d
 800cd1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd22:	e7a5      	b.n	800cc70 <_printf_float+0x88>
 800cd24:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800cd28:	f000 8178 	beq.w	800d01c <_printf_float+0x434>
 800cd2c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800cd30:	d1be      	bne.n	800ccb0 <_printf_float+0xc8>
 800cd32:	2900      	cmp	r1, #0
 800cd34:	d1bc      	bne.n	800ccb0 <_printf_float+0xc8>
 800cd36:	2101      	movs	r1, #1
 800cd38:	e7b9      	b.n	800ccae <_printf_float+0xc6>
 800cd3a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800cd3e:	d119      	bne.n	800cd74 <_printf_float+0x18c>
 800cd40:	2900      	cmp	r1, #0
 800cd42:	6863      	ldr	r3, [r4, #4]
 800cd44:	dd0c      	ble.n	800cd60 <_printf_float+0x178>
 800cd46:	6121      	str	r1, [r4, #16]
 800cd48:	b913      	cbnz	r3, 800cd50 <_printf_float+0x168>
 800cd4a:	6822      	ldr	r2, [r4, #0]
 800cd4c:	07d2      	lsls	r2, r2, #31
 800cd4e:	d502      	bpl.n	800cd56 <_printf_float+0x16e>
 800cd50:	3301      	adds	r3, #1
 800cd52:	440b      	add	r3, r1
 800cd54:	6123      	str	r3, [r4, #16]
 800cd56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd58:	65a3      	str	r3, [r4, #88]	; 0x58
 800cd5a:	f04f 0a00 	mov.w	sl, #0
 800cd5e:	e7d9      	b.n	800cd14 <_printf_float+0x12c>
 800cd60:	b913      	cbnz	r3, 800cd68 <_printf_float+0x180>
 800cd62:	6822      	ldr	r2, [r4, #0]
 800cd64:	07d0      	lsls	r0, r2, #31
 800cd66:	d501      	bpl.n	800cd6c <_printf_float+0x184>
 800cd68:	3302      	adds	r3, #2
 800cd6a:	e7f3      	b.n	800cd54 <_printf_float+0x16c>
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	e7f1      	b.n	800cd54 <_printf_float+0x16c>
 800cd70:	f04f 0967 	mov.w	r9, #103	; 0x67
 800cd74:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cd78:	4293      	cmp	r3, r2
 800cd7a:	db05      	blt.n	800cd88 <_printf_float+0x1a0>
 800cd7c:	6822      	ldr	r2, [r4, #0]
 800cd7e:	6123      	str	r3, [r4, #16]
 800cd80:	07d1      	lsls	r1, r2, #31
 800cd82:	d5e8      	bpl.n	800cd56 <_printf_float+0x16e>
 800cd84:	3301      	adds	r3, #1
 800cd86:	e7e5      	b.n	800cd54 <_printf_float+0x16c>
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	bfd4      	ite	le
 800cd8c:	f1c3 0302 	rsble	r3, r3, #2
 800cd90:	2301      	movgt	r3, #1
 800cd92:	4413      	add	r3, r2
 800cd94:	e7de      	b.n	800cd54 <_printf_float+0x16c>
 800cd96:	6823      	ldr	r3, [r4, #0]
 800cd98:	055a      	lsls	r2, r3, #21
 800cd9a:	d407      	bmi.n	800cdac <_printf_float+0x1c4>
 800cd9c:	6923      	ldr	r3, [r4, #16]
 800cd9e:	4642      	mov	r2, r8
 800cda0:	4631      	mov	r1, r6
 800cda2:	4628      	mov	r0, r5
 800cda4:	47b8      	blx	r7
 800cda6:	3001      	adds	r0, #1
 800cda8:	d12a      	bne.n	800ce00 <_printf_float+0x218>
 800cdaa:	e76b      	b.n	800cc84 <_printf_float+0x9c>
 800cdac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cdb0:	f240 80de 	bls.w	800cf70 <_printf_float+0x388>
 800cdb4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cdb8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cdbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdc0:	d133      	bne.n	800ce2a <_printf_float+0x242>
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	4a42      	ldr	r2, [pc, #264]	; (800ced0 <_printf_float+0x2e8>)
 800cdc6:	4631      	mov	r1, r6
 800cdc8:	4628      	mov	r0, r5
 800cdca:	47b8      	blx	r7
 800cdcc:	3001      	adds	r0, #1
 800cdce:	f43f af59 	beq.w	800cc84 <_printf_float+0x9c>
 800cdd2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	db02      	blt.n	800cde0 <_printf_float+0x1f8>
 800cdda:	6823      	ldr	r3, [r4, #0]
 800cddc:	07d8      	lsls	r0, r3, #31
 800cdde:	d50f      	bpl.n	800ce00 <_printf_float+0x218>
 800cde0:	9b05      	ldr	r3, [sp, #20]
 800cde2:	465a      	mov	r2, fp
 800cde4:	4631      	mov	r1, r6
 800cde6:	4628      	mov	r0, r5
 800cde8:	47b8      	blx	r7
 800cdea:	3001      	adds	r0, #1
 800cdec:	f43f af4a 	beq.w	800cc84 <_printf_float+0x9c>
 800cdf0:	f04f 0800 	mov.w	r8, #0
 800cdf4:	f104 091a 	add.w	r9, r4, #26
 800cdf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdfa:	3b01      	subs	r3, #1
 800cdfc:	4543      	cmp	r3, r8
 800cdfe:	dc09      	bgt.n	800ce14 <_printf_float+0x22c>
 800ce00:	6823      	ldr	r3, [r4, #0]
 800ce02:	079b      	lsls	r3, r3, #30
 800ce04:	f100 8105 	bmi.w	800d012 <_printf_float+0x42a>
 800ce08:	68e0      	ldr	r0, [r4, #12]
 800ce0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce0c:	4298      	cmp	r0, r3
 800ce0e:	bfb8      	it	lt
 800ce10:	4618      	movlt	r0, r3
 800ce12:	e739      	b.n	800cc88 <_printf_float+0xa0>
 800ce14:	2301      	movs	r3, #1
 800ce16:	464a      	mov	r2, r9
 800ce18:	4631      	mov	r1, r6
 800ce1a:	4628      	mov	r0, r5
 800ce1c:	47b8      	blx	r7
 800ce1e:	3001      	adds	r0, #1
 800ce20:	f43f af30 	beq.w	800cc84 <_printf_float+0x9c>
 800ce24:	f108 0801 	add.w	r8, r8, #1
 800ce28:	e7e6      	b.n	800cdf8 <_printf_float+0x210>
 800ce2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	dc2b      	bgt.n	800ce88 <_printf_float+0x2a0>
 800ce30:	2301      	movs	r3, #1
 800ce32:	4a27      	ldr	r2, [pc, #156]	; (800ced0 <_printf_float+0x2e8>)
 800ce34:	4631      	mov	r1, r6
 800ce36:	4628      	mov	r0, r5
 800ce38:	47b8      	blx	r7
 800ce3a:	3001      	adds	r0, #1
 800ce3c:	f43f af22 	beq.w	800cc84 <_printf_float+0x9c>
 800ce40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce42:	b923      	cbnz	r3, 800ce4e <_printf_float+0x266>
 800ce44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce46:	b913      	cbnz	r3, 800ce4e <_printf_float+0x266>
 800ce48:	6823      	ldr	r3, [r4, #0]
 800ce4a:	07d9      	lsls	r1, r3, #31
 800ce4c:	d5d8      	bpl.n	800ce00 <_printf_float+0x218>
 800ce4e:	9b05      	ldr	r3, [sp, #20]
 800ce50:	465a      	mov	r2, fp
 800ce52:	4631      	mov	r1, r6
 800ce54:	4628      	mov	r0, r5
 800ce56:	47b8      	blx	r7
 800ce58:	3001      	adds	r0, #1
 800ce5a:	f43f af13 	beq.w	800cc84 <_printf_float+0x9c>
 800ce5e:	f04f 0900 	mov.w	r9, #0
 800ce62:	f104 0a1a 	add.w	sl, r4, #26
 800ce66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce68:	425b      	negs	r3, r3
 800ce6a:	454b      	cmp	r3, r9
 800ce6c:	dc01      	bgt.n	800ce72 <_printf_float+0x28a>
 800ce6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce70:	e795      	b.n	800cd9e <_printf_float+0x1b6>
 800ce72:	2301      	movs	r3, #1
 800ce74:	4652      	mov	r2, sl
 800ce76:	4631      	mov	r1, r6
 800ce78:	4628      	mov	r0, r5
 800ce7a:	47b8      	blx	r7
 800ce7c:	3001      	adds	r0, #1
 800ce7e:	f43f af01 	beq.w	800cc84 <_printf_float+0x9c>
 800ce82:	f109 0901 	add.w	r9, r9, #1
 800ce86:	e7ee      	b.n	800ce66 <_printf_float+0x27e>
 800ce88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	bfa8      	it	ge
 800ce90:	461a      	movge	r2, r3
 800ce92:	2a00      	cmp	r2, #0
 800ce94:	4691      	mov	r9, r2
 800ce96:	dd07      	ble.n	800cea8 <_printf_float+0x2c0>
 800ce98:	4613      	mov	r3, r2
 800ce9a:	4631      	mov	r1, r6
 800ce9c:	4642      	mov	r2, r8
 800ce9e:	4628      	mov	r0, r5
 800cea0:	47b8      	blx	r7
 800cea2:	3001      	adds	r0, #1
 800cea4:	f43f aeee 	beq.w	800cc84 <_printf_float+0x9c>
 800cea8:	f104 031a 	add.w	r3, r4, #26
 800ceac:	f04f 0a00 	mov.w	sl, #0
 800ceb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ceb4:	9307      	str	r3, [sp, #28]
 800ceb6:	e017      	b.n	800cee8 <_printf_float+0x300>
 800ceb8:	ffffffff 	.word	0xffffffff
 800cebc:	7fefffff 	.word	0x7fefffff
 800cec0:	08011d24 	.word	0x08011d24
 800cec4:	08011d20 	.word	0x08011d20
 800cec8:	08011d2c 	.word	0x08011d2c
 800cecc:	08011d28 	.word	0x08011d28
 800ced0:	08011d30 	.word	0x08011d30
 800ced4:	2301      	movs	r3, #1
 800ced6:	9a07      	ldr	r2, [sp, #28]
 800ced8:	4631      	mov	r1, r6
 800ceda:	4628      	mov	r0, r5
 800cedc:	47b8      	blx	r7
 800cede:	3001      	adds	r0, #1
 800cee0:	f43f aed0 	beq.w	800cc84 <_printf_float+0x9c>
 800cee4:	f10a 0a01 	add.w	sl, sl, #1
 800cee8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ceea:	9306      	str	r3, [sp, #24]
 800ceec:	eba3 0309 	sub.w	r3, r3, r9
 800cef0:	4553      	cmp	r3, sl
 800cef2:	dcef      	bgt.n	800ced4 <_printf_float+0x2ec>
 800cef4:	9b06      	ldr	r3, [sp, #24]
 800cef6:	4498      	add	r8, r3
 800cef8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cefc:	429a      	cmp	r2, r3
 800cefe:	db15      	blt.n	800cf2c <_printf_float+0x344>
 800cf00:	6823      	ldr	r3, [r4, #0]
 800cf02:	07da      	lsls	r2, r3, #31
 800cf04:	d412      	bmi.n	800cf2c <_printf_float+0x344>
 800cf06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf08:	9a06      	ldr	r2, [sp, #24]
 800cf0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cf0c:	1a9a      	subs	r2, r3, r2
 800cf0e:	eba3 0a01 	sub.w	sl, r3, r1
 800cf12:	4592      	cmp	sl, r2
 800cf14:	bfa8      	it	ge
 800cf16:	4692      	movge	sl, r2
 800cf18:	f1ba 0f00 	cmp.w	sl, #0
 800cf1c:	dc0e      	bgt.n	800cf3c <_printf_float+0x354>
 800cf1e:	f04f 0800 	mov.w	r8, #0
 800cf22:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf26:	f104 091a 	add.w	r9, r4, #26
 800cf2a:	e019      	b.n	800cf60 <_printf_float+0x378>
 800cf2c:	9b05      	ldr	r3, [sp, #20]
 800cf2e:	465a      	mov	r2, fp
 800cf30:	4631      	mov	r1, r6
 800cf32:	4628      	mov	r0, r5
 800cf34:	47b8      	blx	r7
 800cf36:	3001      	adds	r0, #1
 800cf38:	d1e5      	bne.n	800cf06 <_printf_float+0x31e>
 800cf3a:	e6a3      	b.n	800cc84 <_printf_float+0x9c>
 800cf3c:	4653      	mov	r3, sl
 800cf3e:	4642      	mov	r2, r8
 800cf40:	4631      	mov	r1, r6
 800cf42:	4628      	mov	r0, r5
 800cf44:	47b8      	blx	r7
 800cf46:	3001      	adds	r0, #1
 800cf48:	d1e9      	bne.n	800cf1e <_printf_float+0x336>
 800cf4a:	e69b      	b.n	800cc84 <_printf_float+0x9c>
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	464a      	mov	r2, r9
 800cf50:	4631      	mov	r1, r6
 800cf52:	4628      	mov	r0, r5
 800cf54:	47b8      	blx	r7
 800cf56:	3001      	adds	r0, #1
 800cf58:	f43f ae94 	beq.w	800cc84 <_printf_float+0x9c>
 800cf5c:	f108 0801 	add.w	r8, r8, #1
 800cf60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf64:	1a9b      	subs	r3, r3, r2
 800cf66:	eba3 030a 	sub.w	r3, r3, sl
 800cf6a:	4543      	cmp	r3, r8
 800cf6c:	dcee      	bgt.n	800cf4c <_printf_float+0x364>
 800cf6e:	e747      	b.n	800ce00 <_printf_float+0x218>
 800cf70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf72:	2a01      	cmp	r2, #1
 800cf74:	dc01      	bgt.n	800cf7a <_printf_float+0x392>
 800cf76:	07db      	lsls	r3, r3, #31
 800cf78:	d539      	bpl.n	800cfee <_printf_float+0x406>
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	4642      	mov	r2, r8
 800cf7e:	4631      	mov	r1, r6
 800cf80:	4628      	mov	r0, r5
 800cf82:	47b8      	blx	r7
 800cf84:	3001      	adds	r0, #1
 800cf86:	f43f ae7d 	beq.w	800cc84 <_printf_float+0x9c>
 800cf8a:	9b05      	ldr	r3, [sp, #20]
 800cf8c:	465a      	mov	r2, fp
 800cf8e:	4631      	mov	r1, r6
 800cf90:	4628      	mov	r0, r5
 800cf92:	47b8      	blx	r7
 800cf94:	3001      	adds	r0, #1
 800cf96:	f108 0801 	add.w	r8, r8, #1
 800cf9a:	f43f ae73 	beq.w	800cc84 <_printf_float+0x9c>
 800cf9e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cfa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfa4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cfa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfac:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800cfb0:	d018      	beq.n	800cfe4 <_printf_float+0x3fc>
 800cfb2:	4642      	mov	r2, r8
 800cfb4:	4631      	mov	r1, r6
 800cfb6:	4628      	mov	r0, r5
 800cfb8:	47b8      	blx	r7
 800cfba:	3001      	adds	r0, #1
 800cfbc:	d10e      	bne.n	800cfdc <_printf_float+0x3f4>
 800cfbe:	e661      	b.n	800cc84 <_printf_float+0x9c>
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	464a      	mov	r2, r9
 800cfc4:	4631      	mov	r1, r6
 800cfc6:	4628      	mov	r0, r5
 800cfc8:	47b8      	blx	r7
 800cfca:	3001      	adds	r0, #1
 800cfcc:	f43f ae5a 	beq.w	800cc84 <_printf_float+0x9c>
 800cfd0:	f108 0801 	add.w	r8, r8, #1
 800cfd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfd6:	3b01      	subs	r3, #1
 800cfd8:	4543      	cmp	r3, r8
 800cfda:	dcf1      	bgt.n	800cfc0 <_printf_float+0x3d8>
 800cfdc:	4653      	mov	r3, sl
 800cfde:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cfe2:	e6dd      	b.n	800cda0 <_printf_float+0x1b8>
 800cfe4:	f04f 0800 	mov.w	r8, #0
 800cfe8:	f104 091a 	add.w	r9, r4, #26
 800cfec:	e7f2      	b.n	800cfd4 <_printf_float+0x3ec>
 800cfee:	2301      	movs	r3, #1
 800cff0:	e7df      	b.n	800cfb2 <_printf_float+0x3ca>
 800cff2:	2301      	movs	r3, #1
 800cff4:	464a      	mov	r2, r9
 800cff6:	4631      	mov	r1, r6
 800cff8:	4628      	mov	r0, r5
 800cffa:	47b8      	blx	r7
 800cffc:	3001      	adds	r0, #1
 800cffe:	f43f ae41 	beq.w	800cc84 <_printf_float+0x9c>
 800d002:	f108 0801 	add.w	r8, r8, #1
 800d006:	68e3      	ldr	r3, [r4, #12]
 800d008:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d00a:	1a9b      	subs	r3, r3, r2
 800d00c:	4543      	cmp	r3, r8
 800d00e:	dcf0      	bgt.n	800cff2 <_printf_float+0x40a>
 800d010:	e6fa      	b.n	800ce08 <_printf_float+0x220>
 800d012:	f04f 0800 	mov.w	r8, #0
 800d016:	f104 0919 	add.w	r9, r4, #25
 800d01a:	e7f4      	b.n	800d006 <_printf_float+0x41e>
 800d01c:	2900      	cmp	r1, #0
 800d01e:	f43f ae8a 	beq.w	800cd36 <_printf_float+0x14e>
 800d022:	f04f 0c00 	mov.w	ip, #0
 800d026:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800d02a:	e9cd 0900 	strd	r0, r9, [sp]
 800d02e:	6022      	str	r2, [r4, #0]
 800d030:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d034:	4628      	mov	r0, r5
 800d036:	f7ff fd4f 	bl	800cad8 <__cvt>
 800d03a:	4680      	mov	r8, r0
 800d03c:	e64a      	b.n	800ccd4 <_printf_float+0xec>
 800d03e:	bf00      	nop

0800d040 <_printf_common>:
 800d040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d044:	4691      	mov	r9, r2
 800d046:	461f      	mov	r7, r3
 800d048:	688a      	ldr	r2, [r1, #8]
 800d04a:	690b      	ldr	r3, [r1, #16]
 800d04c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d050:	4293      	cmp	r3, r2
 800d052:	bfb8      	it	lt
 800d054:	4613      	movlt	r3, r2
 800d056:	f8c9 3000 	str.w	r3, [r9]
 800d05a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d05e:	4606      	mov	r6, r0
 800d060:	460c      	mov	r4, r1
 800d062:	b112      	cbz	r2, 800d06a <_printf_common+0x2a>
 800d064:	3301      	adds	r3, #1
 800d066:	f8c9 3000 	str.w	r3, [r9]
 800d06a:	6823      	ldr	r3, [r4, #0]
 800d06c:	0699      	lsls	r1, r3, #26
 800d06e:	bf42      	ittt	mi
 800d070:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d074:	3302      	addmi	r3, #2
 800d076:	f8c9 3000 	strmi.w	r3, [r9]
 800d07a:	6825      	ldr	r5, [r4, #0]
 800d07c:	f015 0506 	ands.w	r5, r5, #6
 800d080:	d107      	bne.n	800d092 <_printf_common+0x52>
 800d082:	f104 0a19 	add.w	sl, r4, #25
 800d086:	68e3      	ldr	r3, [r4, #12]
 800d088:	f8d9 2000 	ldr.w	r2, [r9]
 800d08c:	1a9b      	subs	r3, r3, r2
 800d08e:	42ab      	cmp	r3, r5
 800d090:	dc28      	bgt.n	800d0e4 <_printf_common+0xa4>
 800d092:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d096:	6822      	ldr	r2, [r4, #0]
 800d098:	3300      	adds	r3, #0
 800d09a:	bf18      	it	ne
 800d09c:	2301      	movne	r3, #1
 800d09e:	0692      	lsls	r2, r2, #26
 800d0a0:	d42d      	bmi.n	800d0fe <_printf_common+0xbe>
 800d0a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d0a6:	4639      	mov	r1, r7
 800d0a8:	4630      	mov	r0, r6
 800d0aa:	47c0      	blx	r8
 800d0ac:	3001      	adds	r0, #1
 800d0ae:	d020      	beq.n	800d0f2 <_printf_common+0xb2>
 800d0b0:	6823      	ldr	r3, [r4, #0]
 800d0b2:	68e5      	ldr	r5, [r4, #12]
 800d0b4:	f8d9 2000 	ldr.w	r2, [r9]
 800d0b8:	f003 0306 	and.w	r3, r3, #6
 800d0bc:	2b04      	cmp	r3, #4
 800d0be:	bf08      	it	eq
 800d0c0:	1aad      	subeq	r5, r5, r2
 800d0c2:	68a3      	ldr	r3, [r4, #8]
 800d0c4:	6922      	ldr	r2, [r4, #16]
 800d0c6:	bf0c      	ite	eq
 800d0c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d0cc:	2500      	movne	r5, #0
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	bfc4      	itt	gt
 800d0d2:	1a9b      	subgt	r3, r3, r2
 800d0d4:	18ed      	addgt	r5, r5, r3
 800d0d6:	f04f 0900 	mov.w	r9, #0
 800d0da:	341a      	adds	r4, #26
 800d0dc:	454d      	cmp	r5, r9
 800d0de:	d11a      	bne.n	800d116 <_printf_common+0xd6>
 800d0e0:	2000      	movs	r0, #0
 800d0e2:	e008      	b.n	800d0f6 <_printf_common+0xb6>
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	4652      	mov	r2, sl
 800d0e8:	4639      	mov	r1, r7
 800d0ea:	4630      	mov	r0, r6
 800d0ec:	47c0      	blx	r8
 800d0ee:	3001      	adds	r0, #1
 800d0f0:	d103      	bne.n	800d0fa <_printf_common+0xba>
 800d0f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d0f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0fa:	3501      	adds	r5, #1
 800d0fc:	e7c3      	b.n	800d086 <_printf_common+0x46>
 800d0fe:	18e1      	adds	r1, r4, r3
 800d100:	1c5a      	adds	r2, r3, #1
 800d102:	2030      	movs	r0, #48	; 0x30
 800d104:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d108:	4422      	add	r2, r4
 800d10a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d10e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d112:	3302      	adds	r3, #2
 800d114:	e7c5      	b.n	800d0a2 <_printf_common+0x62>
 800d116:	2301      	movs	r3, #1
 800d118:	4622      	mov	r2, r4
 800d11a:	4639      	mov	r1, r7
 800d11c:	4630      	mov	r0, r6
 800d11e:	47c0      	blx	r8
 800d120:	3001      	adds	r0, #1
 800d122:	d0e6      	beq.n	800d0f2 <_printf_common+0xb2>
 800d124:	f109 0901 	add.w	r9, r9, #1
 800d128:	e7d8      	b.n	800d0dc <_printf_common+0x9c>
	...

0800d12c <_printf_i>:
 800d12c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d130:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d134:	460c      	mov	r4, r1
 800d136:	7e09      	ldrb	r1, [r1, #24]
 800d138:	b085      	sub	sp, #20
 800d13a:	296e      	cmp	r1, #110	; 0x6e
 800d13c:	4617      	mov	r7, r2
 800d13e:	4606      	mov	r6, r0
 800d140:	4698      	mov	r8, r3
 800d142:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d144:	f000 80b3 	beq.w	800d2ae <_printf_i+0x182>
 800d148:	d822      	bhi.n	800d190 <_printf_i+0x64>
 800d14a:	2963      	cmp	r1, #99	; 0x63
 800d14c:	d036      	beq.n	800d1bc <_printf_i+0x90>
 800d14e:	d80a      	bhi.n	800d166 <_printf_i+0x3a>
 800d150:	2900      	cmp	r1, #0
 800d152:	f000 80b9 	beq.w	800d2c8 <_printf_i+0x19c>
 800d156:	2958      	cmp	r1, #88	; 0x58
 800d158:	f000 8083 	beq.w	800d262 <_printf_i+0x136>
 800d15c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d160:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d164:	e032      	b.n	800d1cc <_printf_i+0xa0>
 800d166:	2964      	cmp	r1, #100	; 0x64
 800d168:	d001      	beq.n	800d16e <_printf_i+0x42>
 800d16a:	2969      	cmp	r1, #105	; 0x69
 800d16c:	d1f6      	bne.n	800d15c <_printf_i+0x30>
 800d16e:	6820      	ldr	r0, [r4, #0]
 800d170:	6813      	ldr	r3, [r2, #0]
 800d172:	0605      	lsls	r5, r0, #24
 800d174:	f103 0104 	add.w	r1, r3, #4
 800d178:	d52a      	bpl.n	800d1d0 <_printf_i+0xa4>
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	6011      	str	r1, [r2, #0]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	da03      	bge.n	800d18a <_printf_i+0x5e>
 800d182:	222d      	movs	r2, #45	; 0x2d
 800d184:	425b      	negs	r3, r3
 800d186:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d18a:	486f      	ldr	r0, [pc, #444]	; (800d348 <_printf_i+0x21c>)
 800d18c:	220a      	movs	r2, #10
 800d18e:	e039      	b.n	800d204 <_printf_i+0xd8>
 800d190:	2973      	cmp	r1, #115	; 0x73
 800d192:	f000 809d 	beq.w	800d2d0 <_printf_i+0x1a4>
 800d196:	d808      	bhi.n	800d1aa <_printf_i+0x7e>
 800d198:	296f      	cmp	r1, #111	; 0x6f
 800d19a:	d020      	beq.n	800d1de <_printf_i+0xb2>
 800d19c:	2970      	cmp	r1, #112	; 0x70
 800d19e:	d1dd      	bne.n	800d15c <_printf_i+0x30>
 800d1a0:	6823      	ldr	r3, [r4, #0]
 800d1a2:	f043 0320 	orr.w	r3, r3, #32
 800d1a6:	6023      	str	r3, [r4, #0]
 800d1a8:	e003      	b.n	800d1b2 <_printf_i+0x86>
 800d1aa:	2975      	cmp	r1, #117	; 0x75
 800d1ac:	d017      	beq.n	800d1de <_printf_i+0xb2>
 800d1ae:	2978      	cmp	r1, #120	; 0x78
 800d1b0:	d1d4      	bne.n	800d15c <_printf_i+0x30>
 800d1b2:	2378      	movs	r3, #120	; 0x78
 800d1b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d1b8:	4864      	ldr	r0, [pc, #400]	; (800d34c <_printf_i+0x220>)
 800d1ba:	e055      	b.n	800d268 <_printf_i+0x13c>
 800d1bc:	6813      	ldr	r3, [r2, #0]
 800d1be:	1d19      	adds	r1, r3, #4
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	6011      	str	r1, [r2, #0]
 800d1c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d1c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	e08c      	b.n	800d2ea <_printf_i+0x1be>
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	6011      	str	r1, [r2, #0]
 800d1d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d1d8:	bf18      	it	ne
 800d1da:	b21b      	sxthne	r3, r3
 800d1dc:	e7cf      	b.n	800d17e <_printf_i+0x52>
 800d1de:	6813      	ldr	r3, [r2, #0]
 800d1e0:	6825      	ldr	r5, [r4, #0]
 800d1e2:	1d18      	adds	r0, r3, #4
 800d1e4:	6010      	str	r0, [r2, #0]
 800d1e6:	0628      	lsls	r0, r5, #24
 800d1e8:	d501      	bpl.n	800d1ee <_printf_i+0xc2>
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	e002      	b.n	800d1f4 <_printf_i+0xc8>
 800d1ee:	0668      	lsls	r0, r5, #25
 800d1f0:	d5fb      	bpl.n	800d1ea <_printf_i+0xbe>
 800d1f2:	881b      	ldrh	r3, [r3, #0]
 800d1f4:	4854      	ldr	r0, [pc, #336]	; (800d348 <_printf_i+0x21c>)
 800d1f6:	296f      	cmp	r1, #111	; 0x6f
 800d1f8:	bf14      	ite	ne
 800d1fa:	220a      	movne	r2, #10
 800d1fc:	2208      	moveq	r2, #8
 800d1fe:	2100      	movs	r1, #0
 800d200:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d204:	6865      	ldr	r5, [r4, #4]
 800d206:	60a5      	str	r5, [r4, #8]
 800d208:	2d00      	cmp	r5, #0
 800d20a:	f2c0 8095 	blt.w	800d338 <_printf_i+0x20c>
 800d20e:	6821      	ldr	r1, [r4, #0]
 800d210:	f021 0104 	bic.w	r1, r1, #4
 800d214:	6021      	str	r1, [r4, #0]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d13d      	bne.n	800d296 <_printf_i+0x16a>
 800d21a:	2d00      	cmp	r5, #0
 800d21c:	f040 808e 	bne.w	800d33c <_printf_i+0x210>
 800d220:	4665      	mov	r5, ip
 800d222:	2a08      	cmp	r2, #8
 800d224:	d10b      	bne.n	800d23e <_printf_i+0x112>
 800d226:	6823      	ldr	r3, [r4, #0]
 800d228:	07db      	lsls	r3, r3, #31
 800d22a:	d508      	bpl.n	800d23e <_printf_i+0x112>
 800d22c:	6923      	ldr	r3, [r4, #16]
 800d22e:	6862      	ldr	r2, [r4, #4]
 800d230:	429a      	cmp	r2, r3
 800d232:	bfde      	ittt	le
 800d234:	2330      	movle	r3, #48	; 0x30
 800d236:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d23a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d23e:	ebac 0305 	sub.w	r3, ip, r5
 800d242:	6123      	str	r3, [r4, #16]
 800d244:	f8cd 8000 	str.w	r8, [sp]
 800d248:	463b      	mov	r3, r7
 800d24a:	aa03      	add	r2, sp, #12
 800d24c:	4621      	mov	r1, r4
 800d24e:	4630      	mov	r0, r6
 800d250:	f7ff fef6 	bl	800d040 <_printf_common>
 800d254:	3001      	adds	r0, #1
 800d256:	d14d      	bne.n	800d2f4 <_printf_i+0x1c8>
 800d258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d25c:	b005      	add	sp, #20
 800d25e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d262:	4839      	ldr	r0, [pc, #228]	; (800d348 <_printf_i+0x21c>)
 800d264:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d268:	6813      	ldr	r3, [r2, #0]
 800d26a:	6821      	ldr	r1, [r4, #0]
 800d26c:	1d1d      	adds	r5, r3, #4
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	6015      	str	r5, [r2, #0]
 800d272:	060a      	lsls	r2, r1, #24
 800d274:	d50b      	bpl.n	800d28e <_printf_i+0x162>
 800d276:	07ca      	lsls	r2, r1, #31
 800d278:	bf44      	itt	mi
 800d27a:	f041 0120 	orrmi.w	r1, r1, #32
 800d27e:	6021      	strmi	r1, [r4, #0]
 800d280:	b91b      	cbnz	r3, 800d28a <_printf_i+0x15e>
 800d282:	6822      	ldr	r2, [r4, #0]
 800d284:	f022 0220 	bic.w	r2, r2, #32
 800d288:	6022      	str	r2, [r4, #0]
 800d28a:	2210      	movs	r2, #16
 800d28c:	e7b7      	b.n	800d1fe <_printf_i+0xd2>
 800d28e:	064d      	lsls	r5, r1, #25
 800d290:	bf48      	it	mi
 800d292:	b29b      	uxthmi	r3, r3
 800d294:	e7ef      	b.n	800d276 <_printf_i+0x14a>
 800d296:	4665      	mov	r5, ip
 800d298:	fbb3 f1f2 	udiv	r1, r3, r2
 800d29c:	fb02 3311 	mls	r3, r2, r1, r3
 800d2a0:	5cc3      	ldrb	r3, [r0, r3]
 800d2a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d2a6:	460b      	mov	r3, r1
 800d2a8:	2900      	cmp	r1, #0
 800d2aa:	d1f5      	bne.n	800d298 <_printf_i+0x16c>
 800d2ac:	e7b9      	b.n	800d222 <_printf_i+0xf6>
 800d2ae:	6813      	ldr	r3, [r2, #0]
 800d2b0:	6825      	ldr	r5, [r4, #0]
 800d2b2:	6961      	ldr	r1, [r4, #20]
 800d2b4:	1d18      	adds	r0, r3, #4
 800d2b6:	6010      	str	r0, [r2, #0]
 800d2b8:	0628      	lsls	r0, r5, #24
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	d501      	bpl.n	800d2c2 <_printf_i+0x196>
 800d2be:	6019      	str	r1, [r3, #0]
 800d2c0:	e002      	b.n	800d2c8 <_printf_i+0x19c>
 800d2c2:	066a      	lsls	r2, r5, #25
 800d2c4:	d5fb      	bpl.n	800d2be <_printf_i+0x192>
 800d2c6:	8019      	strh	r1, [r3, #0]
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	6123      	str	r3, [r4, #16]
 800d2cc:	4665      	mov	r5, ip
 800d2ce:	e7b9      	b.n	800d244 <_printf_i+0x118>
 800d2d0:	6813      	ldr	r3, [r2, #0]
 800d2d2:	1d19      	adds	r1, r3, #4
 800d2d4:	6011      	str	r1, [r2, #0]
 800d2d6:	681d      	ldr	r5, [r3, #0]
 800d2d8:	6862      	ldr	r2, [r4, #4]
 800d2da:	2100      	movs	r1, #0
 800d2dc:	4628      	mov	r0, r5
 800d2de:	f7f3 f807 	bl	80002f0 <memchr>
 800d2e2:	b108      	cbz	r0, 800d2e8 <_printf_i+0x1bc>
 800d2e4:	1b40      	subs	r0, r0, r5
 800d2e6:	6060      	str	r0, [r4, #4]
 800d2e8:	6863      	ldr	r3, [r4, #4]
 800d2ea:	6123      	str	r3, [r4, #16]
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2f2:	e7a7      	b.n	800d244 <_printf_i+0x118>
 800d2f4:	6923      	ldr	r3, [r4, #16]
 800d2f6:	462a      	mov	r2, r5
 800d2f8:	4639      	mov	r1, r7
 800d2fa:	4630      	mov	r0, r6
 800d2fc:	47c0      	blx	r8
 800d2fe:	3001      	adds	r0, #1
 800d300:	d0aa      	beq.n	800d258 <_printf_i+0x12c>
 800d302:	6823      	ldr	r3, [r4, #0]
 800d304:	079b      	lsls	r3, r3, #30
 800d306:	d413      	bmi.n	800d330 <_printf_i+0x204>
 800d308:	68e0      	ldr	r0, [r4, #12]
 800d30a:	9b03      	ldr	r3, [sp, #12]
 800d30c:	4298      	cmp	r0, r3
 800d30e:	bfb8      	it	lt
 800d310:	4618      	movlt	r0, r3
 800d312:	e7a3      	b.n	800d25c <_printf_i+0x130>
 800d314:	2301      	movs	r3, #1
 800d316:	464a      	mov	r2, r9
 800d318:	4639      	mov	r1, r7
 800d31a:	4630      	mov	r0, r6
 800d31c:	47c0      	blx	r8
 800d31e:	3001      	adds	r0, #1
 800d320:	d09a      	beq.n	800d258 <_printf_i+0x12c>
 800d322:	3501      	adds	r5, #1
 800d324:	68e3      	ldr	r3, [r4, #12]
 800d326:	9a03      	ldr	r2, [sp, #12]
 800d328:	1a9b      	subs	r3, r3, r2
 800d32a:	42ab      	cmp	r3, r5
 800d32c:	dcf2      	bgt.n	800d314 <_printf_i+0x1e8>
 800d32e:	e7eb      	b.n	800d308 <_printf_i+0x1dc>
 800d330:	2500      	movs	r5, #0
 800d332:	f104 0919 	add.w	r9, r4, #25
 800d336:	e7f5      	b.n	800d324 <_printf_i+0x1f8>
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d1ac      	bne.n	800d296 <_printf_i+0x16a>
 800d33c:	7803      	ldrb	r3, [r0, #0]
 800d33e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d342:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d346:	e76c      	b.n	800d222 <_printf_i+0xf6>
 800d348:	08011d32 	.word	0x08011d32
 800d34c:	08011d43 	.word	0x08011d43

0800d350 <_scanf_float>:
 800d350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d354:	469a      	mov	sl, r3
 800d356:	688b      	ldr	r3, [r1, #8]
 800d358:	4616      	mov	r6, r2
 800d35a:	1e5a      	subs	r2, r3, #1
 800d35c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d360:	b087      	sub	sp, #28
 800d362:	bf83      	ittte	hi
 800d364:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800d368:	189b      	addhi	r3, r3, r2
 800d36a:	9301      	strhi	r3, [sp, #4]
 800d36c:	2300      	movls	r3, #0
 800d36e:	bf86      	itte	hi
 800d370:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d374:	608b      	strhi	r3, [r1, #8]
 800d376:	9301      	strls	r3, [sp, #4]
 800d378:	680b      	ldr	r3, [r1, #0]
 800d37a:	4688      	mov	r8, r1
 800d37c:	f04f 0b00 	mov.w	fp, #0
 800d380:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d384:	f848 3b1c 	str.w	r3, [r8], #28
 800d388:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800d38c:	4607      	mov	r7, r0
 800d38e:	460c      	mov	r4, r1
 800d390:	4645      	mov	r5, r8
 800d392:	465a      	mov	r2, fp
 800d394:	46d9      	mov	r9, fp
 800d396:	f8cd b008 	str.w	fp, [sp, #8]
 800d39a:	68a1      	ldr	r1, [r4, #8]
 800d39c:	b181      	cbz	r1, 800d3c0 <_scanf_float+0x70>
 800d39e:	6833      	ldr	r3, [r6, #0]
 800d3a0:	781b      	ldrb	r3, [r3, #0]
 800d3a2:	2b49      	cmp	r3, #73	; 0x49
 800d3a4:	d071      	beq.n	800d48a <_scanf_float+0x13a>
 800d3a6:	d84d      	bhi.n	800d444 <_scanf_float+0xf4>
 800d3a8:	2b39      	cmp	r3, #57	; 0x39
 800d3aa:	d840      	bhi.n	800d42e <_scanf_float+0xde>
 800d3ac:	2b31      	cmp	r3, #49	; 0x31
 800d3ae:	f080 8088 	bcs.w	800d4c2 <_scanf_float+0x172>
 800d3b2:	2b2d      	cmp	r3, #45	; 0x2d
 800d3b4:	f000 8090 	beq.w	800d4d8 <_scanf_float+0x188>
 800d3b8:	d815      	bhi.n	800d3e6 <_scanf_float+0x96>
 800d3ba:	2b2b      	cmp	r3, #43	; 0x2b
 800d3bc:	f000 808c 	beq.w	800d4d8 <_scanf_float+0x188>
 800d3c0:	f1b9 0f00 	cmp.w	r9, #0
 800d3c4:	d003      	beq.n	800d3ce <_scanf_float+0x7e>
 800d3c6:	6823      	ldr	r3, [r4, #0]
 800d3c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d3cc:	6023      	str	r3, [r4, #0]
 800d3ce:	3a01      	subs	r2, #1
 800d3d0:	2a01      	cmp	r2, #1
 800d3d2:	f200 80ea 	bhi.w	800d5aa <_scanf_float+0x25a>
 800d3d6:	4545      	cmp	r5, r8
 800d3d8:	f200 80dc 	bhi.w	800d594 <_scanf_float+0x244>
 800d3dc:	2601      	movs	r6, #1
 800d3de:	4630      	mov	r0, r6
 800d3e0:	b007      	add	sp, #28
 800d3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3e6:	2b2e      	cmp	r3, #46	; 0x2e
 800d3e8:	f000 809f 	beq.w	800d52a <_scanf_float+0x1da>
 800d3ec:	2b30      	cmp	r3, #48	; 0x30
 800d3ee:	d1e7      	bne.n	800d3c0 <_scanf_float+0x70>
 800d3f0:	6820      	ldr	r0, [r4, #0]
 800d3f2:	f410 7f80 	tst.w	r0, #256	; 0x100
 800d3f6:	d064      	beq.n	800d4c2 <_scanf_float+0x172>
 800d3f8:	9b01      	ldr	r3, [sp, #4]
 800d3fa:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800d3fe:	6020      	str	r0, [r4, #0]
 800d400:	f109 0901 	add.w	r9, r9, #1
 800d404:	b11b      	cbz	r3, 800d40e <_scanf_float+0xbe>
 800d406:	3b01      	subs	r3, #1
 800d408:	3101      	adds	r1, #1
 800d40a:	9301      	str	r3, [sp, #4]
 800d40c:	60a1      	str	r1, [r4, #8]
 800d40e:	68a3      	ldr	r3, [r4, #8]
 800d410:	3b01      	subs	r3, #1
 800d412:	60a3      	str	r3, [r4, #8]
 800d414:	6923      	ldr	r3, [r4, #16]
 800d416:	3301      	adds	r3, #1
 800d418:	6123      	str	r3, [r4, #16]
 800d41a:	6873      	ldr	r3, [r6, #4]
 800d41c:	3b01      	subs	r3, #1
 800d41e:	2b00      	cmp	r3, #0
 800d420:	6073      	str	r3, [r6, #4]
 800d422:	f340 80ac 	ble.w	800d57e <_scanf_float+0x22e>
 800d426:	6833      	ldr	r3, [r6, #0]
 800d428:	3301      	adds	r3, #1
 800d42a:	6033      	str	r3, [r6, #0]
 800d42c:	e7b5      	b.n	800d39a <_scanf_float+0x4a>
 800d42e:	2b45      	cmp	r3, #69	; 0x45
 800d430:	f000 8085 	beq.w	800d53e <_scanf_float+0x1ee>
 800d434:	2b46      	cmp	r3, #70	; 0x46
 800d436:	d06a      	beq.n	800d50e <_scanf_float+0x1be>
 800d438:	2b41      	cmp	r3, #65	; 0x41
 800d43a:	d1c1      	bne.n	800d3c0 <_scanf_float+0x70>
 800d43c:	2a01      	cmp	r2, #1
 800d43e:	d1bf      	bne.n	800d3c0 <_scanf_float+0x70>
 800d440:	2202      	movs	r2, #2
 800d442:	e046      	b.n	800d4d2 <_scanf_float+0x182>
 800d444:	2b65      	cmp	r3, #101	; 0x65
 800d446:	d07a      	beq.n	800d53e <_scanf_float+0x1ee>
 800d448:	d818      	bhi.n	800d47c <_scanf_float+0x12c>
 800d44a:	2b54      	cmp	r3, #84	; 0x54
 800d44c:	d066      	beq.n	800d51c <_scanf_float+0x1cc>
 800d44e:	d811      	bhi.n	800d474 <_scanf_float+0x124>
 800d450:	2b4e      	cmp	r3, #78	; 0x4e
 800d452:	d1b5      	bne.n	800d3c0 <_scanf_float+0x70>
 800d454:	2a00      	cmp	r2, #0
 800d456:	d146      	bne.n	800d4e6 <_scanf_float+0x196>
 800d458:	f1b9 0f00 	cmp.w	r9, #0
 800d45c:	d145      	bne.n	800d4ea <_scanf_float+0x19a>
 800d45e:	6821      	ldr	r1, [r4, #0]
 800d460:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800d464:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800d468:	d13f      	bne.n	800d4ea <_scanf_float+0x19a>
 800d46a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800d46e:	6021      	str	r1, [r4, #0]
 800d470:	2201      	movs	r2, #1
 800d472:	e02e      	b.n	800d4d2 <_scanf_float+0x182>
 800d474:	2b59      	cmp	r3, #89	; 0x59
 800d476:	d01e      	beq.n	800d4b6 <_scanf_float+0x166>
 800d478:	2b61      	cmp	r3, #97	; 0x61
 800d47a:	e7de      	b.n	800d43a <_scanf_float+0xea>
 800d47c:	2b6e      	cmp	r3, #110	; 0x6e
 800d47e:	d0e9      	beq.n	800d454 <_scanf_float+0x104>
 800d480:	d815      	bhi.n	800d4ae <_scanf_float+0x15e>
 800d482:	2b66      	cmp	r3, #102	; 0x66
 800d484:	d043      	beq.n	800d50e <_scanf_float+0x1be>
 800d486:	2b69      	cmp	r3, #105	; 0x69
 800d488:	d19a      	bne.n	800d3c0 <_scanf_float+0x70>
 800d48a:	f1bb 0f00 	cmp.w	fp, #0
 800d48e:	d138      	bne.n	800d502 <_scanf_float+0x1b2>
 800d490:	f1b9 0f00 	cmp.w	r9, #0
 800d494:	d197      	bne.n	800d3c6 <_scanf_float+0x76>
 800d496:	6821      	ldr	r1, [r4, #0]
 800d498:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800d49c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800d4a0:	d195      	bne.n	800d3ce <_scanf_float+0x7e>
 800d4a2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800d4a6:	6021      	str	r1, [r4, #0]
 800d4a8:	f04f 0b01 	mov.w	fp, #1
 800d4ac:	e011      	b.n	800d4d2 <_scanf_float+0x182>
 800d4ae:	2b74      	cmp	r3, #116	; 0x74
 800d4b0:	d034      	beq.n	800d51c <_scanf_float+0x1cc>
 800d4b2:	2b79      	cmp	r3, #121	; 0x79
 800d4b4:	d184      	bne.n	800d3c0 <_scanf_float+0x70>
 800d4b6:	f1bb 0f07 	cmp.w	fp, #7
 800d4ba:	d181      	bne.n	800d3c0 <_scanf_float+0x70>
 800d4bc:	f04f 0b08 	mov.w	fp, #8
 800d4c0:	e007      	b.n	800d4d2 <_scanf_float+0x182>
 800d4c2:	eb12 0f0b 	cmn.w	r2, fp
 800d4c6:	f47f af7b 	bne.w	800d3c0 <_scanf_float+0x70>
 800d4ca:	6821      	ldr	r1, [r4, #0]
 800d4cc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800d4d0:	6021      	str	r1, [r4, #0]
 800d4d2:	702b      	strb	r3, [r5, #0]
 800d4d4:	3501      	adds	r5, #1
 800d4d6:	e79a      	b.n	800d40e <_scanf_float+0xbe>
 800d4d8:	6821      	ldr	r1, [r4, #0]
 800d4da:	0608      	lsls	r0, r1, #24
 800d4dc:	f57f af70 	bpl.w	800d3c0 <_scanf_float+0x70>
 800d4e0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d4e4:	e7f4      	b.n	800d4d0 <_scanf_float+0x180>
 800d4e6:	2a02      	cmp	r2, #2
 800d4e8:	d047      	beq.n	800d57a <_scanf_float+0x22a>
 800d4ea:	f1bb 0f01 	cmp.w	fp, #1
 800d4ee:	d003      	beq.n	800d4f8 <_scanf_float+0x1a8>
 800d4f0:	f1bb 0f04 	cmp.w	fp, #4
 800d4f4:	f47f af64 	bne.w	800d3c0 <_scanf_float+0x70>
 800d4f8:	f10b 0b01 	add.w	fp, fp, #1
 800d4fc:	fa5f fb8b 	uxtb.w	fp, fp
 800d500:	e7e7      	b.n	800d4d2 <_scanf_float+0x182>
 800d502:	f1bb 0f03 	cmp.w	fp, #3
 800d506:	d0f7      	beq.n	800d4f8 <_scanf_float+0x1a8>
 800d508:	f1bb 0f05 	cmp.w	fp, #5
 800d50c:	e7f2      	b.n	800d4f4 <_scanf_float+0x1a4>
 800d50e:	f1bb 0f02 	cmp.w	fp, #2
 800d512:	f47f af55 	bne.w	800d3c0 <_scanf_float+0x70>
 800d516:	f04f 0b03 	mov.w	fp, #3
 800d51a:	e7da      	b.n	800d4d2 <_scanf_float+0x182>
 800d51c:	f1bb 0f06 	cmp.w	fp, #6
 800d520:	f47f af4e 	bne.w	800d3c0 <_scanf_float+0x70>
 800d524:	f04f 0b07 	mov.w	fp, #7
 800d528:	e7d3      	b.n	800d4d2 <_scanf_float+0x182>
 800d52a:	6821      	ldr	r1, [r4, #0]
 800d52c:	0588      	lsls	r0, r1, #22
 800d52e:	f57f af47 	bpl.w	800d3c0 <_scanf_float+0x70>
 800d532:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800d536:	6021      	str	r1, [r4, #0]
 800d538:	f8cd 9008 	str.w	r9, [sp, #8]
 800d53c:	e7c9      	b.n	800d4d2 <_scanf_float+0x182>
 800d53e:	6821      	ldr	r1, [r4, #0]
 800d540:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800d544:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800d548:	d006      	beq.n	800d558 <_scanf_float+0x208>
 800d54a:	0548      	lsls	r0, r1, #21
 800d54c:	f57f af38 	bpl.w	800d3c0 <_scanf_float+0x70>
 800d550:	f1b9 0f00 	cmp.w	r9, #0
 800d554:	f43f af3b 	beq.w	800d3ce <_scanf_float+0x7e>
 800d558:	0588      	lsls	r0, r1, #22
 800d55a:	bf58      	it	pl
 800d55c:	9802      	ldrpl	r0, [sp, #8]
 800d55e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800d562:	bf58      	it	pl
 800d564:	eba9 0000 	subpl.w	r0, r9, r0
 800d568:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800d56c:	bf58      	it	pl
 800d56e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800d572:	6021      	str	r1, [r4, #0]
 800d574:	f04f 0900 	mov.w	r9, #0
 800d578:	e7ab      	b.n	800d4d2 <_scanf_float+0x182>
 800d57a:	2203      	movs	r2, #3
 800d57c:	e7a9      	b.n	800d4d2 <_scanf_float+0x182>
 800d57e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d582:	9205      	str	r2, [sp, #20]
 800d584:	4631      	mov	r1, r6
 800d586:	4638      	mov	r0, r7
 800d588:	4798      	blx	r3
 800d58a:	9a05      	ldr	r2, [sp, #20]
 800d58c:	2800      	cmp	r0, #0
 800d58e:	f43f af04 	beq.w	800d39a <_scanf_float+0x4a>
 800d592:	e715      	b.n	800d3c0 <_scanf_float+0x70>
 800d594:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d598:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d59c:	4632      	mov	r2, r6
 800d59e:	4638      	mov	r0, r7
 800d5a0:	4798      	blx	r3
 800d5a2:	6923      	ldr	r3, [r4, #16]
 800d5a4:	3b01      	subs	r3, #1
 800d5a6:	6123      	str	r3, [r4, #16]
 800d5a8:	e715      	b.n	800d3d6 <_scanf_float+0x86>
 800d5aa:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800d5ae:	2b06      	cmp	r3, #6
 800d5b0:	d80a      	bhi.n	800d5c8 <_scanf_float+0x278>
 800d5b2:	f1bb 0f02 	cmp.w	fp, #2
 800d5b6:	d966      	bls.n	800d686 <_scanf_float+0x336>
 800d5b8:	f1ab 0b03 	sub.w	fp, fp, #3
 800d5bc:	fa5f fb8b 	uxtb.w	fp, fp
 800d5c0:	eba5 0b0b 	sub.w	fp, r5, fp
 800d5c4:	455d      	cmp	r5, fp
 800d5c6:	d149      	bne.n	800d65c <_scanf_float+0x30c>
 800d5c8:	6823      	ldr	r3, [r4, #0]
 800d5ca:	05da      	lsls	r2, r3, #23
 800d5cc:	d51f      	bpl.n	800d60e <_scanf_float+0x2be>
 800d5ce:	055b      	lsls	r3, r3, #21
 800d5d0:	d466      	bmi.n	800d6a0 <_scanf_float+0x350>
 800d5d2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d5d6:	6923      	ldr	r3, [r4, #16]
 800d5d8:	2965      	cmp	r1, #101	; 0x65
 800d5da:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800d5de:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 800d5e2:	6123      	str	r3, [r4, #16]
 800d5e4:	d00d      	beq.n	800d602 <_scanf_float+0x2b2>
 800d5e6:	2945      	cmp	r1, #69	; 0x45
 800d5e8:	d00b      	beq.n	800d602 <_scanf_float+0x2b2>
 800d5ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d5ee:	4632      	mov	r2, r6
 800d5f0:	4638      	mov	r0, r7
 800d5f2:	4798      	blx	r3
 800d5f4:	6923      	ldr	r3, [r4, #16]
 800d5f6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800d5fa:	3b01      	subs	r3, #1
 800d5fc:	f1a5 0b02 	sub.w	fp, r5, #2
 800d600:	6123      	str	r3, [r4, #16]
 800d602:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d606:	4632      	mov	r2, r6
 800d608:	4638      	mov	r0, r7
 800d60a:	4798      	blx	r3
 800d60c:	465d      	mov	r5, fp
 800d60e:	6826      	ldr	r6, [r4, #0]
 800d610:	f016 0610 	ands.w	r6, r6, #16
 800d614:	d170      	bne.n	800d6f8 <_scanf_float+0x3a8>
 800d616:	702e      	strb	r6, [r5, #0]
 800d618:	6823      	ldr	r3, [r4, #0]
 800d61a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d61e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d622:	d140      	bne.n	800d6a6 <_scanf_float+0x356>
 800d624:	9b02      	ldr	r3, [sp, #8]
 800d626:	eba9 0303 	sub.w	r3, r9, r3
 800d62a:	425a      	negs	r2, r3
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d147      	bne.n	800d6c0 <_scanf_float+0x370>
 800d630:	2200      	movs	r2, #0
 800d632:	4638      	mov	r0, r7
 800d634:	4641      	mov	r1, r8
 800d636:	f000 ff57 	bl	800e4e8 <_strtod_r>
 800d63a:	6820      	ldr	r0, [r4, #0]
 800d63c:	f8da 3000 	ldr.w	r3, [sl]
 800d640:	f010 0f02 	tst.w	r0, #2
 800d644:	f103 0204 	add.w	r2, r3, #4
 800d648:	f8ca 2000 	str.w	r2, [sl]
 800d64c:	d043      	beq.n	800d6d6 <_scanf_float+0x386>
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	ed83 0b00 	vstr	d0, [r3]
 800d654:	68e3      	ldr	r3, [r4, #12]
 800d656:	3301      	adds	r3, #1
 800d658:	60e3      	str	r3, [r4, #12]
 800d65a:	e6c0      	b.n	800d3de <_scanf_float+0x8e>
 800d65c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d660:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d664:	4632      	mov	r2, r6
 800d666:	4638      	mov	r0, r7
 800d668:	4798      	blx	r3
 800d66a:	6923      	ldr	r3, [r4, #16]
 800d66c:	3b01      	subs	r3, #1
 800d66e:	6123      	str	r3, [r4, #16]
 800d670:	e7a8      	b.n	800d5c4 <_scanf_float+0x274>
 800d672:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d676:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d67a:	4632      	mov	r2, r6
 800d67c:	4638      	mov	r0, r7
 800d67e:	4798      	blx	r3
 800d680:	6923      	ldr	r3, [r4, #16]
 800d682:	3b01      	subs	r3, #1
 800d684:	6123      	str	r3, [r4, #16]
 800d686:	4545      	cmp	r5, r8
 800d688:	d8f3      	bhi.n	800d672 <_scanf_float+0x322>
 800d68a:	e6a7      	b.n	800d3dc <_scanf_float+0x8c>
 800d68c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d690:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d694:	4632      	mov	r2, r6
 800d696:	4638      	mov	r0, r7
 800d698:	4798      	blx	r3
 800d69a:	6923      	ldr	r3, [r4, #16]
 800d69c:	3b01      	subs	r3, #1
 800d69e:	6123      	str	r3, [r4, #16]
 800d6a0:	4545      	cmp	r5, r8
 800d6a2:	d8f3      	bhi.n	800d68c <_scanf_float+0x33c>
 800d6a4:	e69a      	b.n	800d3dc <_scanf_float+0x8c>
 800d6a6:	9b03      	ldr	r3, [sp, #12]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d0c1      	beq.n	800d630 <_scanf_float+0x2e0>
 800d6ac:	9904      	ldr	r1, [sp, #16]
 800d6ae:	230a      	movs	r3, #10
 800d6b0:	4632      	mov	r2, r6
 800d6b2:	3101      	adds	r1, #1
 800d6b4:	4638      	mov	r0, r7
 800d6b6:	f000 ffa3 	bl	800e600 <_strtol_r>
 800d6ba:	9b03      	ldr	r3, [sp, #12]
 800d6bc:	9d04      	ldr	r5, [sp, #16]
 800d6be:	1ac2      	subs	r2, r0, r3
 800d6c0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d6c4:	429d      	cmp	r5, r3
 800d6c6:	bf28      	it	cs
 800d6c8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800d6cc:	490b      	ldr	r1, [pc, #44]	; (800d6fc <_scanf_float+0x3ac>)
 800d6ce:	4628      	mov	r0, r5
 800d6d0:	f000 f8a8 	bl	800d824 <siprintf>
 800d6d4:	e7ac      	b.n	800d630 <_scanf_float+0x2e0>
 800d6d6:	f010 0004 	ands.w	r0, r0, #4
 800d6da:	d1b8      	bne.n	800d64e <_scanf_float+0x2fe>
 800d6dc:	eeb4 0b40 	vcmp.f64	d0, d0
 800d6e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6e4:	681d      	ldr	r5, [r3, #0]
 800d6e6:	d704      	bvc.n	800d6f2 <_scanf_float+0x3a2>
 800d6e8:	f000 f896 	bl	800d818 <nanf>
 800d6ec:	ed85 0a00 	vstr	s0, [r5]
 800d6f0:	e7b0      	b.n	800d654 <_scanf_float+0x304>
 800d6f2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800d6f6:	e7f9      	b.n	800d6ec <_scanf_float+0x39c>
 800d6f8:	2600      	movs	r6, #0
 800d6fa:	e670      	b.n	800d3de <_scanf_float+0x8e>
 800d6fc:	08011d54 	.word	0x08011d54

0800d700 <iprintf>:
 800d700:	b40f      	push	{r0, r1, r2, r3}
 800d702:	4b0a      	ldr	r3, [pc, #40]	; (800d72c <iprintf+0x2c>)
 800d704:	b513      	push	{r0, r1, r4, lr}
 800d706:	681c      	ldr	r4, [r3, #0]
 800d708:	b124      	cbz	r4, 800d714 <iprintf+0x14>
 800d70a:	69a3      	ldr	r3, [r4, #24]
 800d70c:	b913      	cbnz	r3, 800d714 <iprintf+0x14>
 800d70e:	4620      	mov	r0, r4
 800d710:	f7ff f884 	bl	800c81c <__sinit>
 800d714:	ab05      	add	r3, sp, #20
 800d716:	9a04      	ldr	r2, [sp, #16]
 800d718:	68a1      	ldr	r1, [r4, #8]
 800d71a:	9301      	str	r3, [sp, #4]
 800d71c:	4620      	mov	r0, r4
 800d71e:	f002 ff9b 	bl	8010658 <_vfiprintf_r>
 800d722:	b002      	add	sp, #8
 800d724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d728:	b004      	add	sp, #16
 800d72a:	4770      	bx	lr
 800d72c:	24000018 	.word	0x24000018

0800d730 <_puts_r>:
 800d730:	b570      	push	{r4, r5, r6, lr}
 800d732:	460e      	mov	r6, r1
 800d734:	4605      	mov	r5, r0
 800d736:	b118      	cbz	r0, 800d740 <_puts_r+0x10>
 800d738:	6983      	ldr	r3, [r0, #24]
 800d73a:	b90b      	cbnz	r3, 800d740 <_puts_r+0x10>
 800d73c:	f7ff f86e 	bl	800c81c <__sinit>
 800d740:	69ab      	ldr	r3, [r5, #24]
 800d742:	68ac      	ldr	r4, [r5, #8]
 800d744:	b913      	cbnz	r3, 800d74c <_puts_r+0x1c>
 800d746:	4628      	mov	r0, r5
 800d748:	f7ff f868 	bl	800c81c <__sinit>
 800d74c:	4b23      	ldr	r3, [pc, #140]	; (800d7dc <_puts_r+0xac>)
 800d74e:	429c      	cmp	r4, r3
 800d750:	d117      	bne.n	800d782 <_puts_r+0x52>
 800d752:	686c      	ldr	r4, [r5, #4]
 800d754:	89a3      	ldrh	r3, [r4, #12]
 800d756:	071b      	lsls	r3, r3, #28
 800d758:	d51d      	bpl.n	800d796 <_puts_r+0x66>
 800d75a:	6923      	ldr	r3, [r4, #16]
 800d75c:	b1db      	cbz	r3, 800d796 <_puts_r+0x66>
 800d75e:	3e01      	subs	r6, #1
 800d760:	68a3      	ldr	r3, [r4, #8]
 800d762:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d766:	3b01      	subs	r3, #1
 800d768:	60a3      	str	r3, [r4, #8]
 800d76a:	b9e9      	cbnz	r1, 800d7a8 <_puts_r+0x78>
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	da2e      	bge.n	800d7ce <_puts_r+0x9e>
 800d770:	4622      	mov	r2, r4
 800d772:	210a      	movs	r1, #10
 800d774:	4628      	mov	r0, r5
 800d776:	f000 ff55 	bl	800e624 <__swbuf_r>
 800d77a:	3001      	adds	r0, #1
 800d77c:	d011      	beq.n	800d7a2 <_puts_r+0x72>
 800d77e:	200a      	movs	r0, #10
 800d780:	e011      	b.n	800d7a6 <_puts_r+0x76>
 800d782:	4b17      	ldr	r3, [pc, #92]	; (800d7e0 <_puts_r+0xb0>)
 800d784:	429c      	cmp	r4, r3
 800d786:	d101      	bne.n	800d78c <_puts_r+0x5c>
 800d788:	68ac      	ldr	r4, [r5, #8]
 800d78a:	e7e3      	b.n	800d754 <_puts_r+0x24>
 800d78c:	4b15      	ldr	r3, [pc, #84]	; (800d7e4 <_puts_r+0xb4>)
 800d78e:	429c      	cmp	r4, r3
 800d790:	bf08      	it	eq
 800d792:	68ec      	ldreq	r4, [r5, #12]
 800d794:	e7de      	b.n	800d754 <_puts_r+0x24>
 800d796:	4621      	mov	r1, r4
 800d798:	4628      	mov	r0, r5
 800d79a:	f000 ffa7 	bl	800e6ec <__swsetup_r>
 800d79e:	2800      	cmp	r0, #0
 800d7a0:	d0dd      	beq.n	800d75e <_puts_r+0x2e>
 800d7a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d7a6:	bd70      	pop	{r4, r5, r6, pc}
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	da04      	bge.n	800d7b6 <_puts_r+0x86>
 800d7ac:	69a2      	ldr	r2, [r4, #24]
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	dc06      	bgt.n	800d7c0 <_puts_r+0x90>
 800d7b2:	290a      	cmp	r1, #10
 800d7b4:	d004      	beq.n	800d7c0 <_puts_r+0x90>
 800d7b6:	6823      	ldr	r3, [r4, #0]
 800d7b8:	1c5a      	adds	r2, r3, #1
 800d7ba:	6022      	str	r2, [r4, #0]
 800d7bc:	7019      	strb	r1, [r3, #0]
 800d7be:	e7cf      	b.n	800d760 <_puts_r+0x30>
 800d7c0:	4622      	mov	r2, r4
 800d7c2:	4628      	mov	r0, r5
 800d7c4:	f000 ff2e 	bl	800e624 <__swbuf_r>
 800d7c8:	3001      	adds	r0, #1
 800d7ca:	d1c9      	bne.n	800d760 <_puts_r+0x30>
 800d7cc:	e7e9      	b.n	800d7a2 <_puts_r+0x72>
 800d7ce:	6823      	ldr	r3, [r4, #0]
 800d7d0:	200a      	movs	r0, #10
 800d7d2:	1c5a      	adds	r2, r3, #1
 800d7d4:	6022      	str	r2, [r4, #0]
 800d7d6:	7018      	strb	r0, [r3, #0]
 800d7d8:	e7e5      	b.n	800d7a6 <_puts_r+0x76>
 800d7da:	bf00      	nop
 800d7dc:	08011cdc 	.word	0x08011cdc
 800d7e0:	08011cfc 	.word	0x08011cfc
 800d7e4:	08011cbc 	.word	0x08011cbc

0800d7e8 <puts>:
 800d7e8:	4b02      	ldr	r3, [pc, #8]	; (800d7f4 <puts+0xc>)
 800d7ea:	4601      	mov	r1, r0
 800d7ec:	6818      	ldr	r0, [r3, #0]
 800d7ee:	f7ff bf9f 	b.w	800d730 <_puts_r>
 800d7f2:	bf00      	nop
 800d7f4:	24000018 	.word	0x24000018

0800d7f8 <_sbrk_r>:
 800d7f8:	b538      	push	{r3, r4, r5, lr}
 800d7fa:	4c06      	ldr	r4, [pc, #24]	; (800d814 <_sbrk_r+0x1c>)
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	4605      	mov	r5, r0
 800d800:	4608      	mov	r0, r1
 800d802:	6023      	str	r3, [r4, #0]
 800d804:	f7f4 fb4a 	bl	8001e9c <_sbrk>
 800d808:	1c43      	adds	r3, r0, #1
 800d80a:	d102      	bne.n	800d812 <_sbrk_r+0x1a>
 800d80c:	6823      	ldr	r3, [r4, #0]
 800d80e:	b103      	cbz	r3, 800d812 <_sbrk_r+0x1a>
 800d810:	602b      	str	r3, [r5, #0]
 800d812:	bd38      	pop	{r3, r4, r5, pc}
 800d814:	24005a68 	.word	0x24005a68

0800d818 <nanf>:
 800d818:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d820 <nanf+0x8>
 800d81c:	4770      	bx	lr
 800d81e:	bf00      	nop
 800d820:	7fc00000 	.word	0x7fc00000

0800d824 <siprintf>:
 800d824:	b40e      	push	{r1, r2, r3}
 800d826:	b500      	push	{lr}
 800d828:	b09c      	sub	sp, #112	; 0x70
 800d82a:	ab1d      	add	r3, sp, #116	; 0x74
 800d82c:	9002      	str	r0, [sp, #8]
 800d82e:	9006      	str	r0, [sp, #24]
 800d830:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d834:	4809      	ldr	r0, [pc, #36]	; (800d85c <siprintf+0x38>)
 800d836:	9107      	str	r1, [sp, #28]
 800d838:	9104      	str	r1, [sp, #16]
 800d83a:	4909      	ldr	r1, [pc, #36]	; (800d860 <siprintf+0x3c>)
 800d83c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d840:	9105      	str	r1, [sp, #20]
 800d842:	6800      	ldr	r0, [r0, #0]
 800d844:	9301      	str	r3, [sp, #4]
 800d846:	a902      	add	r1, sp, #8
 800d848:	f002 fde4 	bl	8010414 <_svfiprintf_r>
 800d84c:	9b02      	ldr	r3, [sp, #8]
 800d84e:	2200      	movs	r2, #0
 800d850:	701a      	strb	r2, [r3, #0]
 800d852:	b01c      	add	sp, #112	; 0x70
 800d854:	f85d eb04 	ldr.w	lr, [sp], #4
 800d858:	b003      	add	sp, #12
 800d85a:	4770      	bx	lr
 800d85c:	24000018 	.word	0x24000018
 800d860:	ffff0208 	.word	0xffff0208

0800d864 <__sread>:
 800d864:	b510      	push	{r4, lr}
 800d866:	460c      	mov	r4, r1
 800d868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d86c:	f003 f80a 	bl	8010884 <_read_r>
 800d870:	2800      	cmp	r0, #0
 800d872:	bfab      	itete	ge
 800d874:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d876:	89a3      	ldrhlt	r3, [r4, #12]
 800d878:	181b      	addge	r3, r3, r0
 800d87a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d87e:	bfac      	ite	ge
 800d880:	6563      	strge	r3, [r4, #84]	; 0x54
 800d882:	81a3      	strhlt	r3, [r4, #12]
 800d884:	bd10      	pop	{r4, pc}

0800d886 <__swrite>:
 800d886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d88a:	461f      	mov	r7, r3
 800d88c:	898b      	ldrh	r3, [r1, #12]
 800d88e:	05db      	lsls	r3, r3, #23
 800d890:	4605      	mov	r5, r0
 800d892:	460c      	mov	r4, r1
 800d894:	4616      	mov	r6, r2
 800d896:	d505      	bpl.n	800d8a4 <__swrite+0x1e>
 800d898:	2302      	movs	r3, #2
 800d89a:	2200      	movs	r2, #0
 800d89c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8a0:	f002 f8b4 	bl	800fa0c <_lseek_r>
 800d8a4:	89a3      	ldrh	r3, [r4, #12]
 800d8a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d8ae:	81a3      	strh	r3, [r4, #12]
 800d8b0:	4632      	mov	r2, r6
 800d8b2:	463b      	mov	r3, r7
 800d8b4:	4628      	mov	r0, r5
 800d8b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8ba:	f000 bf05 	b.w	800e6c8 <_write_r>

0800d8be <__sseek>:
 800d8be:	b510      	push	{r4, lr}
 800d8c0:	460c      	mov	r4, r1
 800d8c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8c6:	f002 f8a1 	bl	800fa0c <_lseek_r>
 800d8ca:	1c43      	adds	r3, r0, #1
 800d8cc:	89a3      	ldrh	r3, [r4, #12]
 800d8ce:	bf15      	itete	ne
 800d8d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800d8d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d8d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d8da:	81a3      	strheq	r3, [r4, #12]
 800d8dc:	bf18      	it	ne
 800d8de:	81a3      	strhne	r3, [r4, #12]
 800d8e0:	bd10      	pop	{r4, pc}

0800d8e2 <__sclose>:
 800d8e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8e6:	f000 bf6f 	b.w	800e7c8 <_close_r>

0800d8ea <strcpy>:
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d8f0:	f803 2b01 	strb.w	r2, [r3], #1
 800d8f4:	2a00      	cmp	r2, #0
 800d8f6:	d1f9      	bne.n	800d8ec <strcpy+0x2>
 800d8f8:	4770      	bx	lr

0800d8fa <strncmp>:
 800d8fa:	b510      	push	{r4, lr}
 800d8fc:	b16a      	cbz	r2, 800d91a <strncmp+0x20>
 800d8fe:	3901      	subs	r1, #1
 800d900:	1884      	adds	r4, r0, r2
 800d902:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d906:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d90a:	4293      	cmp	r3, r2
 800d90c:	d103      	bne.n	800d916 <strncmp+0x1c>
 800d90e:	42a0      	cmp	r0, r4
 800d910:	d001      	beq.n	800d916 <strncmp+0x1c>
 800d912:	2b00      	cmp	r3, #0
 800d914:	d1f5      	bne.n	800d902 <strncmp+0x8>
 800d916:	1a98      	subs	r0, r3, r2
 800d918:	bd10      	pop	{r4, pc}
 800d91a:	4610      	mov	r0, r2
 800d91c:	e7fc      	b.n	800d918 <strncmp+0x1e>

0800d91e <sulp>:
 800d91e:	b570      	push	{r4, r5, r6, lr}
 800d920:	4604      	mov	r4, r0
 800d922:	460d      	mov	r5, r1
 800d924:	4616      	mov	r6, r2
 800d926:	ec45 4b10 	vmov	d0, r4, r5
 800d92a:	f002 fbd7 	bl	80100dc <__ulp>
 800d92e:	b17e      	cbz	r6, 800d950 <sulp+0x32>
 800d930:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d934:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d938:	2b00      	cmp	r3, #0
 800d93a:	dd09      	ble.n	800d950 <sulp+0x32>
 800d93c:	051b      	lsls	r3, r3, #20
 800d93e:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800d942:	2000      	movs	r0, #0
 800d944:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800d948:	ec41 0b17 	vmov	d7, r0, r1
 800d94c:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d950:	bd70      	pop	{r4, r5, r6, pc}
 800d952:	0000      	movs	r0, r0
 800d954:	0000      	movs	r0, r0
	...

0800d958 <_strtod_l>:
 800d958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d95c:	ed2d 8b0c 	vpush	{d8-d13}
 800d960:	4698      	mov	r8, r3
 800d962:	b09d      	sub	sp, #116	; 0x74
 800d964:	2300      	movs	r3, #0
 800d966:	4604      	mov	r4, r0
 800d968:	4640      	mov	r0, r8
 800d96a:	460e      	mov	r6, r1
 800d96c:	9214      	str	r2, [sp, #80]	; 0x50
 800d96e:	9318      	str	r3, [sp, #96]	; 0x60
 800d970:	f002 f83b 	bl	800f9ea <__localeconv_l>
 800d974:	4681      	mov	r9, r0
 800d976:	6800      	ldr	r0, [r0, #0]
 800d978:	f7f2 fcb2 	bl	80002e0 <strlen>
 800d97c:	f04f 0a00 	mov.w	sl, #0
 800d980:	4607      	mov	r7, r0
 800d982:	f04f 0b00 	mov.w	fp, #0
 800d986:	9617      	str	r6, [sp, #92]	; 0x5c
 800d988:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d98a:	781a      	ldrb	r2, [r3, #0]
 800d98c:	2a0d      	cmp	r2, #13
 800d98e:	d834      	bhi.n	800d9fa <_strtod_l+0xa2>
 800d990:	2a09      	cmp	r2, #9
 800d992:	d238      	bcs.n	800da06 <_strtod_l+0xae>
 800d994:	2a00      	cmp	r2, #0
 800d996:	d040      	beq.n	800da1a <_strtod_l+0xc2>
 800d998:	2300      	movs	r3, #0
 800d99a:	930d      	str	r3, [sp, #52]	; 0x34
 800d99c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800d99e:	782b      	ldrb	r3, [r5, #0]
 800d9a0:	2b30      	cmp	r3, #48	; 0x30
 800d9a2:	f040 80b3 	bne.w	800db0c <_strtod_l+0x1b4>
 800d9a6:	786b      	ldrb	r3, [r5, #1]
 800d9a8:	2b58      	cmp	r3, #88	; 0x58
 800d9aa:	d001      	beq.n	800d9b0 <_strtod_l+0x58>
 800d9ac:	2b78      	cmp	r3, #120	; 0x78
 800d9ae:	d169      	bne.n	800da84 <_strtod_l+0x12c>
 800d9b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d9b2:	9301      	str	r3, [sp, #4]
 800d9b4:	ab18      	add	r3, sp, #96	; 0x60
 800d9b6:	9300      	str	r3, [sp, #0]
 800d9b8:	f8cd 8008 	str.w	r8, [sp, #8]
 800d9bc:	ab19      	add	r3, sp, #100	; 0x64
 800d9be:	4a8f      	ldr	r2, [pc, #572]	; (800dbfc <_strtod_l+0x2a4>)
 800d9c0:	a917      	add	r1, sp, #92	; 0x5c
 800d9c2:	4620      	mov	r0, r4
 800d9c4:	f001 fd37 	bl	800f436 <__gethex>
 800d9c8:	f010 0607 	ands.w	r6, r0, #7
 800d9cc:	4607      	mov	r7, r0
 800d9ce:	d005      	beq.n	800d9dc <_strtod_l+0x84>
 800d9d0:	2e06      	cmp	r6, #6
 800d9d2:	d12c      	bne.n	800da2e <_strtod_l+0xd6>
 800d9d4:	3501      	adds	r5, #1
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	9517      	str	r5, [sp, #92]	; 0x5c
 800d9da:	930d      	str	r3, [sp, #52]	; 0x34
 800d9dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	f040 855e 	bne.w	800e4a0 <_strtod_l+0xb48>
 800d9e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d9e6:	b1eb      	cbz	r3, 800da24 <_strtod_l+0xcc>
 800d9e8:	ec4b ab17 	vmov	d7, sl, fp
 800d9ec:	eeb1 0b47 	vneg.f64	d0, d7
 800d9f0:	b01d      	add	sp, #116	; 0x74
 800d9f2:	ecbd 8b0c 	vpop	{d8-d13}
 800d9f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9fa:	2a2b      	cmp	r2, #43	; 0x2b
 800d9fc:	d015      	beq.n	800da2a <_strtod_l+0xd2>
 800d9fe:	2a2d      	cmp	r2, #45	; 0x2d
 800da00:	d004      	beq.n	800da0c <_strtod_l+0xb4>
 800da02:	2a20      	cmp	r2, #32
 800da04:	d1c8      	bne.n	800d998 <_strtod_l+0x40>
 800da06:	3301      	adds	r3, #1
 800da08:	9317      	str	r3, [sp, #92]	; 0x5c
 800da0a:	e7bd      	b.n	800d988 <_strtod_l+0x30>
 800da0c:	2201      	movs	r2, #1
 800da0e:	920d      	str	r2, [sp, #52]	; 0x34
 800da10:	1c5a      	adds	r2, r3, #1
 800da12:	9217      	str	r2, [sp, #92]	; 0x5c
 800da14:	785b      	ldrb	r3, [r3, #1]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d1c0      	bne.n	800d99c <_strtod_l+0x44>
 800da1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800da1c:	9617      	str	r6, [sp, #92]	; 0x5c
 800da1e:	2b00      	cmp	r3, #0
 800da20:	f040 853c 	bne.w	800e49c <_strtod_l+0xb44>
 800da24:	ec4b ab10 	vmov	d0, sl, fp
 800da28:	e7e2      	b.n	800d9f0 <_strtod_l+0x98>
 800da2a:	2200      	movs	r2, #0
 800da2c:	e7ef      	b.n	800da0e <_strtod_l+0xb6>
 800da2e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800da30:	b13a      	cbz	r2, 800da42 <_strtod_l+0xea>
 800da32:	2135      	movs	r1, #53	; 0x35
 800da34:	a81a      	add	r0, sp, #104	; 0x68
 800da36:	f002 fc4a 	bl	80102ce <__copybits>
 800da3a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800da3c:	4620      	mov	r0, r4
 800da3e:	f002 f8b6 	bl	800fbae <_Bfree>
 800da42:	3e01      	subs	r6, #1
 800da44:	2e04      	cmp	r6, #4
 800da46:	d806      	bhi.n	800da56 <_strtod_l+0xfe>
 800da48:	e8df f006 	tbb	[pc, r6]
 800da4c:	1714030a 	.word	0x1714030a
 800da50:	0a          	.byte	0x0a
 800da51:	00          	.byte	0x00
 800da52:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800da56:	073b      	lsls	r3, r7, #28
 800da58:	d5c0      	bpl.n	800d9dc <_strtod_l+0x84>
 800da5a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800da5e:	e7bd      	b.n	800d9dc <_strtod_l+0x84>
 800da60:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800da64:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800da66:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800da6a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800da6e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800da72:	e7f0      	b.n	800da56 <_strtod_l+0xfe>
 800da74:	f8df b188 	ldr.w	fp, [pc, #392]	; 800dc00 <_strtod_l+0x2a8>
 800da78:	e7ed      	b.n	800da56 <_strtod_l+0xfe>
 800da7a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800da7e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800da82:	e7e8      	b.n	800da56 <_strtod_l+0xfe>
 800da84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800da86:	1c5a      	adds	r2, r3, #1
 800da88:	9217      	str	r2, [sp, #92]	; 0x5c
 800da8a:	785b      	ldrb	r3, [r3, #1]
 800da8c:	2b30      	cmp	r3, #48	; 0x30
 800da8e:	d0f9      	beq.n	800da84 <_strtod_l+0x12c>
 800da90:	2b00      	cmp	r3, #0
 800da92:	d0a3      	beq.n	800d9dc <_strtod_l+0x84>
 800da94:	2301      	movs	r3, #1
 800da96:	930a      	str	r3, [sp, #40]	; 0x28
 800da98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800da9a:	930c      	str	r3, [sp, #48]	; 0x30
 800da9c:	2300      	movs	r3, #0
 800da9e:	9306      	str	r3, [sp, #24]
 800daa0:	9308      	str	r3, [sp, #32]
 800daa2:	461d      	mov	r5, r3
 800daa4:	220a      	movs	r2, #10
 800daa6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800daa8:	f890 8000 	ldrb.w	r8, [r0]
 800daac:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 800dab0:	b2d9      	uxtb	r1, r3
 800dab2:	2909      	cmp	r1, #9
 800dab4:	d92c      	bls.n	800db10 <_strtod_l+0x1b8>
 800dab6:	463a      	mov	r2, r7
 800dab8:	f8d9 1000 	ldr.w	r1, [r9]
 800dabc:	f7ff ff1d 	bl	800d8fa <strncmp>
 800dac0:	2800      	cmp	r0, #0
 800dac2:	d035      	beq.n	800db30 <_strtod_l+0x1d8>
 800dac4:	2000      	movs	r0, #0
 800dac6:	4642      	mov	r2, r8
 800dac8:	462b      	mov	r3, r5
 800daca:	4601      	mov	r1, r0
 800dacc:	9004      	str	r0, [sp, #16]
 800dace:	2a65      	cmp	r2, #101	; 0x65
 800dad0:	d001      	beq.n	800dad6 <_strtod_l+0x17e>
 800dad2:	2a45      	cmp	r2, #69	; 0x45
 800dad4:	d117      	bne.n	800db06 <_strtod_l+0x1ae>
 800dad6:	b923      	cbnz	r3, 800dae2 <_strtod_l+0x18a>
 800dad8:	b910      	cbnz	r0, 800dae0 <_strtod_l+0x188>
 800dada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d09c      	beq.n	800da1a <_strtod_l+0xc2>
 800dae0:	2300      	movs	r3, #0
 800dae2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800dae4:	1c72      	adds	r2, r6, #1
 800dae6:	9217      	str	r2, [sp, #92]	; 0x5c
 800dae8:	7872      	ldrb	r2, [r6, #1]
 800daea:	2a2b      	cmp	r2, #43	; 0x2b
 800daec:	f000 8082 	beq.w	800dbf4 <_strtod_l+0x29c>
 800daf0:	2a2d      	cmp	r2, #45	; 0x2d
 800daf2:	d079      	beq.n	800dbe8 <_strtod_l+0x290>
 800daf4:	f04f 0e00 	mov.w	lr, #0
 800daf8:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800dafc:	f1bc 0f09 	cmp.w	ip, #9
 800db00:	f240 8086 	bls.w	800dc10 <_strtod_l+0x2b8>
 800db04:	9617      	str	r6, [sp, #92]	; 0x5c
 800db06:	f04f 0800 	mov.w	r8, #0
 800db0a:	e0a8      	b.n	800dc5e <_strtod_l+0x306>
 800db0c:	2300      	movs	r3, #0
 800db0e:	e7c2      	b.n	800da96 <_strtod_l+0x13e>
 800db10:	2d08      	cmp	r5, #8
 800db12:	bfd5      	itete	le
 800db14:	9908      	ldrle	r1, [sp, #32]
 800db16:	9906      	ldrgt	r1, [sp, #24]
 800db18:	fb02 3301 	mlale	r3, r2, r1, r3
 800db1c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800db20:	f100 0001 	add.w	r0, r0, #1
 800db24:	bfd4      	ite	le
 800db26:	9308      	strle	r3, [sp, #32]
 800db28:	9306      	strgt	r3, [sp, #24]
 800db2a:	3501      	adds	r5, #1
 800db2c:	9017      	str	r0, [sp, #92]	; 0x5c
 800db2e:	e7ba      	b.n	800daa6 <_strtod_l+0x14e>
 800db30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800db32:	19da      	adds	r2, r3, r7
 800db34:	9217      	str	r2, [sp, #92]	; 0x5c
 800db36:	5dda      	ldrb	r2, [r3, r7]
 800db38:	2d00      	cmp	r5, #0
 800db3a:	d038      	beq.n	800dbae <_strtod_l+0x256>
 800db3c:	4601      	mov	r1, r0
 800db3e:	462b      	mov	r3, r5
 800db40:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800db44:	2f09      	cmp	r7, #9
 800db46:	d913      	bls.n	800db70 <_strtod_l+0x218>
 800db48:	2701      	movs	r7, #1
 800db4a:	9704      	str	r7, [sp, #16]
 800db4c:	e7bf      	b.n	800dace <_strtod_l+0x176>
 800db4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800db50:	1c5a      	adds	r2, r3, #1
 800db52:	9217      	str	r2, [sp, #92]	; 0x5c
 800db54:	785a      	ldrb	r2, [r3, #1]
 800db56:	3001      	adds	r0, #1
 800db58:	2a30      	cmp	r2, #48	; 0x30
 800db5a:	d0f8      	beq.n	800db4e <_strtod_l+0x1f6>
 800db5c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800db60:	2b08      	cmp	r3, #8
 800db62:	f200 84a2 	bhi.w	800e4aa <_strtod_l+0xb52>
 800db66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800db68:	930c      	str	r3, [sp, #48]	; 0x30
 800db6a:	4601      	mov	r1, r0
 800db6c:	2000      	movs	r0, #0
 800db6e:	4603      	mov	r3, r0
 800db70:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 800db74:	f100 0701 	add.w	r7, r0, #1
 800db78:	d013      	beq.n	800dba2 <_strtod_l+0x24a>
 800db7a:	4439      	add	r1, r7
 800db7c:	eb00 0e03 	add.w	lr, r0, r3
 800db80:	461f      	mov	r7, r3
 800db82:	f04f 0c0a 	mov.w	ip, #10
 800db86:	45be      	cmp	lr, r7
 800db88:	d113      	bne.n	800dbb2 <_strtod_l+0x25a>
 800db8a:	181f      	adds	r7, r3, r0
 800db8c:	2f08      	cmp	r7, #8
 800db8e:	f103 0301 	add.w	r3, r3, #1
 800db92:	4403      	add	r3, r0
 800db94:	dc1d      	bgt.n	800dbd2 <_strtod_l+0x27a>
 800db96:	9a08      	ldr	r2, [sp, #32]
 800db98:	200a      	movs	r0, #10
 800db9a:	fb00 8202 	mla	r2, r0, r2, r8
 800db9e:	9208      	str	r2, [sp, #32]
 800dba0:	2700      	movs	r7, #0
 800dba2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dba4:	1c50      	adds	r0, r2, #1
 800dba6:	9017      	str	r0, [sp, #92]	; 0x5c
 800dba8:	7852      	ldrb	r2, [r2, #1]
 800dbaa:	4638      	mov	r0, r7
 800dbac:	e7c8      	b.n	800db40 <_strtod_l+0x1e8>
 800dbae:	4628      	mov	r0, r5
 800dbb0:	e7d2      	b.n	800db58 <_strtod_l+0x200>
 800dbb2:	2f08      	cmp	r7, #8
 800dbb4:	f107 0701 	add.w	r7, r7, #1
 800dbb8:	dc04      	bgt.n	800dbc4 <_strtod_l+0x26c>
 800dbba:	9a08      	ldr	r2, [sp, #32]
 800dbbc:	fb0c f202 	mul.w	r2, ip, r2
 800dbc0:	9208      	str	r2, [sp, #32]
 800dbc2:	e7e0      	b.n	800db86 <_strtod_l+0x22e>
 800dbc4:	2f10      	cmp	r7, #16
 800dbc6:	bfde      	ittt	le
 800dbc8:	9a06      	ldrle	r2, [sp, #24]
 800dbca:	fb0c f202 	mulle.w	r2, ip, r2
 800dbce:	9206      	strle	r2, [sp, #24]
 800dbd0:	e7d9      	b.n	800db86 <_strtod_l+0x22e>
 800dbd2:	2b10      	cmp	r3, #16
 800dbd4:	bfdf      	itttt	le
 800dbd6:	9a06      	ldrle	r2, [sp, #24]
 800dbd8:	200a      	movle	r0, #10
 800dbda:	fb00 8202 	mlale	r2, r0, r2, r8
 800dbde:	9206      	strle	r2, [sp, #24]
 800dbe0:	e7de      	b.n	800dba0 <_strtod_l+0x248>
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	9304      	str	r3, [sp, #16]
 800dbe6:	e777      	b.n	800dad8 <_strtod_l+0x180>
 800dbe8:	f04f 0e01 	mov.w	lr, #1
 800dbec:	1cb2      	adds	r2, r6, #2
 800dbee:	9217      	str	r2, [sp, #92]	; 0x5c
 800dbf0:	78b2      	ldrb	r2, [r6, #2]
 800dbf2:	e781      	b.n	800daf8 <_strtod_l+0x1a0>
 800dbf4:	f04f 0e00 	mov.w	lr, #0
 800dbf8:	e7f8      	b.n	800dbec <_strtod_l+0x294>
 800dbfa:	bf00      	nop
 800dbfc:	08011d5c 	.word	0x08011d5c
 800dc00:	7ff00000 	.word	0x7ff00000
 800dc04:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dc06:	f102 0c01 	add.w	ip, r2, #1
 800dc0a:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800dc0e:	7852      	ldrb	r2, [r2, #1]
 800dc10:	2a30      	cmp	r2, #48	; 0x30
 800dc12:	d0f7      	beq.n	800dc04 <_strtod_l+0x2ac>
 800dc14:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 800dc18:	f1bc 0f08 	cmp.w	ip, #8
 800dc1c:	f63f af73 	bhi.w	800db06 <_strtod_l+0x1ae>
 800dc20:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 800dc24:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dc26:	920e      	str	r2, [sp, #56]	; 0x38
 800dc28:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dc2a:	f102 0c01 	add.w	ip, r2, #1
 800dc2e:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800dc32:	7852      	ldrb	r2, [r2, #1]
 800dc34:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 800dc38:	f1b9 0f09 	cmp.w	r9, #9
 800dc3c:	d939      	bls.n	800dcb2 <_strtod_l+0x35a>
 800dc3e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800dc40:	ebac 0c07 	sub.w	ip, ip, r7
 800dc44:	f1bc 0f08 	cmp.w	ip, #8
 800dc48:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 800dc4c:	dc37      	bgt.n	800dcbe <_strtod_l+0x366>
 800dc4e:	45e0      	cmp	r8, ip
 800dc50:	bfa8      	it	ge
 800dc52:	46e0      	movge	r8, ip
 800dc54:	f1be 0f00 	cmp.w	lr, #0
 800dc58:	d001      	beq.n	800dc5e <_strtod_l+0x306>
 800dc5a:	f1c8 0800 	rsb	r8, r8, #0
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d151      	bne.n	800dd06 <_strtod_l+0x3ae>
 800dc62:	2800      	cmp	r0, #0
 800dc64:	f47f aeba 	bne.w	800d9dc <_strtod_l+0x84>
 800dc68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	f47f aeb6 	bne.w	800d9dc <_strtod_l+0x84>
 800dc70:	9b04      	ldr	r3, [sp, #16]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	f47f aed1 	bne.w	800da1a <_strtod_l+0xc2>
 800dc78:	2a4e      	cmp	r2, #78	; 0x4e
 800dc7a:	d027      	beq.n	800dccc <_strtod_l+0x374>
 800dc7c:	dc21      	bgt.n	800dcc2 <_strtod_l+0x36a>
 800dc7e:	2a49      	cmp	r2, #73	; 0x49
 800dc80:	f47f aecb 	bne.w	800da1a <_strtod_l+0xc2>
 800dc84:	499a      	ldr	r1, [pc, #616]	; (800def0 <_strtod_l+0x598>)
 800dc86:	a817      	add	r0, sp, #92	; 0x5c
 800dc88:	f001 fe08 	bl	800f89c <__match>
 800dc8c:	2800      	cmp	r0, #0
 800dc8e:	f43f aec4 	beq.w	800da1a <_strtod_l+0xc2>
 800dc92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dc94:	4997      	ldr	r1, [pc, #604]	; (800def4 <_strtod_l+0x59c>)
 800dc96:	3b01      	subs	r3, #1
 800dc98:	a817      	add	r0, sp, #92	; 0x5c
 800dc9a:	9317      	str	r3, [sp, #92]	; 0x5c
 800dc9c:	f001 fdfe 	bl	800f89c <__match>
 800dca0:	b910      	cbnz	r0, 800dca8 <_strtod_l+0x350>
 800dca2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dca4:	3301      	adds	r3, #1
 800dca6:	9317      	str	r3, [sp, #92]	; 0x5c
 800dca8:	f8df b260 	ldr.w	fp, [pc, #608]	; 800df0c <_strtod_l+0x5b4>
 800dcac:	f04f 0a00 	mov.w	sl, #0
 800dcb0:	e694      	b.n	800d9dc <_strtod_l+0x84>
 800dcb2:	270a      	movs	r7, #10
 800dcb4:	fb07 2808 	mla	r8, r7, r8, r2
 800dcb8:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 800dcbc:	e7b4      	b.n	800dc28 <_strtod_l+0x2d0>
 800dcbe:	46e0      	mov	r8, ip
 800dcc0:	e7c8      	b.n	800dc54 <_strtod_l+0x2fc>
 800dcc2:	2a69      	cmp	r2, #105	; 0x69
 800dcc4:	d0de      	beq.n	800dc84 <_strtod_l+0x32c>
 800dcc6:	2a6e      	cmp	r2, #110	; 0x6e
 800dcc8:	f47f aea7 	bne.w	800da1a <_strtod_l+0xc2>
 800dccc:	498a      	ldr	r1, [pc, #552]	; (800def8 <_strtod_l+0x5a0>)
 800dcce:	a817      	add	r0, sp, #92	; 0x5c
 800dcd0:	f001 fde4 	bl	800f89c <__match>
 800dcd4:	2800      	cmp	r0, #0
 800dcd6:	f43f aea0 	beq.w	800da1a <_strtod_l+0xc2>
 800dcda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dcdc:	781b      	ldrb	r3, [r3, #0]
 800dcde:	2b28      	cmp	r3, #40	; 0x28
 800dce0:	d10e      	bne.n	800dd00 <_strtod_l+0x3a8>
 800dce2:	aa1a      	add	r2, sp, #104	; 0x68
 800dce4:	4985      	ldr	r1, [pc, #532]	; (800defc <_strtod_l+0x5a4>)
 800dce6:	a817      	add	r0, sp, #92	; 0x5c
 800dce8:	f001 fdec 	bl	800f8c4 <__hexnan>
 800dcec:	2805      	cmp	r0, #5
 800dcee:	d107      	bne.n	800dd00 <_strtod_l+0x3a8>
 800dcf0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dcf2:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800dcf6:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800dcfa:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800dcfe:	e66d      	b.n	800d9dc <_strtod_l+0x84>
 800dd00:	f8df b20c 	ldr.w	fp, [pc, #524]	; 800df10 <_strtod_l+0x5b8>
 800dd04:	e7d2      	b.n	800dcac <_strtod_l+0x354>
 800dd06:	eddd 7a08 	vldr	s15, [sp, #32]
 800dd0a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800dd0e:	eba8 0201 	sub.w	r2, r8, r1
 800dd12:	2d00      	cmp	r5, #0
 800dd14:	bf08      	it	eq
 800dd16:	461d      	moveq	r5, r3
 800dd18:	2b10      	cmp	r3, #16
 800dd1a:	9204      	str	r2, [sp, #16]
 800dd1c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800dd20:	461a      	mov	r2, r3
 800dd22:	bfa8      	it	ge
 800dd24:	2210      	movge	r2, #16
 800dd26:	2b09      	cmp	r3, #9
 800dd28:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800dd2c:	dc14      	bgt.n	800dd58 <_strtod_l+0x400>
 800dd2e:	9904      	ldr	r1, [sp, #16]
 800dd30:	2900      	cmp	r1, #0
 800dd32:	f43f ae53 	beq.w	800d9dc <_strtod_l+0x84>
 800dd36:	9904      	ldr	r1, [sp, #16]
 800dd38:	dd72      	ble.n	800de20 <_strtod_l+0x4c8>
 800dd3a:	2916      	cmp	r1, #22
 800dd3c:	dc5a      	bgt.n	800ddf4 <_strtod_l+0x49c>
 800dd3e:	4970      	ldr	r1, [pc, #448]	; (800df00 <_strtod_l+0x5a8>)
 800dd40:	9b04      	ldr	r3, [sp, #16]
 800dd42:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dd46:	ed91 7b00 	vldr	d7, [r1]
 800dd4a:	ec4b ab16 	vmov	d6, sl, fp
 800dd4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dd52:	ec5b ab17 	vmov	sl, fp, d7
 800dd56:	e641      	b.n	800d9dc <_strtod_l+0x84>
 800dd58:	4969      	ldr	r1, [pc, #420]	; (800df00 <_strtod_l+0x5a8>)
 800dd5a:	eddd 7a06 	vldr	s15, [sp, #24]
 800dd5e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800dd62:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 800dd66:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800dd6a:	2b0f      	cmp	r3, #15
 800dd6c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800dd70:	eea5 7b06 	vfma.f64	d7, d5, d6
 800dd74:	ec5b ab17 	vmov	sl, fp, d7
 800dd78:	ddd9      	ble.n	800dd2e <_strtod_l+0x3d6>
 800dd7a:	9904      	ldr	r1, [sp, #16]
 800dd7c:	1a9a      	subs	r2, r3, r2
 800dd7e:	440a      	add	r2, r1
 800dd80:	2a00      	cmp	r2, #0
 800dd82:	f340 8096 	ble.w	800deb2 <_strtod_l+0x55a>
 800dd86:	f012 000f 	ands.w	r0, r2, #15
 800dd8a:	d00a      	beq.n	800dda2 <_strtod_l+0x44a>
 800dd8c:	495c      	ldr	r1, [pc, #368]	; (800df00 <_strtod_l+0x5a8>)
 800dd8e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800dd92:	ed91 7b00 	vldr	d7, [r1]
 800dd96:	ec4b ab16 	vmov	d6, sl, fp
 800dd9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dd9e:	ec5b ab17 	vmov	sl, fp, d7
 800dda2:	f032 020f 	bics.w	r2, r2, #15
 800dda6:	d072      	beq.n	800de8e <_strtod_l+0x536>
 800dda8:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800ddac:	dd45      	ble.n	800de3a <_strtod_l+0x4e2>
 800ddae:	2500      	movs	r5, #0
 800ddb0:	46a8      	mov	r8, r5
 800ddb2:	9506      	str	r5, [sp, #24]
 800ddb4:	46a9      	mov	r9, r5
 800ddb6:	2322      	movs	r3, #34	; 0x22
 800ddb8:	f8df b150 	ldr.w	fp, [pc, #336]	; 800df0c <_strtod_l+0x5b4>
 800ddbc:	6023      	str	r3, [r4, #0]
 800ddbe:	f04f 0a00 	mov.w	sl, #0
 800ddc2:	9b06      	ldr	r3, [sp, #24]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	f43f ae09 	beq.w	800d9dc <_strtod_l+0x84>
 800ddca:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ddcc:	4620      	mov	r0, r4
 800ddce:	f001 feee 	bl	800fbae <_Bfree>
 800ddd2:	4649      	mov	r1, r9
 800ddd4:	4620      	mov	r0, r4
 800ddd6:	f001 feea 	bl	800fbae <_Bfree>
 800ddda:	4641      	mov	r1, r8
 800dddc:	4620      	mov	r0, r4
 800ddde:	f001 fee6 	bl	800fbae <_Bfree>
 800dde2:	9906      	ldr	r1, [sp, #24]
 800dde4:	4620      	mov	r0, r4
 800dde6:	f001 fee2 	bl	800fbae <_Bfree>
 800ddea:	4629      	mov	r1, r5
 800ddec:	4620      	mov	r0, r4
 800ddee:	f001 fede 	bl	800fbae <_Bfree>
 800ddf2:	e5f3      	b.n	800d9dc <_strtod_l+0x84>
 800ddf4:	9804      	ldr	r0, [sp, #16]
 800ddf6:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800ddfa:	4281      	cmp	r1, r0
 800ddfc:	dbbd      	blt.n	800dd7a <_strtod_l+0x422>
 800ddfe:	4a40      	ldr	r2, [pc, #256]	; (800df00 <_strtod_l+0x5a8>)
 800de00:	f1c3 030f 	rsb	r3, r3, #15
 800de04:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800de08:	ed91 7b00 	vldr	d7, [r1]
 800de0c:	ec4b ab16 	vmov	d6, sl, fp
 800de10:	1ac3      	subs	r3, r0, r3
 800de12:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800de16:	ee27 7b06 	vmul.f64	d7, d7, d6
 800de1a:	ed92 6b00 	vldr	d6, [r2]
 800de1e:	e796      	b.n	800dd4e <_strtod_l+0x3f6>
 800de20:	3116      	adds	r1, #22
 800de22:	dbaa      	blt.n	800dd7a <_strtod_l+0x422>
 800de24:	4936      	ldr	r1, [pc, #216]	; (800df00 <_strtod_l+0x5a8>)
 800de26:	9b04      	ldr	r3, [sp, #16]
 800de28:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 800de2c:	ed91 7b00 	vldr	d7, [r1]
 800de30:	ec4b ab16 	vmov	d6, sl, fp
 800de34:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800de38:	e78b      	b.n	800dd52 <_strtod_l+0x3fa>
 800de3a:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800de3e:	2000      	movs	r0, #0
 800de40:	4e30      	ldr	r6, [pc, #192]	; (800df04 <_strtod_l+0x5ac>)
 800de42:	1112      	asrs	r2, r2, #4
 800de44:	4601      	mov	r1, r0
 800de46:	2a01      	cmp	r2, #1
 800de48:	dc23      	bgt.n	800de92 <_strtod_l+0x53a>
 800de4a:	b108      	cbz	r0, 800de50 <_strtod_l+0x4f8>
 800de4c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800de50:	4a2c      	ldr	r2, [pc, #176]	; (800df04 <_strtod_l+0x5ac>)
 800de52:	482d      	ldr	r0, [pc, #180]	; (800df08 <_strtod_l+0x5b0>)
 800de54:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800de58:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800de5c:	ed91 7b00 	vldr	d7, [r1]
 800de60:	ec4b ab16 	vmov	d6, sl, fp
 800de64:	ee27 7b06 	vmul.f64	d7, d7, d6
 800de68:	ed8d 7b06 	vstr	d7, [sp, #24]
 800de6c:	9907      	ldr	r1, [sp, #28]
 800de6e:	4a27      	ldr	r2, [pc, #156]	; (800df0c <_strtod_l+0x5b4>)
 800de70:	400a      	ands	r2, r1
 800de72:	4282      	cmp	r2, r0
 800de74:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800de78:	d899      	bhi.n	800ddae <_strtod_l+0x456>
 800de7a:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800de7e:	4282      	cmp	r2, r0
 800de80:	bf86      	itte	hi
 800de82:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 800df14 <_strtod_l+0x5bc>
 800de86:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800de8a:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 800de8e:	2700      	movs	r7, #0
 800de90:	e070      	b.n	800df74 <_strtod_l+0x61c>
 800de92:	07d7      	lsls	r7, r2, #31
 800de94:	d50a      	bpl.n	800deac <_strtod_l+0x554>
 800de96:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 800de9a:	ed90 7b00 	vldr	d7, [r0]
 800de9e:	ed9d 6b06 	vldr	d6, [sp, #24]
 800dea2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800dea6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800deaa:	2001      	movs	r0, #1
 800deac:	3101      	adds	r1, #1
 800deae:	1052      	asrs	r2, r2, #1
 800deb0:	e7c9      	b.n	800de46 <_strtod_l+0x4ee>
 800deb2:	d0ec      	beq.n	800de8e <_strtod_l+0x536>
 800deb4:	4252      	negs	r2, r2
 800deb6:	f012 000f 	ands.w	r0, r2, #15
 800deba:	d00a      	beq.n	800ded2 <_strtod_l+0x57a>
 800debc:	4910      	ldr	r1, [pc, #64]	; (800df00 <_strtod_l+0x5a8>)
 800debe:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800dec2:	ed91 7b00 	vldr	d7, [r1]
 800dec6:	ec4b ab16 	vmov	d6, sl, fp
 800deca:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800dece:	ec5b ab17 	vmov	sl, fp, d7
 800ded2:	1112      	asrs	r2, r2, #4
 800ded4:	d0db      	beq.n	800de8e <_strtod_l+0x536>
 800ded6:	2a1f      	cmp	r2, #31
 800ded8:	dd1e      	ble.n	800df18 <_strtod_l+0x5c0>
 800deda:	2500      	movs	r5, #0
 800dedc:	46a8      	mov	r8, r5
 800dede:	9506      	str	r5, [sp, #24]
 800dee0:	46a9      	mov	r9, r5
 800dee2:	2322      	movs	r3, #34	; 0x22
 800dee4:	f04f 0a00 	mov.w	sl, #0
 800dee8:	f04f 0b00 	mov.w	fp, #0
 800deec:	6023      	str	r3, [r4, #0]
 800deee:	e768      	b.n	800ddc2 <_strtod_l+0x46a>
 800def0:	08011d25 	.word	0x08011d25
 800def4:	08011db3 	.word	0x08011db3
 800def8:	08011d2d 	.word	0x08011d2d
 800defc:	08011d70 	.word	0x08011d70
 800df00:	08011df0 	.word	0x08011df0
 800df04:	08011dc8 	.word	0x08011dc8
 800df08:	7ca00000 	.word	0x7ca00000
 800df0c:	7ff00000 	.word	0x7ff00000
 800df10:	fff80000 	.word	0xfff80000
 800df14:	7fefffff 	.word	0x7fefffff
 800df18:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800df1c:	f012 0710 	ands.w	r7, r2, #16
 800df20:	49ab      	ldr	r1, [pc, #684]	; (800e1d0 <_strtod_l+0x878>)
 800df22:	bf18      	it	ne
 800df24:	276a      	movne	r7, #106	; 0x6a
 800df26:	2000      	movs	r0, #0
 800df28:	2a00      	cmp	r2, #0
 800df2a:	f300 8113 	bgt.w	800e154 <_strtod_l+0x7fc>
 800df2e:	b108      	cbz	r0, 800df34 <_strtod_l+0x5dc>
 800df30:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800df34:	b1bf      	cbz	r7, 800df66 <_strtod_l+0x60e>
 800df36:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800df3a:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 800df3e:	2a00      	cmp	r2, #0
 800df40:	4659      	mov	r1, fp
 800df42:	dd10      	ble.n	800df66 <_strtod_l+0x60e>
 800df44:	2a1f      	cmp	r2, #31
 800df46:	f340 8113 	ble.w	800e170 <_strtod_l+0x818>
 800df4a:	2a34      	cmp	r2, #52	; 0x34
 800df4c:	bfde      	ittt	le
 800df4e:	3a20      	suble	r2, #32
 800df50:	f04f 30ff 	movle.w	r0, #4294967295	; 0xffffffff
 800df54:	fa00 f202 	lslle.w	r2, r0, r2
 800df58:	f04f 0a00 	mov.w	sl, #0
 800df5c:	bfcc      	ite	gt
 800df5e:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800df62:	ea02 0b01 	andle.w	fp, r2, r1
 800df66:	ec4b ab17 	vmov	d7, sl, fp
 800df6a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800df6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df72:	d0b2      	beq.n	800deda <_strtod_l+0x582>
 800df74:	9a08      	ldr	r2, [sp, #32]
 800df76:	9200      	str	r2, [sp, #0]
 800df78:	990c      	ldr	r1, [sp, #48]	; 0x30
 800df7a:	462a      	mov	r2, r5
 800df7c:	4620      	mov	r0, r4
 800df7e:	f001 fe68 	bl	800fc52 <__s2b>
 800df82:	9006      	str	r0, [sp, #24]
 800df84:	2800      	cmp	r0, #0
 800df86:	f43f af12 	beq.w	800ddae <_strtod_l+0x456>
 800df8a:	9a04      	ldr	r2, [sp, #16]
 800df8c:	9b04      	ldr	r3, [sp, #16]
 800df8e:	2a00      	cmp	r2, #0
 800df90:	f1c3 0300 	rsb	r3, r3, #0
 800df94:	ed9f 9b88 	vldr	d9, [pc, #544]	; 800e1b8 <_strtod_l+0x860>
 800df98:	bfa8      	it	ge
 800df9a:	2300      	movge	r3, #0
 800df9c:	ed9f ab88 	vldr	d10, [pc, #544]	; 800e1c0 <_strtod_l+0x868>
 800dfa0:	ed9f bb89 	vldr	d11, [pc, #548]	; 800e1c8 <_strtod_l+0x870>
 800dfa4:	930e      	str	r3, [sp, #56]	; 0x38
 800dfa6:	2500      	movs	r5, #0
 800dfa8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800dfac:	9310      	str	r3, [sp, #64]	; 0x40
 800dfae:	46a8      	mov	r8, r5
 800dfb0:	9b06      	ldr	r3, [sp, #24]
 800dfb2:	4620      	mov	r0, r4
 800dfb4:	6859      	ldr	r1, [r3, #4]
 800dfb6:	f001 fdc6 	bl	800fb46 <_Balloc>
 800dfba:	4681      	mov	r9, r0
 800dfbc:	2800      	cmp	r0, #0
 800dfbe:	f43f aefa 	beq.w	800ddb6 <_strtod_l+0x45e>
 800dfc2:	9b06      	ldr	r3, [sp, #24]
 800dfc4:	691a      	ldr	r2, [r3, #16]
 800dfc6:	3202      	adds	r2, #2
 800dfc8:	f103 010c 	add.w	r1, r3, #12
 800dfcc:	0092      	lsls	r2, r2, #2
 800dfce:	300c      	adds	r0, #12
 800dfd0:	f001 fdac 	bl	800fb2c <memcpy>
 800dfd4:	aa1a      	add	r2, sp, #104	; 0x68
 800dfd6:	a919      	add	r1, sp, #100	; 0x64
 800dfd8:	ec4b ab10 	vmov	d0, sl, fp
 800dfdc:	4620      	mov	r0, r4
 800dfde:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800dfe2:	f002 f8f1 	bl	80101c8 <__d2b>
 800dfe6:	9018      	str	r0, [sp, #96]	; 0x60
 800dfe8:	2800      	cmp	r0, #0
 800dfea:	f43f aee4 	beq.w	800ddb6 <_strtod_l+0x45e>
 800dfee:	2101      	movs	r1, #1
 800dff0:	4620      	mov	r0, r4
 800dff2:	f001 feba 	bl	800fd6a <__i2b>
 800dff6:	4680      	mov	r8, r0
 800dff8:	2800      	cmp	r0, #0
 800dffa:	f43f aedc 	beq.w	800ddb6 <_strtod_l+0x45e>
 800dffe:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800e000:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e002:	2e00      	cmp	r6, #0
 800e004:	bfb1      	iteee	lt
 800e006:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 800e008:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800e00a:	9810      	ldrge	r0, [sp, #64]	; 0x40
 800e00c:	18f3      	addge	r3, r6, r3
 800e00e:	bfba      	itte	lt
 800e010:	1b98      	sublt	r0, r3, r6
 800e012:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800e014:	9308      	strge	r3, [sp, #32]
 800e016:	eba6 0607 	sub.w	r6, r6, r7
 800e01a:	bfb8      	it	lt
 800e01c:	9308      	strlt	r3, [sp, #32]
 800e01e:	4416      	add	r6, r2
 800e020:	4b6c      	ldr	r3, [pc, #432]	; (800e1d4 <_strtod_l+0x87c>)
 800e022:	3e01      	subs	r6, #1
 800e024:	429e      	cmp	r6, r3
 800e026:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e02a:	f280 80b4 	bge.w	800e196 <_strtod_l+0x83e>
 800e02e:	1b9b      	subs	r3, r3, r6
 800e030:	2b1f      	cmp	r3, #31
 800e032:	eba2 0203 	sub.w	r2, r2, r3
 800e036:	f04f 0101 	mov.w	r1, #1
 800e03a:	f300 80a0 	bgt.w	800e17e <_strtod_l+0x826>
 800e03e:	fa01 f303 	lsl.w	r3, r1, r3
 800e042:	9311      	str	r3, [sp, #68]	; 0x44
 800e044:	2300      	movs	r3, #0
 800e046:	930f      	str	r3, [sp, #60]	; 0x3c
 800e048:	9b08      	ldr	r3, [sp, #32]
 800e04a:	4413      	add	r3, r2
 800e04c:	4402      	add	r2, r0
 800e04e:	18be      	adds	r6, r7, r2
 800e050:	9a08      	ldr	r2, [sp, #32]
 800e052:	429a      	cmp	r2, r3
 800e054:	bfa8      	it	ge
 800e056:	461a      	movge	r2, r3
 800e058:	42b2      	cmp	r2, r6
 800e05a:	bfa8      	it	ge
 800e05c:	4632      	movge	r2, r6
 800e05e:	2a00      	cmp	r2, #0
 800e060:	dd04      	ble.n	800e06c <_strtod_l+0x714>
 800e062:	9908      	ldr	r1, [sp, #32]
 800e064:	1a9b      	subs	r3, r3, r2
 800e066:	1ab6      	subs	r6, r6, r2
 800e068:	1a8a      	subs	r2, r1, r2
 800e06a:	9208      	str	r2, [sp, #32]
 800e06c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e06e:	b1c2      	cbz	r2, 800e0a2 <_strtod_l+0x74a>
 800e070:	4641      	mov	r1, r8
 800e072:	4620      	mov	r0, r4
 800e074:	9315      	str	r3, [sp, #84]	; 0x54
 800e076:	f001 ff17 	bl	800fea8 <__pow5mult>
 800e07a:	4680      	mov	r8, r0
 800e07c:	2800      	cmp	r0, #0
 800e07e:	f43f ae9a 	beq.w	800ddb6 <_strtod_l+0x45e>
 800e082:	4601      	mov	r1, r0
 800e084:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e086:	4620      	mov	r0, r4
 800e088:	f001 fe78 	bl	800fd7c <__multiply>
 800e08c:	900c      	str	r0, [sp, #48]	; 0x30
 800e08e:	2800      	cmp	r0, #0
 800e090:	f43f ae91 	beq.w	800ddb6 <_strtod_l+0x45e>
 800e094:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e096:	4620      	mov	r0, r4
 800e098:	f001 fd89 	bl	800fbae <_Bfree>
 800e09c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e09e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e0a0:	9218      	str	r2, [sp, #96]	; 0x60
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	dc7c      	bgt.n	800e1a0 <_strtod_l+0x848>
 800e0a6:	9b04      	ldr	r3, [sp, #16]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	dd08      	ble.n	800e0be <_strtod_l+0x766>
 800e0ac:	4649      	mov	r1, r9
 800e0ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e0b0:	4620      	mov	r0, r4
 800e0b2:	f001 fef9 	bl	800fea8 <__pow5mult>
 800e0b6:	4681      	mov	r9, r0
 800e0b8:	2800      	cmp	r0, #0
 800e0ba:	f43f ae7c 	beq.w	800ddb6 <_strtod_l+0x45e>
 800e0be:	2e00      	cmp	r6, #0
 800e0c0:	dd08      	ble.n	800e0d4 <_strtod_l+0x77c>
 800e0c2:	4649      	mov	r1, r9
 800e0c4:	4632      	mov	r2, r6
 800e0c6:	4620      	mov	r0, r4
 800e0c8:	f001 ff3c 	bl	800ff44 <__lshift>
 800e0cc:	4681      	mov	r9, r0
 800e0ce:	2800      	cmp	r0, #0
 800e0d0:	f43f ae71 	beq.w	800ddb6 <_strtod_l+0x45e>
 800e0d4:	9b08      	ldr	r3, [sp, #32]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	dd08      	ble.n	800e0ec <_strtod_l+0x794>
 800e0da:	4641      	mov	r1, r8
 800e0dc:	461a      	mov	r2, r3
 800e0de:	4620      	mov	r0, r4
 800e0e0:	f001 ff30 	bl	800ff44 <__lshift>
 800e0e4:	4680      	mov	r8, r0
 800e0e6:	2800      	cmp	r0, #0
 800e0e8:	f43f ae65 	beq.w	800ddb6 <_strtod_l+0x45e>
 800e0ec:	464a      	mov	r2, r9
 800e0ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e0f0:	4620      	mov	r0, r4
 800e0f2:	f001 ff95 	bl	8010020 <__mdiff>
 800e0f6:	4605      	mov	r5, r0
 800e0f8:	2800      	cmp	r0, #0
 800e0fa:	f43f ae5c 	beq.w	800ddb6 <_strtod_l+0x45e>
 800e0fe:	68c3      	ldr	r3, [r0, #12]
 800e100:	930c      	str	r3, [sp, #48]	; 0x30
 800e102:	2300      	movs	r3, #0
 800e104:	60c3      	str	r3, [r0, #12]
 800e106:	4641      	mov	r1, r8
 800e108:	f001 ff70 	bl	800ffec <__mcmp>
 800e10c:	2800      	cmp	r0, #0
 800e10e:	da63      	bge.n	800e1d8 <_strtod_l+0x880>
 800e110:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e112:	b9e3      	cbnz	r3, 800e14e <_strtod_l+0x7f6>
 800e114:	f1ba 0f00 	cmp.w	sl, #0
 800e118:	d119      	bne.n	800e14e <_strtod_l+0x7f6>
 800e11a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e11e:	b9b3      	cbnz	r3, 800e14e <_strtod_l+0x7f6>
 800e120:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e124:	0d1b      	lsrs	r3, r3, #20
 800e126:	051b      	lsls	r3, r3, #20
 800e128:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e12c:	d90f      	bls.n	800e14e <_strtod_l+0x7f6>
 800e12e:	696b      	ldr	r3, [r5, #20]
 800e130:	b913      	cbnz	r3, 800e138 <_strtod_l+0x7e0>
 800e132:	692b      	ldr	r3, [r5, #16]
 800e134:	2b01      	cmp	r3, #1
 800e136:	dd0a      	ble.n	800e14e <_strtod_l+0x7f6>
 800e138:	4629      	mov	r1, r5
 800e13a:	2201      	movs	r2, #1
 800e13c:	4620      	mov	r0, r4
 800e13e:	f001 ff01 	bl	800ff44 <__lshift>
 800e142:	4641      	mov	r1, r8
 800e144:	4605      	mov	r5, r0
 800e146:	f001 ff51 	bl	800ffec <__mcmp>
 800e14a:	2800      	cmp	r0, #0
 800e14c:	dc75      	bgt.n	800e23a <_strtod_l+0x8e2>
 800e14e:	2f00      	cmp	r7, #0
 800e150:	d17f      	bne.n	800e252 <_strtod_l+0x8fa>
 800e152:	e63a      	b.n	800ddca <_strtod_l+0x472>
 800e154:	07d6      	lsls	r6, r2, #31
 800e156:	d508      	bpl.n	800e16a <_strtod_l+0x812>
 800e158:	ed9d 6b06 	vldr	d6, [sp, #24]
 800e15c:	ed91 7b00 	vldr	d7, [r1]
 800e160:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e164:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e168:	2001      	movs	r0, #1
 800e16a:	1052      	asrs	r2, r2, #1
 800e16c:	3108      	adds	r1, #8
 800e16e:	e6db      	b.n	800df28 <_strtod_l+0x5d0>
 800e170:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e174:	fa01 f202 	lsl.w	r2, r1, r2
 800e178:	ea02 0a0a 	and.w	sl, r2, sl
 800e17c:	e6f3      	b.n	800df66 <_strtod_l+0x60e>
 800e17e:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800e182:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800e186:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800e18a:	36e2      	adds	r6, #226	; 0xe2
 800e18c:	fa01 f306 	lsl.w	r3, r1, r6
 800e190:	930f      	str	r3, [sp, #60]	; 0x3c
 800e192:	9111      	str	r1, [sp, #68]	; 0x44
 800e194:	e758      	b.n	800e048 <_strtod_l+0x6f0>
 800e196:	2300      	movs	r3, #0
 800e198:	930f      	str	r3, [sp, #60]	; 0x3c
 800e19a:	2301      	movs	r3, #1
 800e19c:	9311      	str	r3, [sp, #68]	; 0x44
 800e19e:	e753      	b.n	800e048 <_strtod_l+0x6f0>
 800e1a0:	461a      	mov	r2, r3
 800e1a2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e1a4:	4620      	mov	r0, r4
 800e1a6:	f001 fecd 	bl	800ff44 <__lshift>
 800e1aa:	9018      	str	r0, [sp, #96]	; 0x60
 800e1ac:	2800      	cmp	r0, #0
 800e1ae:	f47f af7a 	bne.w	800e0a6 <_strtod_l+0x74e>
 800e1b2:	e600      	b.n	800ddb6 <_strtod_l+0x45e>
 800e1b4:	f3af 8000 	nop.w
 800e1b8:	94a03595 	.word	0x94a03595
 800e1bc:	3fdfffff 	.word	0x3fdfffff
 800e1c0:	35afe535 	.word	0x35afe535
 800e1c4:	3fe00000 	.word	0x3fe00000
 800e1c8:	94a03595 	.word	0x94a03595
 800e1cc:	3fcfffff 	.word	0x3fcfffff
 800e1d0:	08011d88 	.word	0x08011d88
 800e1d4:	fffffc02 	.word	0xfffffc02
 800e1d8:	f8cd b020 	str.w	fp, [sp, #32]
 800e1dc:	f040 8085 	bne.w	800e2ea <_strtod_l+0x992>
 800e1e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e1e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e1e6:	b322      	cbz	r2, 800e232 <_strtod_l+0x8da>
 800e1e8:	4ab7      	ldr	r2, [pc, #732]	; (800e4c8 <_strtod_l+0xb70>)
 800e1ea:	4293      	cmp	r3, r2
 800e1ec:	d154      	bne.n	800e298 <_strtod_l+0x940>
 800e1ee:	4651      	mov	r1, sl
 800e1f0:	b1e7      	cbz	r7, 800e22c <_strtod_l+0x8d4>
 800e1f2:	4bb6      	ldr	r3, [pc, #728]	; (800e4cc <_strtod_l+0xb74>)
 800e1f4:	465a      	mov	r2, fp
 800e1f6:	4013      	ands	r3, r2
 800e1f8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e1fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e200:	d803      	bhi.n	800e20a <_strtod_l+0x8b2>
 800e202:	0d1b      	lsrs	r3, r3, #20
 800e204:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e208:	409a      	lsls	r2, r3
 800e20a:	4291      	cmp	r1, r2
 800e20c:	d144      	bne.n	800e298 <_strtod_l+0x940>
 800e20e:	4bb0      	ldr	r3, [pc, #704]	; (800e4d0 <_strtod_l+0xb78>)
 800e210:	9a08      	ldr	r2, [sp, #32]
 800e212:	429a      	cmp	r2, r3
 800e214:	d102      	bne.n	800e21c <_strtod_l+0x8c4>
 800e216:	3101      	adds	r1, #1
 800e218:	f43f adcd 	beq.w	800ddb6 <_strtod_l+0x45e>
 800e21c:	4bab      	ldr	r3, [pc, #684]	; (800e4cc <_strtod_l+0xb74>)
 800e21e:	9a08      	ldr	r2, [sp, #32]
 800e220:	401a      	ands	r2, r3
 800e222:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 800e226:	f04f 0a00 	mov.w	sl, #0
 800e22a:	e790      	b.n	800e14e <_strtod_l+0x7f6>
 800e22c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e230:	e7eb      	b.n	800e20a <_strtod_l+0x8b2>
 800e232:	bb8b      	cbnz	r3, 800e298 <_strtod_l+0x940>
 800e234:	f1ba 0f00 	cmp.w	sl, #0
 800e238:	d12e      	bne.n	800e298 <_strtod_l+0x940>
 800e23a:	465b      	mov	r3, fp
 800e23c:	4aa3      	ldr	r2, [pc, #652]	; (800e4cc <_strtod_l+0xb74>)
 800e23e:	b30f      	cbz	r7, 800e284 <_strtod_l+0x92c>
 800e240:	ea02 010b 	and.w	r1, r2, fp
 800e244:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e248:	dc1c      	bgt.n	800e284 <_strtod_l+0x92c>
 800e24a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e24e:	f77f ae48 	ble.w	800dee2 <_strtod_l+0x58a>
 800e252:	4aa0      	ldr	r2, [pc, #640]	; (800e4d4 <_strtod_l+0xb7c>)
 800e254:	2300      	movs	r3, #0
 800e256:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 800e25a:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 800e25e:	ec4b ab17 	vmov	d7, sl, fp
 800e262:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e266:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e26a:	9b05      	ldr	r3, [sp, #20]
 800e26c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e270:	2b00      	cmp	r3, #0
 800e272:	f47f adaa 	bne.w	800ddca <_strtod_l+0x472>
 800e276:	9b04      	ldr	r3, [sp, #16]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	f47f ada6 	bne.w	800ddca <_strtod_l+0x472>
 800e27e:	2322      	movs	r3, #34	; 0x22
 800e280:	6023      	str	r3, [r4, #0]
 800e282:	e5a2      	b.n	800ddca <_strtod_l+0x472>
 800e284:	4013      	ands	r3, r2
 800e286:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e28a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e28e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e292:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800e296:	e75a      	b.n	800e14e <_strtod_l+0x7f6>
 800e298:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e29a:	b18b      	cbz	r3, 800e2c0 <_strtod_l+0x968>
 800e29c:	9a08      	ldr	r2, [sp, #32]
 800e29e:	4213      	tst	r3, r2
 800e2a0:	f43f af55 	beq.w	800e14e <_strtod_l+0x7f6>
 800e2a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e2a6:	463a      	mov	r2, r7
 800e2a8:	4650      	mov	r0, sl
 800e2aa:	4659      	mov	r1, fp
 800e2ac:	b163      	cbz	r3, 800e2c8 <_strtod_l+0x970>
 800e2ae:	f7ff fb36 	bl	800d91e <sulp>
 800e2b2:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800e2b6:	ee37 7b00 	vadd.f64	d7, d7, d0
 800e2ba:	ec5b ab17 	vmov	sl, fp, d7
 800e2be:	e746      	b.n	800e14e <_strtod_l+0x7f6>
 800e2c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e2c2:	ea13 0f0a 	tst.w	r3, sl
 800e2c6:	e7eb      	b.n	800e2a0 <_strtod_l+0x948>
 800e2c8:	f7ff fb29 	bl	800d91e <sulp>
 800e2cc:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800e2d0:	ee37 7b40 	vsub.f64	d7, d7, d0
 800e2d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e2d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e2dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2e0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e2e4:	f43f adfd 	beq.w	800dee2 <_strtod_l+0x58a>
 800e2e8:	e731      	b.n	800e14e <_strtod_l+0x7f6>
 800e2ea:	4641      	mov	r1, r8
 800e2ec:	4628      	mov	r0, r5
 800e2ee:	f001 ffba 	bl	8010266 <__ratio>
 800e2f2:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800e2f6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e2fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2fe:	d869      	bhi.n	800e3d4 <_strtod_l+0xa7c>
 800e300:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e302:	2b00      	cmp	r3, #0
 800e304:	d045      	beq.n	800e392 <_strtod_l+0xa3a>
 800e306:	4b74      	ldr	r3, [pc, #464]	; (800e4d8 <_strtod_l+0xb80>)
 800e308:	2200      	movs	r2, #0
 800e30a:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800e30e:	9808      	ldr	r0, [sp, #32]
 800e310:	496e      	ldr	r1, [pc, #440]	; (800e4cc <_strtod_l+0xb74>)
 800e312:	ea00 0601 	and.w	r6, r0, r1
 800e316:	4871      	ldr	r0, [pc, #452]	; (800e4dc <_strtod_l+0xb84>)
 800e318:	4286      	cmp	r6, r0
 800e31a:	f040 8089 	bne.w	800e430 <_strtod_l+0xad8>
 800e31e:	910f      	str	r1, [sp, #60]	; 0x3c
 800e320:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e324:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800e328:	9908      	ldr	r1, [sp, #32]
 800e32a:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 800e32e:	ec4b ab10 	vmov	d0, sl, fp
 800e332:	ec43 2b1c 	vmov	d12, r2, r3
 800e336:	f001 fed1 	bl	80100dc <__ulp>
 800e33a:	ec4b ab1d 	vmov	d13, sl, fp
 800e33e:	eeac db00 	vfma.f64	d13, d12, d0
 800e342:	ed8d db08 	vstr	d13, [sp, #32]
 800e346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e348:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e34a:	4a65      	ldr	r2, [pc, #404]	; (800e4e0 <_strtod_l+0xb88>)
 800e34c:	4019      	ands	r1, r3
 800e34e:	4291      	cmp	r1, r2
 800e350:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 800e354:	d948      	bls.n	800e3e8 <_strtod_l+0xa90>
 800e356:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e358:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e35c:	4293      	cmp	r3, r2
 800e35e:	d103      	bne.n	800e368 <_strtod_l+0xa10>
 800e360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e362:	3301      	adds	r3, #1
 800e364:	f43f ad27 	beq.w	800ddb6 <_strtod_l+0x45e>
 800e368:	f8df b164 	ldr.w	fp, [pc, #356]	; 800e4d0 <_strtod_l+0xb78>
 800e36c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800e370:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e372:	4620      	mov	r0, r4
 800e374:	f001 fc1b 	bl	800fbae <_Bfree>
 800e378:	4649      	mov	r1, r9
 800e37a:	4620      	mov	r0, r4
 800e37c:	f001 fc17 	bl	800fbae <_Bfree>
 800e380:	4641      	mov	r1, r8
 800e382:	4620      	mov	r0, r4
 800e384:	f001 fc13 	bl	800fbae <_Bfree>
 800e388:	4629      	mov	r1, r5
 800e38a:	4620      	mov	r0, r4
 800e38c:	f001 fc0f 	bl	800fbae <_Bfree>
 800e390:	e60e      	b.n	800dfb0 <_strtod_l+0x658>
 800e392:	f1ba 0f00 	cmp.w	sl, #0
 800e396:	d113      	bne.n	800e3c0 <_strtod_l+0xa68>
 800e398:	9b08      	ldr	r3, [sp, #32]
 800e39a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e39e:	b9b3      	cbnz	r3, 800e3ce <_strtod_l+0xa76>
 800e3a0:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800e3a4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e3a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3ac:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800e3b0:	d401      	bmi.n	800e3b6 <_strtod_l+0xa5e>
 800e3b2:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e3b6:	eeb1 7b48 	vneg.f64	d7, d8
 800e3ba:	ec53 2b17 	vmov	r2, r3, d7
 800e3be:	e7a6      	b.n	800e30e <_strtod_l+0x9b6>
 800e3c0:	f1ba 0f01 	cmp.w	sl, #1
 800e3c4:	d103      	bne.n	800e3ce <_strtod_l+0xa76>
 800e3c6:	9b08      	ldr	r3, [sp, #32]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	f43f ad8a 	beq.w	800dee2 <_strtod_l+0x58a>
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	4b44      	ldr	r3, [pc, #272]	; (800e4e4 <_strtod_l+0xb8c>)
 800e3d2:	e79a      	b.n	800e30a <_strtod_l+0x9b2>
 800e3d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e3d6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800e3da:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d0e9      	beq.n	800e3b6 <_strtod_l+0xa5e>
 800e3e2:	ec53 2b18 	vmov	r2, r3, d8
 800e3e6:	e792      	b.n	800e30e <_strtod_l+0x9b6>
 800e3e8:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e3ec:	2f00      	cmp	r7, #0
 800e3ee:	d1bf      	bne.n	800e370 <_strtod_l+0xa18>
 800e3f0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e3f4:	0d1b      	lsrs	r3, r3, #20
 800e3f6:	051b      	lsls	r3, r3, #20
 800e3f8:	429e      	cmp	r6, r3
 800e3fa:	d1b9      	bne.n	800e370 <_strtod_l+0xa18>
 800e3fc:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 800e400:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e402:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 800e406:	ee38 8b40 	vsub.f64	d8, d8, d0
 800e40a:	b92b      	cbnz	r3, 800e418 <_strtod_l+0xac0>
 800e40c:	f1ba 0f00 	cmp.w	sl, #0
 800e410:	d102      	bne.n	800e418 <_strtod_l+0xac0>
 800e412:	f3cb 0213 	ubfx	r2, fp, #0, #20
 800e416:	b3d2      	cbz	r2, 800e48e <_strtod_l+0xb36>
 800e418:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800e41c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e420:	f53f acd3 	bmi.w	800ddca <_strtod_l+0x472>
 800e424:	eeb4 8bca 	vcmpe.f64	d8, d10
 800e428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e42c:	dda0      	ble.n	800e370 <_strtod_l+0xa18>
 800e42e:	e4cc      	b.n	800ddca <_strtod_l+0x472>
 800e430:	b1ef      	cbz	r7, 800e46e <_strtod_l+0xb16>
 800e432:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 800e436:	d81a      	bhi.n	800e46e <_strtod_l+0xb16>
 800e438:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800e4c0 <_strtod_l+0xb68>
 800e43c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e444:	d810      	bhi.n	800e468 <_strtod_l+0xb10>
 800e446:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 800e44a:	ee17 3a90 	vmov	r3, s15
 800e44e:	2b00      	cmp	r3, #0
 800e450:	bf08      	it	eq
 800e452:	2301      	moveq	r3, #1
 800e454:	ee07 3a90 	vmov	s15, r3
 800e458:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e45a:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 800e45e:	b99b      	cbnz	r3, 800e488 <_strtod_l+0xb30>
 800e460:	eeb1 7b48 	vneg.f64	d7, d8
 800e464:	ec53 2b17 	vmov	r2, r3, d7
 800e468:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 800e46c:	1b8b      	subs	r3, r1, r6
 800e46e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e472:	ec43 2b1c 	vmov	d12, r2, r3
 800e476:	f001 fe31 	bl	80100dc <__ulp>
 800e47a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800e47e:	eeac 7b00 	vfma.f64	d7, d12, d0
 800e482:	ec5b ab17 	vmov	sl, fp, d7
 800e486:	e7b1      	b.n	800e3ec <_strtod_l+0xa94>
 800e488:	ec53 2b18 	vmov	r2, r3, d8
 800e48c:	e7ec      	b.n	800e468 <_strtod_l+0xb10>
 800e48e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800e492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e496:	f57f af6b 	bpl.w	800e370 <_strtod_l+0xa18>
 800e49a:	e496      	b.n	800ddca <_strtod_l+0x472>
 800e49c:	2300      	movs	r3, #0
 800e49e:	930d      	str	r3, [sp, #52]	; 0x34
 800e4a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e4a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e4a4:	6013      	str	r3, [r2, #0]
 800e4a6:	f7ff ba9d 	b.w	800d9e4 <_strtod_l+0x8c>
 800e4aa:	2a65      	cmp	r2, #101	; 0x65
 800e4ac:	f04f 0100 	mov.w	r1, #0
 800e4b0:	f43f ab97 	beq.w	800dbe2 <_strtod_l+0x28a>
 800e4b4:	2701      	movs	r7, #1
 800e4b6:	460b      	mov	r3, r1
 800e4b8:	9704      	str	r7, [sp, #16]
 800e4ba:	f7ff bb0a 	b.w	800dad2 <_strtod_l+0x17a>
 800e4be:	bf00      	nop
 800e4c0:	ffc00000 	.word	0xffc00000
 800e4c4:	41dfffff 	.word	0x41dfffff
 800e4c8:	000fffff 	.word	0x000fffff
 800e4cc:	7ff00000 	.word	0x7ff00000
 800e4d0:	7fefffff 	.word	0x7fefffff
 800e4d4:	39500000 	.word	0x39500000
 800e4d8:	3ff00000 	.word	0x3ff00000
 800e4dc:	7fe00000 	.word	0x7fe00000
 800e4e0:	7c9fffff 	.word	0x7c9fffff
 800e4e4:	bff00000 	.word	0xbff00000

0800e4e8 <_strtod_r>:
 800e4e8:	4b05      	ldr	r3, [pc, #20]	; (800e500 <_strtod_r+0x18>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	b410      	push	{r4}
 800e4ee:	6a1b      	ldr	r3, [r3, #32]
 800e4f0:	4c04      	ldr	r4, [pc, #16]	; (800e504 <_strtod_r+0x1c>)
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	bf08      	it	eq
 800e4f6:	4623      	moveq	r3, r4
 800e4f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4fc:	f7ff ba2c 	b.w	800d958 <_strtod_l>
 800e500:	24000018 	.word	0x24000018
 800e504:	2400007c 	.word	0x2400007c

0800e508 <_strtol_l.isra.0>:
 800e508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e50c:	4680      	mov	r8, r0
 800e50e:	4689      	mov	r9, r1
 800e510:	4692      	mov	sl, r2
 800e512:	461e      	mov	r6, r3
 800e514:	460f      	mov	r7, r1
 800e516:	463d      	mov	r5, r7
 800e518:	9808      	ldr	r0, [sp, #32]
 800e51a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e51e:	f001 fa61 	bl	800f9e4 <__locale_ctype_ptr_l>
 800e522:	4420      	add	r0, r4
 800e524:	7843      	ldrb	r3, [r0, #1]
 800e526:	f013 0308 	ands.w	r3, r3, #8
 800e52a:	d132      	bne.n	800e592 <_strtol_l.isra.0+0x8a>
 800e52c:	2c2d      	cmp	r4, #45	; 0x2d
 800e52e:	d132      	bne.n	800e596 <_strtol_l.isra.0+0x8e>
 800e530:	787c      	ldrb	r4, [r7, #1]
 800e532:	1cbd      	adds	r5, r7, #2
 800e534:	2201      	movs	r2, #1
 800e536:	2e00      	cmp	r6, #0
 800e538:	d05d      	beq.n	800e5f6 <_strtol_l.isra.0+0xee>
 800e53a:	2e10      	cmp	r6, #16
 800e53c:	d109      	bne.n	800e552 <_strtol_l.isra.0+0x4a>
 800e53e:	2c30      	cmp	r4, #48	; 0x30
 800e540:	d107      	bne.n	800e552 <_strtol_l.isra.0+0x4a>
 800e542:	782b      	ldrb	r3, [r5, #0]
 800e544:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e548:	2b58      	cmp	r3, #88	; 0x58
 800e54a:	d14f      	bne.n	800e5ec <_strtol_l.isra.0+0xe4>
 800e54c:	786c      	ldrb	r4, [r5, #1]
 800e54e:	2610      	movs	r6, #16
 800e550:	3502      	adds	r5, #2
 800e552:	2a00      	cmp	r2, #0
 800e554:	bf14      	ite	ne
 800e556:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800e55a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800e55e:	2700      	movs	r7, #0
 800e560:	fbb1 fcf6 	udiv	ip, r1, r6
 800e564:	4638      	mov	r0, r7
 800e566:	fb06 1e1c 	mls	lr, r6, ip, r1
 800e56a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800e56e:	2b09      	cmp	r3, #9
 800e570:	d817      	bhi.n	800e5a2 <_strtol_l.isra.0+0x9a>
 800e572:	461c      	mov	r4, r3
 800e574:	42a6      	cmp	r6, r4
 800e576:	dd23      	ble.n	800e5c0 <_strtol_l.isra.0+0xb8>
 800e578:	1c7b      	adds	r3, r7, #1
 800e57a:	d007      	beq.n	800e58c <_strtol_l.isra.0+0x84>
 800e57c:	4584      	cmp	ip, r0
 800e57e:	d31c      	bcc.n	800e5ba <_strtol_l.isra.0+0xb2>
 800e580:	d101      	bne.n	800e586 <_strtol_l.isra.0+0x7e>
 800e582:	45a6      	cmp	lr, r4
 800e584:	db19      	blt.n	800e5ba <_strtol_l.isra.0+0xb2>
 800e586:	fb00 4006 	mla	r0, r0, r6, r4
 800e58a:	2701      	movs	r7, #1
 800e58c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e590:	e7eb      	b.n	800e56a <_strtol_l.isra.0+0x62>
 800e592:	462f      	mov	r7, r5
 800e594:	e7bf      	b.n	800e516 <_strtol_l.isra.0+0xe>
 800e596:	2c2b      	cmp	r4, #43	; 0x2b
 800e598:	bf04      	itt	eq
 800e59a:	1cbd      	addeq	r5, r7, #2
 800e59c:	787c      	ldrbeq	r4, [r7, #1]
 800e59e:	461a      	mov	r2, r3
 800e5a0:	e7c9      	b.n	800e536 <_strtol_l.isra.0+0x2e>
 800e5a2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800e5a6:	2b19      	cmp	r3, #25
 800e5a8:	d801      	bhi.n	800e5ae <_strtol_l.isra.0+0xa6>
 800e5aa:	3c37      	subs	r4, #55	; 0x37
 800e5ac:	e7e2      	b.n	800e574 <_strtol_l.isra.0+0x6c>
 800e5ae:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800e5b2:	2b19      	cmp	r3, #25
 800e5b4:	d804      	bhi.n	800e5c0 <_strtol_l.isra.0+0xb8>
 800e5b6:	3c57      	subs	r4, #87	; 0x57
 800e5b8:	e7dc      	b.n	800e574 <_strtol_l.isra.0+0x6c>
 800e5ba:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e5be:	e7e5      	b.n	800e58c <_strtol_l.isra.0+0x84>
 800e5c0:	1c7b      	adds	r3, r7, #1
 800e5c2:	d108      	bne.n	800e5d6 <_strtol_l.isra.0+0xce>
 800e5c4:	2322      	movs	r3, #34	; 0x22
 800e5c6:	f8c8 3000 	str.w	r3, [r8]
 800e5ca:	4608      	mov	r0, r1
 800e5cc:	f1ba 0f00 	cmp.w	sl, #0
 800e5d0:	d107      	bne.n	800e5e2 <_strtol_l.isra.0+0xda>
 800e5d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5d6:	b102      	cbz	r2, 800e5da <_strtol_l.isra.0+0xd2>
 800e5d8:	4240      	negs	r0, r0
 800e5da:	f1ba 0f00 	cmp.w	sl, #0
 800e5de:	d0f8      	beq.n	800e5d2 <_strtol_l.isra.0+0xca>
 800e5e0:	b10f      	cbz	r7, 800e5e6 <_strtol_l.isra.0+0xde>
 800e5e2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800e5e6:	f8ca 9000 	str.w	r9, [sl]
 800e5ea:	e7f2      	b.n	800e5d2 <_strtol_l.isra.0+0xca>
 800e5ec:	2430      	movs	r4, #48	; 0x30
 800e5ee:	2e00      	cmp	r6, #0
 800e5f0:	d1af      	bne.n	800e552 <_strtol_l.isra.0+0x4a>
 800e5f2:	2608      	movs	r6, #8
 800e5f4:	e7ad      	b.n	800e552 <_strtol_l.isra.0+0x4a>
 800e5f6:	2c30      	cmp	r4, #48	; 0x30
 800e5f8:	d0a3      	beq.n	800e542 <_strtol_l.isra.0+0x3a>
 800e5fa:	260a      	movs	r6, #10
 800e5fc:	e7a9      	b.n	800e552 <_strtol_l.isra.0+0x4a>
	...

0800e600 <_strtol_r>:
 800e600:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e602:	4c06      	ldr	r4, [pc, #24]	; (800e61c <_strtol_r+0x1c>)
 800e604:	4d06      	ldr	r5, [pc, #24]	; (800e620 <_strtol_r+0x20>)
 800e606:	6824      	ldr	r4, [r4, #0]
 800e608:	6a24      	ldr	r4, [r4, #32]
 800e60a:	2c00      	cmp	r4, #0
 800e60c:	bf08      	it	eq
 800e60e:	462c      	moveq	r4, r5
 800e610:	9400      	str	r4, [sp, #0]
 800e612:	f7ff ff79 	bl	800e508 <_strtol_l.isra.0>
 800e616:	b003      	add	sp, #12
 800e618:	bd30      	pop	{r4, r5, pc}
 800e61a:	bf00      	nop
 800e61c:	24000018 	.word	0x24000018
 800e620:	2400007c 	.word	0x2400007c

0800e624 <__swbuf_r>:
 800e624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e626:	460e      	mov	r6, r1
 800e628:	4614      	mov	r4, r2
 800e62a:	4605      	mov	r5, r0
 800e62c:	b118      	cbz	r0, 800e636 <__swbuf_r+0x12>
 800e62e:	6983      	ldr	r3, [r0, #24]
 800e630:	b90b      	cbnz	r3, 800e636 <__swbuf_r+0x12>
 800e632:	f7fe f8f3 	bl	800c81c <__sinit>
 800e636:	4b21      	ldr	r3, [pc, #132]	; (800e6bc <__swbuf_r+0x98>)
 800e638:	429c      	cmp	r4, r3
 800e63a:	d12a      	bne.n	800e692 <__swbuf_r+0x6e>
 800e63c:	686c      	ldr	r4, [r5, #4]
 800e63e:	69a3      	ldr	r3, [r4, #24]
 800e640:	60a3      	str	r3, [r4, #8]
 800e642:	89a3      	ldrh	r3, [r4, #12]
 800e644:	071a      	lsls	r2, r3, #28
 800e646:	d52e      	bpl.n	800e6a6 <__swbuf_r+0x82>
 800e648:	6923      	ldr	r3, [r4, #16]
 800e64a:	b363      	cbz	r3, 800e6a6 <__swbuf_r+0x82>
 800e64c:	6923      	ldr	r3, [r4, #16]
 800e64e:	6820      	ldr	r0, [r4, #0]
 800e650:	1ac0      	subs	r0, r0, r3
 800e652:	6963      	ldr	r3, [r4, #20]
 800e654:	b2f6      	uxtb	r6, r6
 800e656:	4283      	cmp	r3, r0
 800e658:	4637      	mov	r7, r6
 800e65a:	dc04      	bgt.n	800e666 <__swbuf_r+0x42>
 800e65c:	4621      	mov	r1, r4
 800e65e:	4628      	mov	r0, r5
 800e660:	f7fe f860 	bl	800c724 <_fflush_r>
 800e664:	bb28      	cbnz	r0, 800e6b2 <__swbuf_r+0x8e>
 800e666:	68a3      	ldr	r3, [r4, #8]
 800e668:	3b01      	subs	r3, #1
 800e66a:	60a3      	str	r3, [r4, #8]
 800e66c:	6823      	ldr	r3, [r4, #0]
 800e66e:	1c5a      	adds	r2, r3, #1
 800e670:	6022      	str	r2, [r4, #0]
 800e672:	701e      	strb	r6, [r3, #0]
 800e674:	6963      	ldr	r3, [r4, #20]
 800e676:	3001      	adds	r0, #1
 800e678:	4283      	cmp	r3, r0
 800e67a:	d004      	beq.n	800e686 <__swbuf_r+0x62>
 800e67c:	89a3      	ldrh	r3, [r4, #12]
 800e67e:	07db      	lsls	r3, r3, #31
 800e680:	d519      	bpl.n	800e6b6 <__swbuf_r+0x92>
 800e682:	2e0a      	cmp	r6, #10
 800e684:	d117      	bne.n	800e6b6 <__swbuf_r+0x92>
 800e686:	4621      	mov	r1, r4
 800e688:	4628      	mov	r0, r5
 800e68a:	f7fe f84b 	bl	800c724 <_fflush_r>
 800e68e:	b190      	cbz	r0, 800e6b6 <__swbuf_r+0x92>
 800e690:	e00f      	b.n	800e6b2 <__swbuf_r+0x8e>
 800e692:	4b0b      	ldr	r3, [pc, #44]	; (800e6c0 <__swbuf_r+0x9c>)
 800e694:	429c      	cmp	r4, r3
 800e696:	d101      	bne.n	800e69c <__swbuf_r+0x78>
 800e698:	68ac      	ldr	r4, [r5, #8]
 800e69a:	e7d0      	b.n	800e63e <__swbuf_r+0x1a>
 800e69c:	4b09      	ldr	r3, [pc, #36]	; (800e6c4 <__swbuf_r+0xa0>)
 800e69e:	429c      	cmp	r4, r3
 800e6a0:	bf08      	it	eq
 800e6a2:	68ec      	ldreq	r4, [r5, #12]
 800e6a4:	e7cb      	b.n	800e63e <__swbuf_r+0x1a>
 800e6a6:	4621      	mov	r1, r4
 800e6a8:	4628      	mov	r0, r5
 800e6aa:	f000 f81f 	bl	800e6ec <__swsetup_r>
 800e6ae:	2800      	cmp	r0, #0
 800e6b0:	d0cc      	beq.n	800e64c <__swbuf_r+0x28>
 800e6b2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e6b6:	4638      	mov	r0, r7
 800e6b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6ba:	bf00      	nop
 800e6bc:	08011cdc 	.word	0x08011cdc
 800e6c0:	08011cfc 	.word	0x08011cfc
 800e6c4:	08011cbc 	.word	0x08011cbc

0800e6c8 <_write_r>:
 800e6c8:	b538      	push	{r3, r4, r5, lr}
 800e6ca:	4c07      	ldr	r4, [pc, #28]	; (800e6e8 <_write_r+0x20>)
 800e6cc:	4605      	mov	r5, r0
 800e6ce:	4608      	mov	r0, r1
 800e6d0:	4611      	mov	r1, r2
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	6022      	str	r2, [r4, #0]
 800e6d6:	461a      	mov	r2, r3
 800e6d8:	f7f3 fb8f 	bl	8001dfa <_write>
 800e6dc:	1c43      	adds	r3, r0, #1
 800e6de:	d102      	bne.n	800e6e6 <_write_r+0x1e>
 800e6e0:	6823      	ldr	r3, [r4, #0]
 800e6e2:	b103      	cbz	r3, 800e6e6 <_write_r+0x1e>
 800e6e4:	602b      	str	r3, [r5, #0]
 800e6e6:	bd38      	pop	{r3, r4, r5, pc}
 800e6e8:	24005a68 	.word	0x24005a68

0800e6ec <__swsetup_r>:
 800e6ec:	4b32      	ldr	r3, [pc, #200]	; (800e7b8 <__swsetup_r+0xcc>)
 800e6ee:	b570      	push	{r4, r5, r6, lr}
 800e6f0:	681d      	ldr	r5, [r3, #0]
 800e6f2:	4606      	mov	r6, r0
 800e6f4:	460c      	mov	r4, r1
 800e6f6:	b125      	cbz	r5, 800e702 <__swsetup_r+0x16>
 800e6f8:	69ab      	ldr	r3, [r5, #24]
 800e6fa:	b913      	cbnz	r3, 800e702 <__swsetup_r+0x16>
 800e6fc:	4628      	mov	r0, r5
 800e6fe:	f7fe f88d 	bl	800c81c <__sinit>
 800e702:	4b2e      	ldr	r3, [pc, #184]	; (800e7bc <__swsetup_r+0xd0>)
 800e704:	429c      	cmp	r4, r3
 800e706:	d10f      	bne.n	800e728 <__swsetup_r+0x3c>
 800e708:	686c      	ldr	r4, [r5, #4]
 800e70a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e70e:	b29a      	uxth	r2, r3
 800e710:	0715      	lsls	r5, r2, #28
 800e712:	d42c      	bmi.n	800e76e <__swsetup_r+0x82>
 800e714:	06d0      	lsls	r0, r2, #27
 800e716:	d411      	bmi.n	800e73c <__swsetup_r+0x50>
 800e718:	2209      	movs	r2, #9
 800e71a:	6032      	str	r2, [r6, #0]
 800e71c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e720:	81a3      	strh	r3, [r4, #12]
 800e722:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e726:	e03e      	b.n	800e7a6 <__swsetup_r+0xba>
 800e728:	4b25      	ldr	r3, [pc, #148]	; (800e7c0 <__swsetup_r+0xd4>)
 800e72a:	429c      	cmp	r4, r3
 800e72c:	d101      	bne.n	800e732 <__swsetup_r+0x46>
 800e72e:	68ac      	ldr	r4, [r5, #8]
 800e730:	e7eb      	b.n	800e70a <__swsetup_r+0x1e>
 800e732:	4b24      	ldr	r3, [pc, #144]	; (800e7c4 <__swsetup_r+0xd8>)
 800e734:	429c      	cmp	r4, r3
 800e736:	bf08      	it	eq
 800e738:	68ec      	ldreq	r4, [r5, #12]
 800e73a:	e7e6      	b.n	800e70a <__swsetup_r+0x1e>
 800e73c:	0751      	lsls	r1, r2, #29
 800e73e:	d512      	bpl.n	800e766 <__swsetup_r+0x7a>
 800e740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e742:	b141      	cbz	r1, 800e756 <__swsetup_r+0x6a>
 800e744:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e748:	4299      	cmp	r1, r3
 800e74a:	d002      	beq.n	800e752 <__swsetup_r+0x66>
 800e74c:	4630      	mov	r0, r6
 800e74e:	f7fe f91b 	bl	800c988 <_free_r>
 800e752:	2300      	movs	r3, #0
 800e754:	6363      	str	r3, [r4, #52]	; 0x34
 800e756:	89a3      	ldrh	r3, [r4, #12]
 800e758:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e75c:	81a3      	strh	r3, [r4, #12]
 800e75e:	2300      	movs	r3, #0
 800e760:	6063      	str	r3, [r4, #4]
 800e762:	6923      	ldr	r3, [r4, #16]
 800e764:	6023      	str	r3, [r4, #0]
 800e766:	89a3      	ldrh	r3, [r4, #12]
 800e768:	f043 0308 	orr.w	r3, r3, #8
 800e76c:	81a3      	strh	r3, [r4, #12]
 800e76e:	6923      	ldr	r3, [r4, #16]
 800e770:	b94b      	cbnz	r3, 800e786 <__swsetup_r+0x9a>
 800e772:	89a3      	ldrh	r3, [r4, #12]
 800e774:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e77c:	d003      	beq.n	800e786 <__swsetup_r+0x9a>
 800e77e:	4621      	mov	r1, r4
 800e780:	4630      	mov	r0, r6
 800e782:	f001 f979 	bl	800fa78 <__smakebuf_r>
 800e786:	89a2      	ldrh	r2, [r4, #12]
 800e788:	f012 0301 	ands.w	r3, r2, #1
 800e78c:	d00c      	beq.n	800e7a8 <__swsetup_r+0xbc>
 800e78e:	2300      	movs	r3, #0
 800e790:	60a3      	str	r3, [r4, #8]
 800e792:	6963      	ldr	r3, [r4, #20]
 800e794:	425b      	negs	r3, r3
 800e796:	61a3      	str	r3, [r4, #24]
 800e798:	6923      	ldr	r3, [r4, #16]
 800e79a:	b953      	cbnz	r3, 800e7b2 <__swsetup_r+0xc6>
 800e79c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7a0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800e7a4:	d1ba      	bne.n	800e71c <__swsetup_r+0x30>
 800e7a6:	bd70      	pop	{r4, r5, r6, pc}
 800e7a8:	0792      	lsls	r2, r2, #30
 800e7aa:	bf58      	it	pl
 800e7ac:	6963      	ldrpl	r3, [r4, #20]
 800e7ae:	60a3      	str	r3, [r4, #8]
 800e7b0:	e7f2      	b.n	800e798 <__swsetup_r+0xac>
 800e7b2:	2000      	movs	r0, #0
 800e7b4:	e7f7      	b.n	800e7a6 <__swsetup_r+0xba>
 800e7b6:	bf00      	nop
 800e7b8:	24000018 	.word	0x24000018
 800e7bc:	08011cdc 	.word	0x08011cdc
 800e7c0:	08011cfc 	.word	0x08011cfc
 800e7c4:	08011cbc 	.word	0x08011cbc

0800e7c8 <_close_r>:
 800e7c8:	b538      	push	{r3, r4, r5, lr}
 800e7ca:	4c06      	ldr	r4, [pc, #24]	; (800e7e4 <_close_r+0x1c>)
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	4605      	mov	r5, r0
 800e7d0:	4608      	mov	r0, r1
 800e7d2:	6023      	str	r3, [r4, #0]
 800e7d4:	f7f3 fb2d 	bl	8001e32 <_close>
 800e7d8:	1c43      	adds	r3, r0, #1
 800e7da:	d102      	bne.n	800e7e2 <_close_r+0x1a>
 800e7dc:	6823      	ldr	r3, [r4, #0]
 800e7de:	b103      	cbz	r3, 800e7e2 <_close_r+0x1a>
 800e7e0:	602b      	str	r3, [r5, #0]
 800e7e2:	bd38      	pop	{r3, r4, r5, pc}
 800e7e4:	24005a68 	.word	0x24005a68

0800e7e8 <quorem>:
 800e7e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7ec:	6903      	ldr	r3, [r0, #16]
 800e7ee:	690c      	ldr	r4, [r1, #16]
 800e7f0:	42a3      	cmp	r3, r4
 800e7f2:	4680      	mov	r8, r0
 800e7f4:	f2c0 8082 	blt.w	800e8fc <quorem+0x114>
 800e7f8:	3c01      	subs	r4, #1
 800e7fa:	f101 0714 	add.w	r7, r1, #20
 800e7fe:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800e802:	f100 0614 	add.w	r6, r0, #20
 800e806:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800e80a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800e80e:	eb06 030c 	add.w	r3, r6, ip
 800e812:	3501      	adds	r5, #1
 800e814:	eb07 090c 	add.w	r9, r7, ip
 800e818:	9301      	str	r3, [sp, #4]
 800e81a:	fbb0 f5f5 	udiv	r5, r0, r5
 800e81e:	b395      	cbz	r5, 800e886 <quorem+0x9e>
 800e820:	f04f 0a00 	mov.w	sl, #0
 800e824:	4638      	mov	r0, r7
 800e826:	46b6      	mov	lr, r6
 800e828:	46d3      	mov	fp, sl
 800e82a:	f850 2b04 	ldr.w	r2, [r0], #4
 800e82e:	b293      	uxth	r3, r2
 800e830:	fb05 a303 	mla	r3, r5, r3, sl
 800e834:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e838:	b29b      	uxth	r3, r3
 800e83a:	ebab 0303 	sub.w	r3, fp, r3
 800e83e:	0c12      	lsrs	r2, r2, #16
 800e840:	f8de b000 	ldr.w	fp, [lr]
 800e844:	fb05 a202 	mla	r2, r5, r2, sl
 800e848:	fa13 f38b 	uxtah	r3, r3, fp
 800e84c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800e850:	fa1f fb82 	uxth.w	fp, r2
 800e854:	f8de 2000 	ldr.w	r2, [lr]
 800e858:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800e85c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e860:	b29b      	uxth	r3, r3
 800e862:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e866:	4581      	cmp	r9, r0
 800e868:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800e86c:	f84e 3b04 	str.w	r3, [lr], #4
 800e870:	d2db      	bcs.n	800e82a <quorem+0x42>
 800e872:	f856 300c 	ldr.w	r3, [r6, ip]
 800e876:	b933      	cbnz	r3, 800e886 <quorem+0x9e>
 800e878:	9b01      	ldr	r3, [sp, #4]
 800e87a:	3b04      	subs	r3, #4
 800e87c:	429e      	cmp	r6, r3
 800e87e:	461a      	mov	r2, r3
 800e880:	d330      	bcc.n	800e8e4 <quorem+0xfc>
 800e882:	f8c8 4010 	str.w	r4, [r8, #16]
 800e886:	4640      	mov	r0, r8
 800e888:	f001 fbb0 	bl	800ffec <__mcmp>
 800e88c:	2800      	cmp	r0, #0
 800e88e:	db25      	blt.n	800e8dc <quorem+0xf4>
 800e890:	3501      	adds	r5, #1
 800e892:	4630      	mov	r0, r6
 800e894:	f04f 0c00 	mov.w	ip, #0
 800e898:	f857 2b04 	ldr.w	r2, [r7], #4
 800e89c:	f8d0 e000 	ldr.w	lr, [r0]
 800e8a0:	b293      	uxth	r3, r2
 800e8a2:	ebac 0303 	sub.w	r3, ip, r3
 800e8a6:	0c12      	lsrs	r2, r2, #16
 800e8a8:	fa13 f38e 	uxtah	r3, r3, lr
 800e8ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e8b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e8b4:	b29b      	uxth	r3, r3
 800e8b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e8ba:	45b9      	cmp	r9, r7
 800e8bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e8c0:	f840 3b04 	str.w	r3, [r0], #4
 800e8c4:	d2e8      	bcs.n	800e898 <quorem+0xb0>
 800e8c6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800e8ca:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800e8ce:	b92a      	cbnz	r2, 800e8dc <quorem+0xf4>
 800e8d0:	3b04      	subs	r3, #4
 800e8d2:	429e      	cmp	r6, r3
 800e8d4:	461a      	mov	r2, r3
 800e8d6:	d30b      	bcc.n	800e8f0 <quorem+0x108>
 800e8d8:	f8c8 4010 	str.w	r4, [r8, #16]
 800e8dc:	4628      	mov	r0, r5
 800e8de:	b003      	add	sp, #12
 800e8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8e4:	6812      	ldr	r2, [r2, #0]
 800e8e6:	3b04      	subs	r3, #4
 800e8e8:	2a00      	cmp	r2, #0
 800e8ea:	d1ca      	bne.n	800e882 <quorem+0x9a>
 800e8ec:	3c01      	subs	r4, #1
 800e8ee:	e7c5      	b.n	800e87c <quorem+0x94>
 800e8f0:	6812      	ldr	r2, [r2, #0]
 800e8f2:	3b04      	subs	r3, #4
 800e8f4:	2a00      	cmp	r2, #0
 800e8f6:	d1ef      	bne.n	800e8d8 <quorem+0xf0>
 800e8f8:	3c01      	subs	r4, #1
 800e8fa:	e7ea      	b.n	800e8d2 <quorem+0xea>
 800e8fc:	2000      	movs	r0, #0
 800e8fe:	e7ee      	b.n	800e8de <quorem+0xf6>

0800e900 <_dtoa_r>:
 800e900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e904:	ec57 6b10 	vmov	r6, r7, d0
 800e908:	b095      	sub	sp, #84	; 0x54
 800e90a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e90c:	9108      	str	r1, [sp, #32]
 800e90e:	4604      	mov	r4, r0
 800e910:	920a      	str	r2, [sp, #40]	; 0x28
 800e912:	9311      	str	r3, [sp, #68]	; 0x44
 800e914:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800e918:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800e91c:	b93d      	cbnz	r5, 800e92e <_dtoa_r+0x2e>
 800e91e:	2010      	movs	r0, #16
 800e920:	f001 f8ea 	bl	800faf8 <malloc>
 800e924:	6260      	str	r0, [r4, #36]	; 0x24
 800e926:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e92a:	6005      	str	r5, [r0, #0]
 800e92c:	60c5      	str	r5, [r0, #12]
 800e92e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e930:	6819      	ldr	r1, [r3, #0]
 800e932:	b151      	cbz	r1, 800e94a <_dtoa_r+0x4a>
 800e934:	685a      	ldr	r2, [r3, #4]
 800e936:	604a      	str	r2, [r1, #4]
 800e938:	2301      	movs	r3, #1
 800e93a:	4093      	lsls	r3, r2
 800e93c:	608b      	str	r3, [r1, #8]
 800e93e:	4620      	mov	r0, r4
 800e940:	f001 f935 	bl	800fbae <_Bfree>
 800e944:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e946:	2200      	movs	r2, #0
 800e948:	601a      	str	r2, [r3, #0]
 800e94a:	1e3b      	subs	r3, r7, #0
 800e94c:	bfb9      	ittee	lt
 800e94e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e952:	9303      	strlt	r3, [sp, #12]
 800e954:	2300      	movge	r3, #0
 800e956:	f8c8 3000 	strge.w	r3, [r8]
 800e95a:	9d03      	ldr	r5, [sp, #12]
 800e95c:	4bac      	ldr	r3, [pc, #688]	; (800ec10 <_dtoa_r+0x310>)
 800e95e:	bfbc      	itt	lt
 800e960:	2201      	movlt	r2, #1
 800e962:	f8c8 2000 	strlt.w	r2, [r8]
 800e966:	43ab      	bics	r3, r5
 800e968:	d11b      	bne.n	800e9a2 <_dtoa_r+0xa2>
 800e96a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e96c:	f242 730f 	movw	r3, #9999	; 0x270f
 800e970:	6013      	str	r3, [r2, #0]
 800e972:	9b02      	ldr	r3, [sp, #8]
 800e974:	b923      	cbnz	r3, 800e980 <_dtoa_r+0x80>
 800e976:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800e97a:	2d00      	cmp	r5, #0
 800e97c:	f000 84dd 	beq.w	800f33a <_dtoa_r+0xa3a>
 800e980:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e982:	b953      	cbnz	r3, 800e99a <_dtoa_r+0x9a>
 800e984:	4ba3      	ldr	r3, [pc, #652]	; (800ec14 <_dtoa_r+0x314>)
 800e986:	e020      	b.n	800e9ca <_dtoa_r+0xca>
 800e988:	4ba3      	ldr	r3, [pc, #652]	; (800ec18 <_dtoa_r+0x318>)
 800e98a:	9304      	str	r3, [sp, #16]
 800e98c:	3308      	adds	r3, #8
 800e98e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e990:	6013      	str	r3, [r2, #0]
 800e992:	9804      	ldr	r0, [sp, #16]
 800e994:	b015      	add	sp, #84	; 0x54
 800e996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e99a:	4b9e      	ldr	r3, [pc, #632]	; (800ec14 <_dtoa_r+0x314>)
 800e99c:	9304      	str	r3, [sp, #16]
 800e99e:	3303      	adds	r3, #3
 800e9a0:	e7f5      	b.n	800e98e <_dtoa_r+0x8e>
 800e9a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e9a6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e9aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9ae:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e9b2:	d10c      	bne.n	800e9ce <_dtoa_r+0xce>
 800e9b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	6013      	str	r3, [r2, #0]
 800e9ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	f000 84b9 	beq.w	800f334 <_dtoa_r+0xa34>
 800e9c2:	4b96      	ldr	r3, [pc, #600]	; (800ec1c <_dtoa_r+0x31c>)
 800e9c4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e9c6:	6013      	str	r3, [r2, #0]
 800e9c8:	3b01      	subs	r3, #1
 800e9ca:	9304      	str	r3, [sp, #16]
 800e9cc:	e7e1      	b.n	800e992 <_dtoa_r+0x92>
 800e9ce:	a913      	add	r1, sp, #76	; 0x4c
 800e9d0:	aa12      	add	r2, sp, #72	; 0x48
 800e9d2:	ed9d 0b04 	vldr	d0, [sp, #16]
 800e9d6:	4620      	mov	r0, r4
 800e9d8:	f001 fbf6 	bl	80101c8 <__d2b>
 800e9dc:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800e9e0:	9001      	str	r0, [sp, #4]
 800e9e2:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e9e4:	2e00      	cmp	r6, #0
 800e9e6:	d046      	beq.n	800ea76 <_dtoa_r+0x176>
 800e9e8:	9805      	ldr	r0, [sp, #20]
 800e9ea:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800e9ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e9f2:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800e9f6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e9fa:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800e9fe:	2700      	movs	r7, #0
 800ea00:	ee07 aa90 	vmov	s15, sl
 800ea04:	ec43 2b16 	vmov	d6, r2, r3
 800ea08:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800ea0c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800ebf8 <_dtoa_r+0x2f8>
 800ea10:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800ea14:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ea18:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800ec00 <_dtoa_r+0x300>
 800ea1c:	eea7 6b04 	vfma.f64	d6, d7, d4
 800ea20:	eeb0 7b46 	vmov.f64	d7, d6
 800ea24:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800ec08 <_dtoa_r+0x308>
 800ea28:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ea2c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ea30:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ea34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea38:	ee16 ba90 	vmov	fp, s13
 800ea3c:	d508      	bpl.n	800ea50 <_dtoa_r+0x150>
 800ea3e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ea42:	eeb4 6b47 	vcmp.f64	d6, d7
 800ea46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea4a:	bf18      	it	ne
 800ea4c:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 800ea50:	f1bb 0f16 	cmp.w	fp, #22
 800ea54:	d834      	bhi.n	800eac0 <_dtoa_r+0x1c0>
 800ea56:	4b72      	ldr	r3, [pc, #456]	; (800ec20 <_dtoa_r+0x320>)
 800ea58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ea5c:	ed93 7b00 	vldr	d7, [r3]
 800ea60:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ea64:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ea68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea6c:	dd01      	ble.n	800ea72 <_dtoa_r+0x172>
 800ea6e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ea72:	2300      	movs	r3, #0
 800ea74:	e025      	b.n	800eac2 <_dtoa_r+0x1c2>
 800ea76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ea78:	eb01 0a03 	add.w	sl, r1, r3
 800ea7c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800ea80:	2b20      	cmp	r3, #32
 800ea82:	dd17      	ble.n	800eab4 <_dtoa_r+0x1b4>
 800ea84:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800ea88:	9a02      	ldr	r2, [sp, #8]
 800ea8a:	409d      	lsls	r5, r3
 800ea8c:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800ea90:	fa22 f303 	lsr.w	r3, r2, r3
 800ea94:	432b      	orrs	r3, r5
 800ea96:	ee07 3a90 	vmov	s15, r3
 800ea9a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ea9e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800eaa2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800eaa6:	9805      	ldr	r0, [sp, #20]
 800eaa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eaac:	2701      	movs	r7, #1
 800eaae:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800eab2:	e7a5      	b.n	800ea00 <_dtoa_r+0x100>
 800eab4:	9a02      	ldr	r2, [sp, #8]
 800eab6:	f1c3 0320 	rsb	r3, r3, #32
 800eaba:	fa02 f303 	lsl.w	r3, r2, r3
 800eabe:	e7ea      	b.n	800ea96 <_dtoa_r+0x196>
 800eac0:	2301      	movs	r3, #1
 800eac2:	eba1 0a0a 	sub.w	sl, r1, sl
 800eac6:	9310      	str	r3, [sp, #64]	; 0x40
 800eac8:	f1ba 0301 	subs.w	r3, sl, #1
 800eacc:	9307      	str	r3, [sp, #28]
 800eace:	bf43      	ittte	mi
 800ead0:	2300      	movmi	r3, #0
 800ead2:	f1ca 0a01 	rsbmi	sl, sl, #1
 800ead6:	9307      	strmi	r3, [sp, #28]
 800ead8:	f04f 0a00 	movpl.w	sl, #0
 800eadc:	f1bb 0f00 	cmp.w	fp, #0
 800eae0:	db19      	blt.n	800eb16 <_dtoa_r+0x216>
 800eae2:	9b07      	ldr	r3, [sp, #28]
 800eae4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800eae8:	445b      	add	r3, fp
 800eaea:	9307      	str	r3, [sp, #28]
 800eaec:	f04f 0800 	mov.w	r8, #0
 800eaf0:	9b08      	ldr	r3, [sp, #32]
 800eaf2:	2b09      	cmp	r3, #9
 800eaf4:	d866      	bhi.n	800ebc4 <_dtoa_r+0x2c4>
 800eaf6:	2b05      	cmp	r3, #5
 800eaf8:	bfc4      	itt	gt
 800eafa:	3b04      	subgt	r3, #4
 800eafc:	9308      	strgt	r3, [sp, #32]
 800eafe:	9b08      	ldr	r3, [sp, #32]
 800eb00:	f1a3 0302 	sub.w	r3, r3, #2
 800eb04:	bfcc      	ite	gt
 800eb06:	2500      	movgt	r5, #0
 800eb08:	2501      	movle	r5, #1
 800eb0a:	2b03      	cmp	r3, #3
 800eb0c:	d866      	bhi.n	800ebdc <_dtoa_r+0x2dc>
 800eb0e:	e8df f003 	tbb	[pc, r3]
 800eb12:	5755      	.short	0x5755
 800eb14:	4909      	.short	0x4909
 800eb16:	2300      	movs	r3, #0
 800eb18:	ebaa 0a0b 	sub.w	sl, sl, fp
 800eb1c:	f1cb 0800 	rsb	r8, fp, #0
 800eb20:	930b      	str	r3, [sp, #44]	; 0x2c
 800eb22:	e7e5      	b.n	800eaf0 <_dtoa_r+0x1f0>
 800eb24:	2301      	movs	r3, #1
 800eb26:	9309      	str	r3, [sp, #36]	; 0x24
 800eb28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	dd59      	ble.n	800ebe2 <_dtoa_r+0x2e2>
 800eb2e:	9306      	str	r3, [sp, #24]
 800eb30:	4699      	mov	r9, r3
 800eb32:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800eb34:	2200      	movs	r2, #0
 800eb36:	6072      	str	r2, [r6, #4]
 800eb38:	2204      	movs	r2, #4
 800eb3a:	f102 0014 	add.w	r0, r2, #20
 800eb3e:	4298      	cmp	r0, r3
 800eb40:	6871      	ldr	r1, [r6, #4]
 800eb42:	d953      	bls.n	800ebec <_dtoa_r+0x2ec>
 800eb44:	4620      	mov	r0, r4
 800eb46:	f000 fffe 	bl	800fb46 <_Balloc>
 800eb4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb4c:	6030      	str	r0, [r6, #0]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	9304      	str	r3, [sp, #16]
 800eb52:	f1b9 0f0e 	cmp.w	r9, #14
 800eb56:	f200 80c2 	bhi.w	800ecde <_dtoa_r+0x3de>
 800eb5a:	2d00      	cmp	r5, #0
 800eb5c:	f000 80bf 	beq.w	800ecde <_dtoa_r+0x3de>
 800eb60:	ed9d 7b02 	vldr	d7, [sp, #8]
 800eb64:	f1bb 0f00 	cmp.w	fp, #0
 800eb68:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800eb6c:	f340 80e6 	ble.w	800ed3c <_dtoa_r+0x43c>
 800eb70:	4a2b      	ldr	r2, [pc, #172]	; (800ec20 <_dtoa_r+0x320>)
 800eb72:	f00b 030f 	and.w	r3, fp, #15
 800eb76:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800eb7a:	ed93 7b00 	vldr	d7, [r3]
 800eb7e:	ea4f 132b 	mov.w	r3, fp, asr #4
 800eb82:	06da      	lsls	r2, r3, #27
 800eb84:	f140 80d8 	bpl.w	800ed38 <_dtoa_r+0x438>
 800eb88:	4a26      	ldr	r2, [pc, #152]	; (800ec24 <_dtoa_r+0x324>)
 800eb8a:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800eb8e:	ed92 6b08 	vldr	d6, [r2, #32]
 800eb92:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800eb96:	ed8d 6b02 	vstr	d6, [sp, #8]
 800eb9a:	f003 030f 	and.w	r3, r3, #15
 800eb9e:	2203      	movs	r2, #3
 800eba0:	4920      	ldr	r1, [pc, #128]	; (800ec24 <_dtoa_r+0x324>)
 800eba2:	e04a      	b.n	800ec3a <_dtoa_r+0x33a>
 800eba4:	2301      	movs	r3, #1
 800eba6:	9309      	str	r3, [sp, #36]	; 0x24
 800eba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebaa:	445b      	add	r3, fp
 800ebac:	f103 0901 	add.w	r9, r3, #1
 800ebb0:	9306      	str	r3, [sp, #24]
 800ebb2:	464b      	mov	r3, r9
 800ebb4:	2b01      	cmp	r3, #1
 800ebb6:	bfb8      	it	lt
 800ebb8:	2301      	movlt	r3, #1
 800ebba:	e7ba      	b.n	800eb32 <_dtoa_r+0x232>
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	e7b2      	b.n	800eb26 <_dtoa_r+0x226>
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	e7f0      	b.n	800eba6 <_dtoa_r+0x2a6>
 800ebc4:	2501      	movs	r5, #1
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800ebcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ebd0:	9306      	str	r3, [sp, #24]
 800ebd2:	4699      	mov	r9, r3
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	2312      	movs	r3, #18
 800ebd8:	920a      	str	r2, [sp, #40]	; 0x28
 800ebda:	e7aa      	b.n	800eb32 <_dtoa_r+0x232>
 800ebdc:	2301      	movs	r3, #1
 800ebde:	9309      	str	r3, [sp, #36]	; 0x24
 800ebe0:	e7f4      	b.n	800ebcc <_dtoa_r+0x2cc>
 800ebe2:	2301      	movs	r3, #1
 800ebe4:	9306      	str	r3, [sp, #24]
 800ebe6:	4699      	mov	r9, r3
 800ebe8:	461a      	mov	r2, r3
 800ebea:	e7f5      	b.n	800ebd8 <_dtoa_r+0x2d8>
 800ebec:	3101      	adds	r1, #1
 800ebee:	6071      	str	r1, [r6, #4]
 800ebf0:	0052      	lsls	r2, r2, #1
 800ebf2:	e7a2      	b.n	800eb3a <_dtoa_r+0x23a>
 800ebf4:	f3af 8000 	nop.w
 800ebf8:	636f4361 	.word	0x636f4361
 800ebfc:	3fd287a7 	.word	0x3fd287a7
 800ec00:	8b60c8b3 	.word	0x8b60c8b3
 800ec04:	3fc68a28 	.word	0x3fc68a28
 800ec08:	509f79fb 	.word	0x509f79fb
 800ec0c:	3fd34413 	.word	0x3fd34413
 800ec10:	7ff00000 	.word	0x7ff00000
 800ec14:	08011db9 	.word	0x08011db9
 800ec18:	08011db0 	.word	0x08011db0
 800ec1c:	08011d31 	.word	0x08011d31
 800ec20:	08011df0 	.word	0x08011df0
 800ec24:	08011dc8 	.word	0x08011dc8
 800ec28:	07de      	lsls	r6, r3, #31
 800ec2a:	d504      	bpl.n	800ec36 <_dtoa_r+0x336>
 800ec2c:	ed91 6b00 	vldr	d6, [r1]
 800ec30:	3201      	adds	r2, #1
 800ec32:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ec36:	105b      	asrs	r3, r3, #1
 800ec38:	3108      	adds	r1, #8
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d1f4      	bne.n	800ec28 <_dtoa_r+0x328>
 800ec3e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ec42:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ec46:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ec4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	f000 80a7 	beq.w	800eda0 <_dtoa_r+0x4a0>
 800ec52:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ec56:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ec5a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ec5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec62:	f140 809d 	bpl.w	800eda0 <_dtoa_r+0x4a0>
 800ec66:	f1b9 0f00 	cmp.w	r9, #0
 800ec6a:	f000 8099 	beq.w	800eda0 <_dtoa_r+0x4a0>
 800ec6e:	9b06      	ldr	r3, [sp, #24]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	dd30      	ble.n	800ecd6 <_dtoa_r+0x3d6>
 800ec74:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800ec78:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ec7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ec80:	9d06      	ldr	r5, [sp, #24]
 800ec82:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800ec86:	3201      	adds	r2, #1
 800ec88:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ec8c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800ec90:	ee07 2a90 	vmov	s15, r2
 800ec94:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ec98:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ec9c:	ed8d 5b02 	vstr	d5, [sp, #8]
 800eca0:	9a03      	ldr	r2, [sp, #12]
 800eca2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eca6:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800ecaa:	2d00      	cmp	r5, #0
 800ecac:	d17b      	bne.n	800eda6 <_dtoa_r+0x4a6>
 800ecae:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ecb2:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ecb6:	ec41 0b17 	vmov	d7, r0, r1
 800ecba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ecbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecc2:	f300 8253 	bgt.w	800f16c <_dtoa_r+0x86c>
 800ecc6:	eeb1 7b47 	vneg.f64	d7, d7
 800ecca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ecce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecd2:	f100 8249 	bmi.w	800f168 <_dtoa_r+0x868>
 800ecd6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ecda:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ecde:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	f2c0 8119 	blt.w	800ef18 <_dtoa_r+0x618>
 800ece6:	f1bb 0f0e 	cmp.w	fp, #14
 800ecea:	f300 8115 	bgt.w	800ef18 <_dtoa_r+0x618>
 800ecee:	4bc3      	ldr	r3, [pc, #780]	; (800effc <_dtoa_r+0x6fc>)
 800ecf0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ecf4:	ed93 6b00 	vldr	d6, [r3]
 800ecf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	f280 80ba 	bge.w	800ee74 <_dtoa_r+0x574>
 800ed00:	f1b9 0f00 	cmp.w	r9, #0
 800ed04:	f300 80b6 	bgt.w	800ee74 <_dtoa_r+0x574>
 800ed08:	f040 822d 	bne.w	800f166 <_dtoa_r+0x866>
 800ed0c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ed10:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ed14:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ed18:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ed1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed20:	464d      	mov	r5, r9
 800ed22:	464f      	mov	r7, r9
 800ed24:	f280 8204 	bge.w	800f130 <_dtoa_r+0x830>
 800ed28:	9b04      	ldr	r3, [sp, #16]
 800ed2a:	9a04      	ldr	r2, [sp, #16]
 800ed2c:	1c5e      	adds	r6, r3, #1
 800ed2e:	2331      	movs	r3, #49	; 0x31
 800ed30:	7013      	strb	r3, [r2, #0]
 800ed32:	f10b 0b01 	add.w	fp, fp, #1
 800ed36:	e1ff      	b.n	800f138 <_dtoa_r+0x838>
 800ed38:	2202      	movs	r2, #2
 800ed3a:	e731      	b.n	800eba0 <_dtoa_r+0x2a0>
 800ed3c:	d02e      	beq.n	800ed9c <_dtoa_r+0x49c>
 800ed3e:	f1cb 0300 	rsb	r3, fp, #0
 800ed42:	4aae      	ldr	r2, [pc, #696]	; (800effc <_dtoa_r+0x6fc>)
 800ed44:	f003 010f 	and.w	r1, r3, #15
 800ed48:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ed4c:	ed92 7b00 	vldr	d7, [r2]
 800ed50:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800ed54:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ed58:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800ed5c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800ed60:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800ed64:	49a6      	ldr	r1, [pc, #664]	; (800f000 <_dtoa_r+0x700>)
 800ed66:	111b      	asrs	r3, r3, #4
 800ed68:	2000      	movs	r0, #0
 800ed6a:	2202      	movs	r2, #2
 800ed6c:	b93b      	cbnz	r3, 800ed7e <_dtoa_r+0x47e>
 800ed6e:	2800      	cmp	r0, #0
 800ed70:	f43f af6b 	beq.w	800ec4a <_dtoa_r+0x34a>
 800ed74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ed78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed7c:	e765      	b.n	800ec4a <_dtoa_r+0x34a>
 800ed7e:	07dd      	lsls	r5, r3, #31
 800ed80:	d509      	bpl.n	800ed96 <_dtoa_r+0x496>
 800ed82:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800ed86:	ed91 7b00 	vldr	d7, [r1]
 800ed8a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ed8e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800ed92:	3201      	adds	r2, #1
 800ed94:	2001      	movs	r0, #1
 800ed96:	105b      	asrs	r3, r3, #1
 800ed98:	3108      	adds	r1, #8
 800ed9a:	e7e7      	b.n	800ed6c <_dtoa_r+0x46c>
 800ed9c:	2202      	movs	r2, #2
 800ed9e:	e754      	b.n	800ec4a <_dtoa_r+0x34a>
 800eda0:	465b      	mov	r3, fp
 800eda2:	464d      	mov	r5, r9
 800eda4:	e770      	b.n	800ec88 <_dtoa_r+0x388>
 800eda6:	4a95      	ldr	r2, [pc, #596]	; (800effc <_dtoa_r+0x6fc>)
 800eda8:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800edac:	ed12 4b02 	vldr	d4, [r2, #-8]
 800edb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800edb2:	ec41 0b17 	vmov	d7, r0, r1
 800edb6:	b35a      	cbz	r2, 800ee10 <_dtoa_r+0x510>
 800edb8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800edbc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800edc0:	9e04      	ldr	r6, [sp, #16]
 800edc2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800edc6:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800edca:	ee35 7b47 	vsub.f64	d7, d5, d7
 800edce:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800edd2:	ee14 2a90 	vmov	r2, s9
 800edd6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800edda:	3230      	adds	r2, #48	; 0x30
 800eddc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ede0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ede4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ede8:	f806 2b01 	strb.w	r2, [r6], #1
 800edec:	d43b      	bmi.n	800ee66 <_dtoa_r+0x566>
 800edee:	ee32 5b46 	vsub.f64	d5, d2, d6
 800edf2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800edf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edfa:	d472      	bmi.n	800eee2 <_dtoa_r+0x5e2>
 800edfc:	9a04      	ldr	r2, [sp, #16]
 800edfe:	1ab2      	subs	r2, r6, r2
 800ee00:	4295      	cmp	r5, r2
 800ee02:	f77f af68 	ble.w	800ecd6 <_dtoa_r+0x3d6>
 800ee06:	ee27 7b03 	vmul.f64	d7, d7, d3
 800ee0a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ee0e:	e7de      	b.n	800edce <_dtoa_r+0x4ce>
 800ee10:	9a04      	ldr	r2, [sp, #16]
 800ee12:	ee24 7b07 	vmul.f64	d7, d4, d7
 800ee16:	1956      	adds	r6, r2, r5
 800ee18:	4611      	mov	r1, r2
 800ee1a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ee1e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ee22:	ee14 2a90 	vmov	r2, s9
 800ee26:	3230      	adds	r2, #48	; 0x30
 800ee28:	f801 2b01 	strb.w	r2, [r1], #1
 800ee2c:	42b1      	cmp	r1, r6
 800ee2e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ee32:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ee36:	d11a      	bne.n	800ee6e <_dtoa_r+0x56e>
 800ee38:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ee3c:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ee40:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ee44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee48:	dc4b      	bgt.n	800eee2 <_dtoa_r+0x5e2>
 800ee4a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ee4e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ee52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee56:	f57f af3e 	bpl.w	800ecd6 <_dtoa_r+0x3d6>
 800ee5a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ee5e:	2a30      	cmp	r2, #48	; 0x30
 800ee60:	f106 31ff 	add.w	r1, r6, #4294967295	; 0xffffffff
 800ee64:	d001      	beq.n	800ee6a <_dtoa_r+0x56a>
 800ee66:	469b      	mov	fp, r3
 800ee68:	e02a      	b.n	800eec0 <_dtoa_r+0x5c0>
 800ee6a:	460e      	mov	r6, r1
 800ee6c:	e7f5      	b.n	800ee5a <_dtoa_r+0x55a>
 800ee6e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ee72:	e7d4      	b.n	800ee1e <_dtoa_r+0x51e>
 800ee74:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ee78:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800ee7c:	9e04      	ldr	r6, [sp, #16]
 800ee7e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ee82:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ee86:	ee15 3a10 	vmov	r3, s10
 800ee8a:	3330      	adds	r3, #48	; 0x30
 800ee8c:	f806 3b01 	strb.w	r3, [r6], #1
 800ee90:	9b04      	ldr	r3, [sp, #16]
 800ee92:	1af3      	subs	r3, r6, r3
 800ee94:	4599      	cmp	r9, r3
 800ee96:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ee9a:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ee9e:	d133      	bne.n	800ef08 <_dtoa_r+0x608>
 800eea0:	ee37 7b07 	vadd.f64	d7, d7, d7
 800eea4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800eea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeac:	dc18      	bgt.n	800eee0 <_dtoa_r+0x5e0>
 800eeae:	eeb4 7b46 	vcmp.f64	d7, d6
 800eeb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeb6:	d103      	bne.n	800eec0 <_dtoa_r+0x5c0>
 800eeb8:	ee15 3a10 	vmov	r3, s10
 800eebc:	07db      	lsls	r3, r3, #31
 800eebe:	d40f      	bmi.n	800eee0 <_dtoa_r+0x5e0>
 800eec0:	9901      	ldr	r1, [sp, #4]
 800eec2:	4620      	mov	r0, r4
 800eec4:	f000 fe73 	bl	800fbae <_Bfree>
 800eec8:	2300      	movs	r3, #0
 800eeca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800eecc:	7033      	strb	r3, [r6, #0]
 800eece:	f10b 0301 	add.w	r3, fp, #1
 800eed2:	6013      	str	r3, [r2, #0]
 800eed4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	f43f ad5b 	beq.w	800e992 <_dtoa_r+0x92>
 800eedc:	601e      	str	r6, [r3, #0]
 800eede:	e558      	b.n	800e992 <_dtoa_r+0x92>
 800eee0:	465b      	mov	r3, fp
 800eee2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800eee6:	2939      	cmp	r1, #57	; 0x39
 800eee8:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 800eeec:	d106      	bne.n	800eefc <_dtoa_r+0x5fc>
 800eeee:	9904      	ldr	r1, [sp, #16]
 800eef0:	4291      	cmp	r1, r2
 800eef2:	d107      	bne.n	800ef04 <_dtoa_r+0x604>
 800eef4:	2230      	movs	r2, #48	; 0x30
 800eef6:	700a      	strb	r2, [r1, #0]
 800eef8:	3301      	adds	r3, #1
 800eefa:	460a      	mov	r2, r1
 800eefc:	7811      	ldrb	r1, [r2, #0]
 800eefe:	3101      	adds	r1, #1
 800ef00:	7011      	strb	r1, [r2, #0]
 800ef02:	e7b0      	b.n	800ee66 <_dtoa_r+0x566>
 800ef04:	4616      	mov	r6, r2
 800ef06:	e7ec      	b.n	800eee2 <_dtoa_r+0x5e2>
 800ef08:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ef0c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ef10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef14:	d1b3      	bne.n	800ee7e <_dtoa_r+0x57e>
 800ef16:	e7d3      	b.n	800eec0 <_dtoa_r+0x5c0>
 800ef18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef1a:	2a00      	cmp	r2, #0
 800ef1c:	f000 808d 	beq.w	800f03a <_dtoa_r+0x73a>
 800ef20:	9a08      	ldr	r2, [sp, #32]
 800ef22:	2a01      	cmp	r2, #1
 800ef24:	dc72      	bgt.n	800f00c <_dtoa_r+0x70c>
 800ef26:	2f00      	cmp	r7, #0
 800ef28:	d06c      	beq.n	800f004 <_dtoa_r+0x704>
 800ef2a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ef2e:	4645      	mov	r5, r8
 800ef30:	4656      	mov	r6, sl
 800ef32:	9a07      	ldr	r2, [sp, #28]
 800ef34:	2101      	movs	r1, #1
 800ef36:	441a      	add	r2, r3
 800ef38:	4620      	mov	r0, r4
 800ef3a:	449a      	add	sl, r3
 800ef3c:	9207      	str	r2, [sp, #28]
 800ef3e:	f000 ff14 	bl	800fd6a <__i2b>
 800ef42:	4607      	mov	r7, r0
 800ef44:	2e00      	cmp	r6, #0
 800ef46:	dd0b      	ble.n	800ef60 <_dtoa_r+0x660>
 800ef48:	9b07      	ldr	r3, [sp, #28]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	dd08      	ble.n	800ef60 <_dtoa_r+0x660>
 800ef4e:	42b3      	cmp	r3, r6
 800ef50:	9a07      	ldr	r2, [sp, #28]
 800ef52:	bfa8      	it	ge
 800ef54:	4633      	movge	r3, r6
 800ef56:	ebaa 0a03 	sub.w	sl, sl, r3
 800ef5a:	1af6      	subs	r6, r6, r3
 800ef5c:	1ad3      	subs	r3, r2, r3
 800ef5e:	9307      	str	r3, [sp, #28]
 800ef60:	f1b8 0f00 	cmp.w	r8, #0
 800ef64:	d01d      	beq.n	800efa2 <_dtoa_r+0x6a2>
 800ef66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d06a      	beq.n	800f042 <_dtoa_r+0x742>
 800ef6c:	b18d      	cbz	r5, 800ef92 <_dtoa_r+0x692>
 800ef6e:	4639      	mov	r1, r7
 800ef70:	462a      	mov	r2, r5
 800ef72:	4620      	mov	r0, r4
 800ef74:	f000 ff98 	bl	800fea8 <__pow5mult>
 800ef78:	9a01      	ldr	r2, [sp, #4]
 800ef7a:	4601      	mov	r1, r0
 800ef7c:	4607      	mov	r7, r0
 800ef7e:	4620      	mov	r0, r4
 800ef80:	f000 fefc 	bl	800fd7c <__multiply>
 800ef84:	9901      	ldr	r1, [sp, #4]
 800ef86:	900c      	str	r0, [sp, #48]	; 0x30
 800ef88:	4620      	mov	r0, r4
 800ef8a:	f000 fe10 	bl	800fbae <_Bfree>
 800ef8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef90:	9301      	str	r3, [sp, #4]
 800ef92:	ebb8 0205 	subs.w	r2, r8, r5
 800ef96:	d004      	beq.n	800efa2 <_dtoa_r+0x6a2>
 800ef98:	9901      	ldr	r1, [sp, #4]
 800ef9a:	4620      	mov	r0, r4
 800ef9c:	f000 ff84 	bl	800fea8 <__pow5mult>
 800efa0:	9001      	str	r0, [sp, #4]
 800efa2:	2101      	movs	r1, #1
 800efa4:	4620      	mov	r0, r4
 800efa6:	f000 fee0 	bl	800fd6a <__i2b>
 800efaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800efac:	4605      	mov	r5, r0
 800efae:	2b00      	cmp	r3, #0
 800efb0:	f000 81ca 	beq.w	800f348 <_dtoa_r+0xa48>
 800efb4:	461a      	mov	r2, r3
 800efb6:	4601      	mov	r1, r0
 800efb8:	4620      	mov	r0, r4
 800efba:	f000 ff75 	bl	800fea8 <__pow5mult>
 800efbe:	9b08      	ldr	r3, [sp, #32]
 800efc0:	2b01      	cmp	r3, #1
 800efc2:	4605      	mov	r5, r0
 800efc4:	dc44      	bgt.n	800f050 <_dtoa_r+0x750>
 800efc6:	9b02      	ldr	r3, [sp, #8]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d13c      	bne.n	800f046 <_dtoa_r+0x746>
 800efcc:	9b03      	ldr	r3, [sp, #12]
 800efce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d137      	bne.n	800f046 <_dtoa_r+0x746>
 800efd6:	9b03      	ldr	r3, [sp, #12]
 800efd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800efdc:	0d1b      	lsrs	r3, r3, #20
 800efde:	051b      	lsls	r3, r3, #20
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d033      	beq.n	800f04c <_dtoa_r+0x74c>
 800efe4:	9b07      	ldr	r3, [sp, #28]
 800efe6:	3301      	adds	r3, #1
 800efe8:	f10a 0a01 	add.w	sl, sl, #1
 800efec:	9307      	str	r3, [sp, #28]
 800efee:	f04f 0801 	mov.w	r8, #1
 800eff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eff4:	bb73      	cbnz	r3, 800f054 <_dtoa_r+0x754>
 800eff6:	2001      	movs	r0, #1
 800eff8:	e034      	b.n	800f064 <_dtoa_r+0x764>
 800effa:	bf00      	nop
 800effc:	08011df0 	.word	0x08011df0
 800f000:	08011dc8 	.word	0x08011dc8
 800f004:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f006:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f00a:	e790      	b.n	800ef2e <_dtoa_r+0x62e>
 800f00c:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
 800f010:	45a8      	cmp	r8, r5
 800f012:	bfbf      	itttt	lt
 800f014:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800f016:	eba5 0808 	sublt.w	r8, r5, r8
 800f01a:	4443      	addlt	r3, r8
 800f01c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800f01e:	bfb6      	itet	lt
 800f020:	46a8      	movlt	r8, r5
 800f022:	eba8 0505 	subge.w	r5, r8, r5
 800f026:	2500      	movlt	r5, #0
 800f028:	f1b9 0f00 	cmp.w	r9, #0
 800f02c:	bfb9      	ittee	lt
 800f02e:	ebaa 0609 	sublt.w	r6, sl, r9
 800f032:	2300      	movlt	r3, #0
 800f034:	4656      	movge	r6, sl
 800f036:	464b      	movge	r3, r9
 800f038:	e77b      	b.n	800ef32 <_dtoa_r+0x632>
 800f03a:	4645      	mov	r5, r8
 800f03c:	4656      	mov	r6, sl
 800f03e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f040:	e780      	b.n	800ef44 <_dtoa_r+0x644>
 800f042:	4642      	mov	r2, r8
 800f044:	e7a8      	b.n	800ef98 <_dtoa_r+0x698>
 800f046:	f04f 0800 	mov.w	r8, #0
 800f04a:	e7d2      	b.n	800eff2 <_dtoa_r+0x6f2>
 800f04c:	4698      	mov	r8, r3
 800f04e:	e7d0      	b.n	800eff2 <_dtoa_r+0x6f2>
 800f050:	f04f 0800 	mov.w	r8, #0
 800f054:	692b      	ldr	r3, [r5, #16]
 800f056:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800f05a:	6918      	ldr	r0, [r3, #16]
 800f05c:	f000 fe37 	bl	800fcce <__hi0bits>
 800f060:	f1c0 0020 	rsb	r0, r0, #32
 800f064:	9b07      	ldr	r3, [sp, #28]
 800f066:	4418      	add	r0, r3
 800f068:	f010 001f 	ands.w	r0, r0, #31
 800f06c:	d047      	beq.n	800f0fe <_dtoa_r+0x7fe>
 800f06e:	f1c0 0320 	rsb	r3, r0, #32
 800f072:	2b04      	cmp	r3, #4
 800f074:	dd3b      	ble.n	800f0ee <_dtoa_r+0x7ee>
 800f076:	9b07      	ldr	r3, [sp, #28]
 800f078:	f1c0 001c 	rsb	r0, r0, #28
 800f07c:	4482      	add	sl, r0
 800f07e:	4406      	add	r6, r0
 800f080:	4403      	add	r3, r0
 800f082:	9307      	str	r3, [sp, #28]
 800f084:	f1ba 0f00 	cmp.w	sl, #0
 800f088:	dd05      	ble.n	800f096 <_dtoa_r+0x796>
 800f08a:	4652      	mov	r2, sl
 800f08c:	9901      	ldr	r1, [sp, #4]
 800f08e:	4620      	mov	r0, r4
 800f090:	f000 ff58 	bl	800ff44 <__lshift>
 800f094:	9001      	str	r0, [sp, #4]
 800f096:	9b07      	ldr	r3, [sp, #28]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	dd05      	ble.n	800f0a8 <_dtoa_r+0x7a8>
 800f09c:	4629      	mov	r1, r5
 800f09e:	461a      	mov	r2, r3
 800f0a0:	4620      	mov	r0, r4
 800f0a2:	f000 ff4f 	bl	800ff44 <__lshift>
 800f0a6:	4605      	mov	r5, r0
 800f0a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f0aa:	b353      	cbz	r3, 800f102 <_dtoa_r+0x802>
 800f0ac:	4629      	mov	r1, r5
 800f0ae:	9801      	ldr	r0, [sp, #4]
 800f0b0:	f000 ff9c 	bl	800ffec <__mcmp>
 800f0b4:	2800      	cmp	r0, #0
 800f0b6:	da24      	bge.n	800f102 <_dtoa_r+0x802>
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	220a      	movs	r2, #10
 800f0bc:	9901      	ldr	r1, [sp, #4]
 800f0be:	4620      	mov	r0, r4
 800f0c0:	f000 fd8c 	bl	800fbdc <__multadd>
 800f0c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0c6:	9001      	str	r0, [sp, #4]
 800f0c8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	f000 8142 	beq.w	800f356 <_dtoa_r+0xa56>
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	4639      	mov	r1, r7
 800f0d6:	220a      	movs	r2, #10
 800f0d8:	4620      	mov	r0, r4
 800f0da:	f000 fd7f 	bl	800fbdc <__multadd>
 800f0de:	9b06      	ldr	r3, [sp, #24]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	4607      	mov	r7, r0
 800f0e4:	dc4b      	bgt.n	800f17e <_dtoa_r+0x87e>
 800f0e6:	9b08      	ldr	r3, [sp, #32]
 800f0e8:	2b02      	cmp	r3, #2
 800f0ea:	dd48      	ble.n	800f17e <_dtoa_r+0x87e>
 800f0ec:	e011      	b.n	800f112 <_dtoa_r+0x812>
 800f0ee:	d0c9      	beq.n	800f084 <_dtoa_r+0x784>
 800f0f0:	9a07      	ldr	r2, [sp, #28]
 800f0f2:	331c      	adds	r3, #28
 800f0f4:	441a      	add	r2, r3
 800f0f6:	449a      	add	sl, r3
 800f0f8:	441e      	add	r6, r3
 800f0fa:	4613      	mov	r3, r2
 800f0fc:	e7c1      	b.n	800f082 <_dtoa_r+0x782>
 800f0fe:	4603      	mov	r3, r0
 800f100:	e7f6      	b.n	800f0f0 <_dtoa_r+0x7f0>
 800f102:	f1b9 0f00 	cmp.w	r9, #0
 800f106:	dc34      	bgt.n	800f172 <_dtoa_r+0x872>
 800f108:	9b08      	ldr	r3, [sp, #32]
 800f10a:	2b02      	cmp	r3, #2
 800f10c:	dd31      	ble.n	800f172 <_dtoa_r+0x872>
 800f10e:	f8cd 9018 	str.w	r9, [sp, #24]
 800f112:	9b06      	ldr	r3, [sp, #24]
 800f114:	b963      	cbnz	r3, 800f130 <_dtoa_r+0x830>
 800f116:	4629      	mov	r1, r5
 800f118:	2205      	movs	r2, #5
 800f11a:	4620      	mov	r0, r4
 800f11c:	f000 fd5e 	bl	800fbdc <__multadd>
 800f120:	4601      	mov	r1, r0
 800f122:	4605      	mov	r5, r0
 800f124:	9801      	ldr	r0, [sp, #4]
 800f126:	f000 ff61 	bl	800ffec <__mcmp>
 800f12a:	2800      	cmp	r0, #0
 800f12c:	f73f adfc 	bgt.w	800ed28 <_dtoa_r+0x428>
 800f130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f132:	9e04      	ldr	r6, [sp, #16]
 800f134:	ea6f 0b03 	mvn.w	fp, r3
 800f138:	f04f 0900 	mov.w	r9, #0
 800f13c:	4629      	mov	r1, r5
 800f13e:	4620      	mov	r0, r4
 800f140:	f000 fd35 	bl	800fbae <_Bfree>
 800f144:	2f00      	cmp	r7, #0
 800f146:	f43f aebb 	beq.w	800eec0 <_dtoa_r+0x5c0>
 800f14a:	f1b9 0f00 	cmp.w	r9, #0
 800f14e:	d005      	beq.n	800f15c <_dtoa_r+0x85c>
 800f150:	45b9      	cmp	r9, r7
 800f152:	d003      	beq.n	800f15c <_dtoa_r+0x85c>
 800f154:	4649      	mov	r1, r9
 800f156:	4620      	mov	r0, r4
 800f158:	f000 fd29 	bl	800fbae <_Bfree>
 800f15c:	4639      	mov	r1, r7
 800f15e:	4620      	mov	r0, r4
 800f160:	f000 fd25 	bl	800fbae <_Bfree>
 800f164:	e6ac      	b.n	800eec0 <_dtoa_r+0x5c0>
 800f166:	2500      	movs	r5, #0
 800f168:	462f      	mov	r7, r5
 800f16a:	e7e1      	b.n	800f130 <_dtoa_r+0x830>
 800f16c:	469b      	mov	fp, r3
 800f16e:	462f      	mov	r7, r5
 800f170:	e5da      	b.n	800ed28 <_dtoa_r+0x428>
 800f172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f174:	f8cd 9018 	str.w	r9, [sp, #24]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	f000 80f3 	beq.w	800f364 <_dtoa_r+0xa64>
 800f17e:	2e00      	cmp	r6, #0
 800f180:	dd05      	ble.n	800f18e <_dtoa_r+0x88e>
 800f182:	4639      	mov	r1, r7
 800f184:	4632      	mov	r2, r6
 800f186:	4620      	mov	r0, r4
 800f188:	f000 fedc 	bl	800ff44 <__lshift>
 800f18c:	4607      	mov	r7, r0
 800f18e:	f1b8 0f00 	cmp.w	r8, #0
 800f192:	d04c      	beq.n	800f22e <_dtoa_r+0x92e>
 800f194:	6879      	ldr	r1, [r7, #4]
 800f196:	4620      	mov	r0, r4
 800f198:	f000 fcd5 	bl	800fb46 <_Balloc>
 800f19c:	693a      	ldr	r2, [r7, #16]
 800f19e:	3202      	adds	r2, #2
 800f1a0:	4606      	mov	r6, r0
 800f1a2:	0092      	lsls	r2, r2, #2
 800f1a4:	f107 010c 	add.w	r1, r7, #12
 800f1a8:	300c      	adds	r0, #12
 800f1aa:	f000 fcbf 	bl	800fb2c <memcpy>
 800f1ae:	2201      	movs	r2, #1
 800f1b0:	4631      	mov	r1, r6
 800f1b2:	4620      	mov	r0, r4
 800f1b4:	f000 fec6 	bl	800ff44 <__lshift>
 800f1b8:	9b02      	ldr	r3, [sp, #8]
 800f1ba:	f8dd a010 	ldr.w	sl, [sp, #16]
 800f1be:	f003 0301 	and.w	r3, r3, #1
 800f1c2:	46b9      	mov	r9, r7
 800f1c4:	9307      	str	r3, [sp, #28]
 800f1c6:	4607      	mov	r7, r0
 800f1c8:	4629      	mov	r1, r5
 800f1ca:	9801      	ldr	r0, [sp, #4]
 800f1cc:	f7ff fb0c 	bl	800e7e8 <quorem>
 800f1d0:	4649      	mov	r1, r9
 800f1d2:	4606      	mov	r6, r0
 800f1d4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f1d8:	9801      	ldr	r0, [sp, #4]
 800f1da:	f000 ff07 	bl	800ffec <__mcmp>
 800f1de:	463a      	mov	r2, r7
 800f1e0:	9002      	str	r0, [sp, #8]
 800f1e2:	4629      	mov	r1, r5
 800f1e4:	4620      	mov	r0, r4
 800f1e6:	f000 ff1b 	bl	8010020 <__mdiff>
 800f1ea:	68c3      	ldr	r3, [r0, #12]
 800f1ec:	4602      	mov	r2, r0
 800f1ee:	bb03      	cbnz	r3, 800f232 <_dtoa_r+0x932>
 800f1f0:	4601      	mov	r1, r0
 800f1f2:	9009      	str	r0, [sp, #36]	; 0x24
 800f1f4:	9801      	ldr	r0, [sp, #4]
 800f1f6:	f000 fef9 	bl	800ffec <__mcmp>
 800f1fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	4611      	mov	r1, r2
 800f200:	4620      	mov	r0, r4
 800f202:	9309      	str	r3, [sp, #36]	; 0x24
 800f204:	f000 fcd3 	bl	800fbae <_Bfree>
 800f208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f20a:	b9a3      	cbnz	r3, 800f236 <_dtoa_r+0x936>
 800f20c:	9a08      	ldr	r2, [sp, #32]
 800f20e:	b992      	cbnz	r2, 800f236 <_dtoa_r+0x936>
 800f210:	9a07      	ldr	r2, [sp, #28]
 800f212:	b982      	cbnz	r2, 800f236 <_dtoa_r+0x936>
 800f214:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f218:	d029      	beq.n	800f26e <_dtoa_r+0x96e>
 800f21a:	9b02      	ldr	r3, [sp, #8]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	dd01      	ble.n	800f224 <_dtoa_r+0x924>
 800f220:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800f224:	f10a 0601 	add.w	r6, sl, #1
 800f228:	f88a 8000 	strb.w	r8, [sl]
 800f22c:	e786      	b.n	800f13c <_dtoa_r+0x83c>
 800f22e:	4638      	mov	r0, r7
 800f230:	e7c2      	b.n	800f1b8 <_dtoa_r+0x8b8>
 800f232:	2301      	movs	r3, #1
 800f234:	e7e3      	b.n	800f1fe <_dtoa_r+0x8fe>
 800f236:	9a02      	ldr	r2, [sp, #8]
 800f238:	2a00      	cmp	r2, #0
 800f23a:	db04      	blt.n	800f246 <_dtoa_r+0x946>
 800f23c:	d124      	bne.n	800f288 <_dtoa_r+0x988>
 800f23e:	9a08      	ldr	r2, [sp, #32]
 800f240:	bb12      	cbnz	r2, 800f288 <_dtoa_r+0x988>
 800f242:	9a07      	ldr	r2, [sp, #28]
 800f244:	bb02      	cbnz	r2, 800f288 <_dtoa_r+0x988>
 800f246:	2b00      	cmp	r3, #0
 800f248:	ddec      	ble.n	800f224 <_dtoa_r+0x924>
 800f24a:	2201      	movs	r2, #1
 800f24c:	9901      	ldr	r1, [sp, #4]
 800f24e:	4620      	mov	r0, r4
 800f250:	f000 fe78 	bl	800ff44 <__lshift>
 800f254:	4629      	mov	r1, r5
 800f256:	9001      	str	r0, [sp, #4]
 800f258:	f000 fec8 	bl	800ffec <__mcmp>
 800f25c:	2800      	cmp	r0, #0
 800f25e:	dc03      	bgt.n	800f268 <_dtoa_r+0x968>
 800f260:	d1e0      	bne.n	800f224 <_dtoa_r+0x924>
 800f262:	f018 0f01 	tst.w	r8, #1
 800f266:	d0dd      	beq.n	800f224 <_dtoa_r+0x924>
 800f268:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f26c:	d1d8      	bne.n	800f220 <_dtoa_r+0x920>
 800f26e:	2339      	movs	r3, #57	; 0x39
 800f270:	f10a 0601 	add.w	r6, sl, #1
 800f274:	f88a 3000 	strb.w	r3, [sl]
 800f278:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f27c:	2b39      	cmp	r3, #57	; 0x39
 800f27e:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 800f282:	d04c      	beq.n	800f31e <_dtoa_r+0xa1e>
 800f284:	3301      	adds	r3, #1
 800f286:	e051      	b.n	800f32c <_dtoa_r+0xa2c>
 800f288:	2b00      	cmp	r3, #0
 800f28a:	f10a 0601 	add.w	r6, sl, #1
 800f28e:	dd05      	ble.n	800f29c <_dtoa_r+0x99c>
 800f290:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f294:	d0eb      	beq.n	800f26e <_dtoa_r+0x96e>
 800f296:	f108 0801 	add.w	r8, r8, #1
 800f29a:	e7c5      	b.n	800f228 <_dtoa_r+0x928>
 800f29c:	9b04      	ldr	r3, [sp, #16]
 800f29e:	9a06      	ldr	r2, [sp, #24]
 800f2a0:	f806 8c01 	strb.w	r8, [r6, #-1]
 800f2a4:	1af3      	subs	r3, r6, r3
 800f2a6:	4293      	cmp	r3, r2
 800f2a8:	d021      	beq.n	800f2ee <_dtoa_r+0x9ee>
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	220a      	movs	r2, #10
 800f2ae:	9901      	ldr	r1, [sp, #4]
 800f2b0:	4620      	mov	r0, r4
 800f2b2:	f000 fc93 	bl	800fbdc <__multadd>
 800f2b6:	45b9      	cmp	r9, r7
 800f2b8:	9001      	str	r0, [sp, #4]
 800f2ba:	f04f 0300 	mov.w	r3, #0
 800f2be:	f04f 020a 	mov.w	r2, #10
 800f2c2:	4649      	mov	r1, r9
 800f2c4:	4620      	mov	r0, r4
 800f2c6:	d105      	bne.n	800f2d4 <_dtoa_r+0x9d4>
 800f2c8:	f000 fc88 	bl	800fbdc <__multadd>
 800f2cc:	4681      	mov	r9, r0
 800f2ce:	4607      	mov	r7, r0
 800f2d0:	46b2      	mov	sl, r6
 800f2d2:	e779      	b.n	800f1c8 <_dtoa_r+0x8c8>
 800f2d4:	f000 fc82 	bl	800fbdc <__multadd>
 800f2d8:	4639      	mov	r1, r7
 800f2da:	4681      	mov	r9, r0
 800f2dc:	2300      	movs	r3, #0
 800f2de:	220a      	movs	r2, #10
 800f2e0:	4620      	mov	r0, r4
 800f2e2:	f000 fc7b 	bl	800fbdc <__multadd>
 800f2e6:	4607      	mov	r7, r0
 800f2e8:	e7f2      	b.n	800f2d0 <_dtoa_r+0x9d0>
 800f2ea:	f04f 0900 	mov.w	r9, #0
 800f2ee:	2201      	movs	r2, #1
 800f2f0:	9901      	ldr	r1, [sp, #4]
 800f2f2:	4620      	mov	r0, r4
 800f2f4:	f000 fe26 	bl	800ff44 <__lshift>
 800f2f8:	4629      	mov	r1, r5
 800f2fa:	9001      	str	r0, [sp, #4]
 800f2fc:	f000 fe76 	bl	800ffec <__mcmp>
 800f300:	2800      	cmp	r0, #0
 800f302:	dcb9      	bgt.n	800f278 <_dtoa_r+0x978>
 800f304:	d102      	bne.n	800f30c <_dtoa_r+0xa0c>
 800f306:	f018 0f01 	tst.w	r8, #1
 800f30a:	d1b5      	bne.n	800f278 <_dtoa_r+0x978>
 800f30c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f310:	2b30      	cmp	r3, #48	; 0x30
 800f312:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 800f316:	f47f af11 	bne.w	800f13c <_dtoa_r+0x83c>
 800f31a:	4616      	mov	r6, r2
 800f31c:	e7f6      	b.n	800f30c <_dtoa_r+0xa0c>
 800f31e:	9b04      	ldr	r3, [sp, #16]
 800f320:	4293      	cmp	r3, r2
 800f322:	d105      	bne.n	800f330 <_dtoa_r+0xa30>
 800f324:	9a04      	ldr	r2, [sp, #16]
 800f326:	f10b 0b01 	add.w	fp, fp, #1
 800f32a:	2331      	movs	r3, #49	; 0x31
 800f32c:	7013      	strb	r3, [r2, #0]
 800f32e:	e705      	b.n	800f13c <_dtoa_r+0x83c>
 800f330:	4616      	mov	r6, r2
 800f332:	e7a1      	b.n	800f278 <_dtoa_r+0x978>
 800f334:	4b16      	ldr	r3, [pc, #88]	; (800f390 <_dtoa_r+0xa90>)
 800f336:	f7ff bb48 	b.w	800e9ca <_dtoa_r+0xca>
 800f33a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	f47f ab23 	bne.w	800e988 <_dtoa_r+0x88>
 800f342:	4b14      	ldr	r3, [pc, #80]	; (800f394 <_dtoa_r+0xa94>)
 800f344:	f7ff bb41 	b.w	800e9ca <_dtoa_r+0xca>
 800f348:	9b08      	ldr	r3, [sp, #32]
 800f34a:	2b01      	cmp	r3, #1
 800f34c:	f77f ae3b 	ble.w	800efc6 <_dtoa_r+0x6c6>
 800f350:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800f354:	e64f      	b.n	800eff6 <_dtoa_r+0x6f6>
 800f356:	9b06      	ldr	r3, [sp, #24]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	dc03      	bgt.n	800f364 <_dtoa_r+0xa64>
 800f35c:	9b08      	ldr	r3, [sp, #32]
 800f35e:	2b02      	cmp	r3, #2
 800f360:	f73f aed7 	bgt.w	800f112 <_dtoa_r+0x812>
 800f364:	9e04      	ldr	r6, [sp, #16]
 800f366:	9801      	ldr	r0, [sp, #4]
 800f368:	4629      	mov	r1, r5
 800f36a:	f7ff fa3d 	bl	800e7e8 <quorem>
 800f36e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f372:	f806 8b01 	strb.w	r8, [r6], #1
 800f376:	9b04      	ldr	r3, [sp, #16]
 800f378:	9a06      	ldr	r2, [sp, #24]
 800f37a:	1af3      	subs	r3, r6, r3
 800f37c:	429a      	cmp	r2, r3
 800f37e:	ddb4      	ble.n	800f2ea <_dtoa_r+0x9ea>
 800f380:	2300      	movs	r3, #0
 800f382:	220a      	movs	r2, #10
 800f384:	9901      	ldr	r1, [sp, #4]
 800f386:	4620      	mov	r0, r4
 800f388:	f000 fc28 	bl	800fbdc <__multadd>
 800f38c:	9001      	str	r0, [sp, #4]
 800f38e:	e7ea      	b.n	800f366 <_dtoa_r+0xa66>
 800f390:	08011d30 	.word	0x08011d30
 800f394:	08011db0 	.word	0x08011db0

0800f398 <rshift>:
 800f398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f39a:	6906      	ldr	r6, [r0, #16]
 800f39c:	114b      	asrs	r3, r1, #5
 800f39e:	429e      	cmp	r6, r3
 800f3a0:	f100 0414 	add.w	r4, r0, #20
 800f3a4:	dd30      	ble.n	800f408 <rshift+0x70>
 800f3a6:	f011 011f 	ands.w	r1, r1, #31
 800f3aa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800f3ae:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800f3b2:	d108      	bne.n	800f3c6 <rshift+0x2e>
 800f3b4:	4621      	mov	r1, r4
 800f3b6:	42b2      	cmp	r2, r6
 800f3b8:	460b      	mov	r3, r1
 800f3ba:	d211      	bcs.n	800f3e0 <rshift+0x48>
 800f3bc:	f852 3b04 	ldr.w	r3, [r2], #4
 800f3c0:	f841 3b04 	str.w	r3, [r1], #4
 800f3c4:	e7f7      	b.n	800f3b6 <rshift+0x1e>
 800f3c6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800f3ca:	f1c1 0c20 	rsb	ip, r1, #32
 800f3ce:	40cd      	lsrs	r5, r1
 800f3d0:	3204      	adds	r2, #4
 800f3d2:	4623      	mov	r3, r4
 800f3d4:	42b2      	cmp	r2, r6
 800f3d6:	4617      	mov	r7, r2
 800f3d8:	d30c      	bcc.n	800f3f4 <rshift+0x5c>
 800f3da:	601d      	str	r5, [r3, #0]
 800f3dc:	b105      	cbz	r5, 800f3e0 <rshift+0x48>
 800f3de:	3304      	adds	r3, #4
 800f3e0:	1b1a      	subs	r2, r3, r4
 800f3e2:	42a3      	cmp	r3, r4
 800f3e4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f3e8:	bf08      	it	eq
 800f3ea:	2300      	moveq	r3, #0
 800f3ec:	6102      	str	r2, [r0, #16]
 800f3ee:	bf08      	it	eq
 800f3f0:	6143      	streq	r3, [r0, #20]
 800f3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3f4:	683f      	ldr	r7, [r7, #0]
 800f3f6:	fa07 f70c 	lsl.w	r7, r7, ip
 800f3fa:	433d      	orrs	r5, r7
 800f3fc:	f843 5b04 	str.w	r5, [r3], #4
 800f400:	f852 5b04 	ldr.w	r5, [r2], #4
 800f404:	40cd      	lsrs	r5, r1
 800f406:	e7e5      	b.n	800f3d4 <rshift+0x3c>
 800f408:	4623      	mov	r3, r4
 800f40a:	e7e9      	b.n	800f3e0 <rshift+0x48>

0800f40c <__hexdig_fun>:
 800f40c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f410:	2b09      	cmp	r3, #9
 800f412:	d802      	bhi.n	800f41a <__hexdig_fun+0xe>
 800f414:	3820      	subs	r0, #32
 800f416:	b2c0      	uxtb	r0, r0
 800f418:	4770      	bx	lr
 800f41a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f41e:	2b05      	cmp	r3, #5
 800f420:	d801      	bhi.n	800f426 <__hexdig_fun+0x1a>
 800f422:	3847      	subs	r0, #71	; 0x47
 800f424:	e7f7      	b.n	800f416 <__hexdig_fun+0xa>
 800f426:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f42a:	2b05      	cmp	r3, #5
 800f42c:	d801      	bhi.n	800f432 <__hexdig_fun+0x26>
 800f42e:	3827      	subs	r0, #39	; 0x27
 800f430:	e7f1      	b.n	800f416 <__hexdig_fun+0xa>
 800f432:	2000      	movs	r0, #0
 800f434:	4770      	bx	lr

0800f436 <__gethex>:
 800f436:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f43a:	b08b      	sub	sp, #44	; 0x2c
 800f43c:	468a      	mov	sl, r1
 800f43e:	9002      	str	r0, [sp, #8]
 800f440:	9816      	ldr	r0, [sp, #88]	; 0x58
 800f442:	9306      	str	r3, [sp, #24]
 800f444:	4690      	mov	r8, r2
 800f446:	f000 fad0 	bl	800f9ea <__localeconv_l>
 800f44a:	6803      	ldr	r3, [r0, #0]
 800f44c:	9303      	str	r3, [sp, #12]
 800f44e:	4618      	mov	r0, r3
 800f450:	f7f0 ff46 	bl	80002e0 <strlen>
 800f454:	9b03      	ldr	r3, [sp, #12]
 800f456:	9001      	str	r0, [sp, #4]
 800f458:	4403      	add	r3, r0
 800f45a:	f04f 0b00 	mov.w	fp, #0
 800f45e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f462:	9307      	str	r3, [sp, #28]
 800f464:	f8da 3000 	ldr.w	r3, [sl]
 800f468:	3302      	adds	r3, #2
 800f46a:	461f      	mov	r7, r3
 800f46c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f470:	2830      	cmp	r0, #48	; 0x30
 800f472:	d06c      	beq.n	800f54e <__gethex+0x118>
 800f474:	f7ff ffca 	bl	800f40c <__hexdig_fun>
 800f478:	4604      	mov	r4, r0
 800f47a:	2800      	cmp	r0, #0
 800f47c:	d16a      	bne.n	800f554 <__gethex+0x11e>
 800f47e:	9a01      	ldr	r2, [sp, #4]
 800f480:	9903      	ldr	r1, [sp, #12]
 800f482:	4638      	mov	r0, r7
 800f484:	f7fe fa39 	bl	800d8fa <strncmp>
 800f488:	2800      	cmp	r0, #0
 800f48a:	d166      	bne.n	800f55a <__gethex+0x124>
 800f48c:	9b01      	ldr	r3, [sp, #4]
 800f48e:	5cf8      	ldrb	r0, [r7, r3]
 800f490:	18fe      	adds	r6, r7, r3
 800f492:	f7ff ffbb 	bl	800f40c <__hexdig_fun>
 800f496:	2800      	cmp	r0, #0
 800f498:	d062      	beq.n	800f560 <__gethex+0x12a>
 800f49a:	4633      	mov	r3, r6
 800f49c:	7818      	ldrb	r0, [r3, #0]
 800f49e:	2830      	cmp	r0, #48	; 0x30
 800f4a0:	461f      	mov	r7, r3
 800f4a2:	f103 0301 	add.w	r3, r3, #1
 800f4a6:	d0f9      	beq.n	800f49c <__gethex+0x66>
 800f4a8:	f7ff ffb0 	bl	800f40c <__hexdig_fun>
 800f4ac:	fab0 f580 	clz	r5, r0
 800f4b0:	096d      	lsrs	r5, r5, #5
 800f4b2:	4634      	mov	r4, r6
 800f4b4:	f04f 0b01 	mov.w	fp, #1
 800f4b8:	463a      	mov	r2, r7
 800f4ba:	4616      	mov	r6, r2
 800f4bc:	3201      	adds	r2, #1
 800f4be:	7830      	ldrb	r0, [r6, #0]
 800f4c0:	f7ff ffa4 	bl	800f40c <__hexdig_fun>
 800f4c4:	2800      	cmp	r0, #0
 800f4c6:	d1f8      	bne.n	800f4ba <__gethex+0x84>
 800f4c8:	9a01      	ldr	r2, [sp, #4]
 800f4ca:	9903      	ldr	r1, [sp, #12]
 800f4cc:	4630      	mov	r0, r6
 800f4ce:	f7fe fa14 	bl	800d8fa <strncmp>
 800f4d2:	b950      	cbnz	r0, 800f4ea <__gethex+0xb4>
 800f4d4:	b954      	cbnz	r4, 800f4ec <__gethex+0xb6>
 800f4d6:	9b01      	ldr	r3, [sp, #4]
 800f4d8:	18f4      	adds	r4, r6, r3
 800f4da:	4622      	mov	r2, r4
 800f4dc:	4616      	mov	r6, r2
 800f4de:	3201      	adds	r2, #1
 800f4e0:	7830      	ldrb	r0, [r6, #0]
 800f4e2:	f7ff ff93 	bl	800f40c <__hexdig_fun>
 800f4e6:	2800      	cmp	r0, #0
 800f4e8:	d1f8      	bne.n	800f4dc <__gethex+0xa6>
 800f4ea:	b10c      	cbz	r4, 800f4f0 <__gethex+0xba>
 800f4ec:	1ba4      	subs	r4, r4, r6
 800f4ee:	00a4      	lsls	r4, r4, #2
 800f4f0:	7833      	ldrb	r3, [r6, #0]
 800f4f2:	2b50      	cmp	r3, #80	; 0x50
 800f4f4:	d001      	beq.n	800f4fa <__gethex+0xc4>
 800f4f6:	2b70      	cmp	r3, #112	; 0x70
 800f4f8:	d140      	bne.n	800f57c <__gethex+0x146>
 800f4fa:	7873      	ldrb	r3, [r6, #1]
 800f4fc:	2b2b      	cmp	r3, #43	; 0x2b
 800f4fe:	d031      	beq.n	800f564 <__gethex+0x12e>
 800f500:	2b2d      	cmp	r3, #45	; 0x2d
 800f502:	d033      	beq.n	800f56c <__gethex+0x136>
 800f504:	1c71      	adds	r1, r6, #1
 800f506:	f04f 0900 	mov.w	r9, #0
 800f50a:	7808      	ldrb	r0, [r1, #0]
 800f50c:	f7ff ff7e 	bl	800f40c <__hexdig_fun>
 800f510:	1e43      	subs	r3, r0, #1
 800f512:	b2db      	uxtb	r3, r3
 800f514:	2b18      	cmp	r3, #24
 800f516:	d831      	bhi.n	800f57c <__gethex+0x146>
 800f518:	f1a0 0210 	sub.w	r2, r0, #16
 800f51c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f520:	f7ff ff74 	bl	800f40c <__hexdig_fun>
 800f524:	1e43      	subs	r3, r0, #1
 800f526:	b2db      	uxtb	r3, r3
 800f528:	2b18      	cmp	r3, #24
 800f52a:	d922      	bls.n	800f572 <__gethex+0x13c>
 800f52c:	f1b9 0f00 	cmp.w	r9, #0
 800f530:	d000      	beq.n	800f534 <__gethex+0xfe>
 800f532:	4252      	negs	r2, r2
 800f534:	4414      	add	r4, r2
 800f536:	f8ca 1000 	str.w	r1, [sl]
 800f53a:	b30d      	cbz	r5, 800f580 <__gethex+0x14a>
 800f53c:	f1bb 0f00 	cmp.w	fp, #0
 800f540:	bf0c      	ite	eq
 800f542:	2706      	moveq	r7, #6
 800f544:	2700      	movne	r7, #0
 800f546:	4638      	mov	r0, r7
 800f548:	b00b      	add	sp, #44	; 0x2c
 800f54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f54e:	f10b 0b01 	add.w	fp, fp, #1
 800f552:	e78a      	b.n	800f46a <__gethex+0x34>
 800f554:	2500      	movs	r5, #0
 800f556:	462c      	mov	r4, r5
 800f558:	e7ae      	b.n	800f4b8 <__gethex+0x82>
 800f55a:	463e      	mov	r6, r7
 800f55c:	2501      	movs	r5, #1
 800f55e:	e7c7      	b.n	800f4f0 <__gethex+0xba>
 800f560:	4604      	mov	r4, r0
 800f562:	e7fb      	b.n	800f55c <__gethex+0x126>
 800f564:	f04f 0900 	mov.w	r9, #0
 800f568:	1cb1      	adds	r1, r6, #2
 800f56a:	e7ce      	b.n	800f50a <__gethex+0xd4>
 800f56c:	f04f 0901 	mov.w	r9, #1
 800f570:	e7fa      	b.n	800f568 <__gethex+0x132>
 800f572:	230a      	movs	r3, #10
 800f574:	fb03 0202 	mla	r2, r3, r2, r0
 800f578:	3a10      	subs	r2, #16
 800f57a:	e7cf      	b.n	800f51c <__gethex+0xe6>
 800f57c:	4631      	mov	r1, r6
 800f57e:	e7da      	b.n	800f536 <__gethex+0x100>
 800f580:	1bf3      	subs	r3, r6, r7
 800f582:	3b01      	subs	r3, #1
 800f584:	4629      	mov	r1, r5
 800f586:	2b07      	cmp	r3, #7
 800f588:	dc49      	bgt.n	800f61e <__gethex+0x1e8>
 800f58a:	9802      	ldr	r0, [sp, #8]
 800f58c:	f000 fadb 	bl	800fb46 <_Balloc>
 800f590:	9b01      	ldr	r3, [sp, #4]
 800f592:	f100 0914 	add.w	r9, r0, #20
 800f596:	f04f 0b00 	mov.w	fp, #0
 800f59a:	f1c3 0301 	rsb	r3, r3, #1
 800f59e:	4605      	mov	r5, r0
 800f5a0:	f8cd 9010 	str.w	r9, [sp, #16]
 800f5a4:	46da      	mov	sl, fp
 800f5a6:	9308      	str	r3, [sp, #32]
 800f5a8:	42b7      	cmp	r7, r6
 800f5aa:	d33b      	bcc.n	800f624 <__gethex+0x1ee>
 800f5ac:	9804      	ldr	r0, [sp, #16]
 800f5ae:	f840 ab04 	str.w	sl, [r0], #4
 800f5b2:	eba0 0009 	sub.w	r0, r0, r9
 800f5b6:	1080      	asrs	r0, r0, #2
 800f5b8:	6128      	str	r0, [r5, #16]
 800f5ba:	0147      	lsls	r7, r0, #5
 800f5bc:	4650      	mov	r0, sl
 800f5be:	f000 fb86 	bl	800fcce <__hi0bits>
 800f5c2:	f8d8 6000 	ldr.w	r6, [r8]
 800f5c6:	1a3f      	subs	r7, r7, r0
 800f5c8:	42b7      	cmp	r7, r6
 800f5ca:	dd64      	ble.n	800f696 <__gethex+0x260>
 800f5cc:	1bbf      	subs	r7, r7, r6
 800f5ce:	4639      	mov	r1, r7
 800f5d0:	4628      	mov	r0, r5
 800f5d2:	f000 fe96 	bl	8010302 <__any_on>
 800f5d6:	4682      	mov	sl, r0
 800f5d8:	b178      	cbz	r0, 800f5fa <__gethex+0x1c4>
 800f5da:	1e7b      	subs	r3, r7, #1
 800f5dc:	1159      	asrs	r1, r3, #5
 800f5de:	f003 021f 	and.w	r2, r3, #31
 800f5e2:	f04f 0a01 	mov.w	sl, #1
 800f5e6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f5ea:	fa0a f202 	lsl.w	r2, sl, r2
 800f5ee:	420a      	tst	r2, r1
 800f5f0:	d003      	beq.n	800f5fa <__gethex+0x1c4>
 800f5f2:	4553      	cmp	r3, sl
 800f5f4:	dc46      	bgt.n	800f684 <__gethex+0x24e>
 800f5f6:	f04f 0a02 	mov.w	sl, #2
 800f5fa:	4639      	mov	r1, r7
 800f5fc:	4628      	mov	r0, r5
 800f5fe:	f7ff fecb 	bl	800f398 <rshift>
 800f602:	443c      	add	r4, r7
 800f604:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f608:	42a3      	cmp	r3, r4
 800f60a:	da52      	bge.n	800f6b2 <__gethex+0x27c>
 800f60c:	4629      	mov	r1, r5
 800f60e:	9802      	ldr	r0, [sp, #8]
 800f610:	f000 facd 	bl	800fbae <_Bfree>
 800f614:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f616:	2300      	movs	r3, #0
 800f618:	6013      	str	r3, [r2, #0]
 800f61a:	27a3      	movs	r7, #163	; 0xa3
 800f61c:	e793      	b.n	800f546 <__gethex+0x110>
 800f61e:	3101      	adds	r1, #1
 800f620:	105b      	asrs	r3, r3, #1
 800f622:	e7b0      	b.n	800f586 <__gethex+0x150>
 800f624:	1e73      	subs	r3, r6, #1
 800f626:	9305      	str	r3, [sp, #20]
 800f628:	9a07      	ldr	r2, [sp, #28]
 800f62a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f62e:	4293      	cmp	r3, r2
 800f630:	d018      	beq.n	800f664 <__gethex+0x22e>
 800f632:	f1bb 0f20 	cmp.w	fp, #32
 800f636:	d107      	bne.n	800f648 <__gethex+0x212>
 800f638:	9b04      	ldr	r3, [sp, #16]
 800f63a:	f8c3 a000 	str.w	sl, [r3]
 800f63e:	3304      	adds	r3, #4
 800f640:	f04f 0a00 	mov.w	sl, #0
 800f644:	9304      	str	r3, [sp, #16]
 800f646:	46d3      	mov	fp, sl
 800f648:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f64c:	f7ff fede 	bl	800f40c <__hexdig_fun>
 800f650:	f000 000f 	and.w	r0, r0, #15
 800f654:	fa00 f00b 	lsl.w	r0, r0, fp
 800f658:	ea4a 0a00 	orr.w	sl, sl, r0
 800f65c:	f10b 0b04 	add.w	fp, fp, #4
 800f660:	9b05      	ldr	r3, [sp, #20]
 800f662:	e00d      	b.n	800f680 <__gethex+0x24a>
 800f664:	9b05      	ldr	r3, [sp, #20]
 800f666:	9a08      	ldr	r2, [sp, #32]
 800f668:	4413      	add	r3, r2
 800f66a:	42bb      	cmp	r3, r7
 800f66c:	d3e1      	bcc.n	800f632 <__gethex+0x1fc>
 800f66e:	4618      	mov	r0, r3
 800f670:	9a01      	ldr	r2, [sp, #4]
 800f672:	9903      	ldr	r1, [sp, #12]
 800f674:	9309      	str	r3, [sp, #36]	; 0x24
 800f676:	f7fe f940 	bl	800d8fa <strncmp>
 800f67a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f67c:	2800      	cmp	r0, #0
 800f67e:	d1d8      	bne.n	800f632 <__gethex+0x1fc>
 800f680:	461e      	mov	r6, r3
 800f682:	e791      	b.n	800f5a8 <__gethex+0x172>
 800f684:	1eb9      	subs	r1, r7, #2
 800f686:	4628      	mov	r0, r5
 800f688:	f000 fe3b 	bl	8010302 <__any_on>
 800f68c:	2800      	cmp	r0, #0
 800f68e:	d0b2      	beq.n	800f5f6 <__gethex+0x1c0>
 800f690:	f04f 0a03 	mov.w	sl, #3
 800f694:	e7b1      	b.n	800f5fa <__gethex+0x1c4>
 800f696:	da09      	bge.n	800f6ac <__gethex+0x276>
 800f698:	1bf7      	subs	r7, r6, r7
 800f69a:	4629      	mov	r1, r5
 800f69c:	463a      	mov	r2, r7
 800f69e:	9802      	ldr	r0, [sp, #8]
 800f6a0:	f000 fc50 	bl	800ff44 <__lshift>
 800f6a4:	1be4      	subs	r4, r4, r7
 800f6a6:	4605      	mov	r5, r0
 800f6a8:	f100 0914 	add.w	r9, r0, #20
 800f6ac:	f04f 0a00 	mov.w	sl, #0
 800f6b0:	e7a8      	b.n	800f604 <__gethex+0x1ce>
 800f6b2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f6b6:	42a0      	cmp	r0, r4
 800f6b8:	dd6a      	ble.n	800f790 <__gethex+0x35a>
 800f6ba:	1b04      	subs	r4, r0, r4
 800f6bc:	42a6      	cmp	r6, r4
 800f6be:	dc2e      	bgt.n	800f71e <__gethex+0x2e8>
 800f6c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f6c4:	2b02      	cmp	r3, #2
 800f6c6:	d022      	beq.n	800f70e <__gethex+0x2d8>
 800f6c8:	2b03      	cmp	r3, #3
 800f6ca:	d024      	beq.n	800f716 <__gethex+0x2e0>
 800f6cc:	2b01      	cmp	r3, #1
 800f6ce:	d115      	bne.n	800f6fc <__gethex+0x2c6>
 800f6d0:	42a6      	cmp	r6, r4
 800f6d2:	d113      	bne.n	800f6fc <__gethex+0x2c6>
 800f6d4:	2e01      	cmp	r6, #1
 800f6d6:	dc0b      	bgt.n	800f6f0 <__gethex+0x2ba>
 800f6d8:	9a06      	ldr	r2, [sp, #24]
 800f6da:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f6de:	6013      	str	r3, [r2, #0]
 800f6e0:	2301      	movs	r3, #1
 800f6e2:	612b      	str	r3, [r5, #16]
 800f6e4:	f8c9 3000 	str.w	r3, [r9]
 800f6e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f6ea:	2762      	movs	r7, #98	; 0x62
 800f6ec:	601d      	str	r5, [r3, #0]
 800f6ee:	e72a      	b.n	800f546 <__gethex+0x110>
 800f6f0:	1e71      	subs	r1, r6, #1
 800f6f2:	4628      	mov	r0, r5
 800f6f4:	f000 fe05 	bl	8010302 <__any_on>
 800f6f8:	2800      	cmp	r0, #0
 800f6fa:	d1ed      	bne.n	800f6d8 <__gethex+0x2a2>
 800f6fc:	4629      	mov	r1, r5
 800f6fe:	9802      	ldr	r0, [sp, #8]
 800f700:	f000 fa55 	bl	800fbae <_Bfree>
 800f704:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f706:	2300      	movs	r3, #0
 800f708:	6013      	str	r3, [r2, #0]
 800f70a:	2750      	movs	r7, #80	; 0x50
 800f70c:	e71b      	b.n	800f546 <__gethex+0x110>
 800f70e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f710:	2b00      	cmp	r3, #0
 800f712:	d0e1      	beq.n	800f6d8 <__gethex+0x2a2>
 800f714:	e7f2      	b.n	800f6fc <__gethex+0x2c6>
 800f716:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d1dd      	bne.n	800f6d8 <__gethex+0x2a2>
 800f71c:	e7ee      	b.n	800f6fc <__gethex+0x2c6>
 800f71e:	1e67      	subs	r7, r4, #1
 800f720:	f1ba 0f00 	cmp.w	sl, #0
 800f724:	d131      	bne.n	800f78a <__gethex+0x354>
 800f726:	b127      	cbz	r7, 800f732 <__gethex+0x2fc>
 800f728:	4639      	mov	r1, r7
 800f72a:	4628      	mov	r0, r5
 800f72c:	f000 fde9 	bl	8010302 <__any_on>
 800f730:	4682      	mov	sl, r0
 800f732:	117a      	asrs	r2, r7, #5
 800f734:	2301      	movs	r3, #1
 800f736:	f007 071f 	and.w	r7, r7, #31
 800f73a:	fa03 f707 	lsl.w	r7, r3, r7
 800f73e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800f742:	4621      	mov	r1, r4
 800f744:	421f      	tst	r7, r3
 800f746:	4628      	mov	r0, r5
 800f748:	bf18      	it	ne
 800f74a:	f04a 0a02 	orrne.w	sl, sl, #2
 800f74e:	1b36      	subs	r6, r6, r4
 800f750:	f7ff fe22 	bl	800f398 <rshift>
 800f754:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800f758:	2702      	movs	r7, #2
 800f75a:	f1ba 0f00 	cmp.w	sl, #0
 800f75e:	d048      	beq.n	800f7f2 <__gethex+0x3bc>
 800f760:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f764:	2b02      	cmp	r3, #2
 800f766:	d015      	beq.n	800f794 <__gethex+0x35e>
 800f768:	2b03      	cmp	r3, #3
 800f76a:	d017      	beq.n	800f79c <__gethex+0x366>
 800f76c:	2b01      	cmp	r3, #1
 800f76e:	d109      	bne.n	800f784 <__gethex+0x34e>
 800f770:	f01a 0f02 	tst.w	sl, #2
 800f774:	d006      	beq.n	800f784 <__gethex+0x34e>
 800f776:	f8d9 3000 	ldr.w	r3, [r9]
 800f77a:	ea4a 0a03 	orr.w	sl, sl, r3
 800f77e:	f01a 0f01 	tst.w	sl, #1
 800f782:	d10e      	bne.n	800f7a2 <__gethex+0x36c>
 800f784:	f047 0710 	orr.w	r7, r7, #16
 800f788:	e033      	b.n	800f7f2 <__gethex+0x3bc>
 800f78a:	f04f 0a01 	mov.w	sl, #1
 800f78e:	e7d0      	b.n	800f732 <__gethex+0x2fc>
 800f790:	2701      	movs	r7, #1
 800f792:	e7e2      	b.n	800f75a <__gethex+0x324>
 800f794:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f796:	f1c3 0301 	rsb	r3, r3, #1
 800f79a:	9315      	str	r3, [sp, #84]	; 0x54
 800f79c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d0f0      	beq.n	800f784 <__gethex+0x34e>
 800f7a2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800f7a6:	f105 0314 	add.w	r3, r5, #20
 800f7aa:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800f7ae:	eb03 010a 	add.w	r1, r3, sl
 800f7b2:	f04f 0c00 	mov.w	ip, #0
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7bc:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800f7c0:	d01c      	beq.n	800f7fc <__gethex+0x3c6>
 800f7c2:	3201      	adds	r2, #1
 800f7c4:	6002      	str	r2, [r0, #0]
 800f7c6:	2f02      	cmp	r7, #2
 800f7c8:	f105 0314 	add.w	r3, r5, #20
 800f7cc:	d138      	bne.n	800f840 <__gethex+0x40a>
 800f7ce:	f8d8 2000 	ldr.w	r2, [r8]
 800f7d2:	3a01      	subs	r2, #1
 800f7d4:	42b2      	cmp	r2, r6
 800f7d6:	d10a      	bne.n	800f7ee <__gethex+0x3b8>
 800f7d8:	1171      	asrs	r1, r6, #5
 800f7da:	2201      	movs	r2, #1
 800f7dc:	f006 061f 	and.w	r6, r6, #31
 800f7e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f7e4:	fa02 f606 	lsl.w	r6, r2, r6
 800f7e8:	421e      	tst	r6, r3
 800f7ea:	bf18      	it	ne
 800f7ec:	4617      	movne	r7, r2
 800f7ee:	f047 0720 	orr.w	r7, r7, #32
 800f7f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f7f4:	601d      	str	r5, [r3, #0]
 800f7f6:	9b06      	ldr	r3, [sp, #24]
 800f7f8:	601c      	str	r4, [r3, #0]
 800f7fa:	e6a4      	b.n	800f546 <__gethex+0x110>
 800f7fc:	4299      	cmp	r1, r3
 800f7fe:	f843 cc04 	str.w	ip, [r3, #-4]
 800f802:	d8d8      	bhi.n	800f7b6 <__gethex+0x380>
 800f804:	68ab      	ldr	r3, [r5, #8]
 800f806:	4599      	cmp	r9, r3
 800f808:	db12      	blt.n	800f830 <__gethex+0x3fa>
 800f80a:	6869      	ldr	r1, [r5, #4]
 800f80c:	9802      	ldr	r0, [sp, #8]
 800f80e:	3101      	adds	r1, #1
 800f810:	f000 f999 	bl	800fb46 <_Balloc>
 800f814:	692a      	ldr	r2, [r5, #16]
 800f816:	3202      	adds	r2, #2
 800f818:	f105 010c 	add.w	r1, r5, #12
 800f81c:	4683      	mov	fp, r0
 800f81e:	0092      	lsls	r2, r2, #2
 800f820:	300c      	adds	r0, #12
 800f822:	f000 f983 	bl	800fb2c <memcpy>
 800f826:	4629      	mov	r1, r5
 800f828:	9802      	ldr	r0, [sp, #8]
 800f82a:	f000 f9c0 	bl	800fbae <_Bfree>
 800f82e:	465d      	mov	r5, fp
 800f830:	692b      	ldr	r3, [r5, #16]
 800f832:	1c5a      	adds	r2, r3, #1
 800f834:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800f838:	612a      	str	r2, [r5, #16]
 800f83a:	2201      	movs	r2, #1
 800f83c:	615a      	str	r2, [r3, #20]
 800f83e:	e7c2      	b.n	800f7c6 <__gethex+0x390>
 800f840:	692a      	ldr	r2, [r5, #16]
 800f842:	454a      	cmp	r2, r9
 800f844:	dd0b      	ble.n	800f85e <__gethex+0x428>
 800f846:	2101      	movs	r1, #1
 800f848:	4628      	mov	r0, r5
 800f84a:	f7ff fda5 	bl	800f398 <rshift>
 800f84e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f852:	3401      	adds	r4, #1
 800f854:	42a3      	cmp	r3, r4
 800f856:	f6ff aed9 	blt.w	800f60c <__gethex+0x1d6>
 800f85a:	2701      	movs	r7, #1
 800f85c:	e7c7      	b.n	800f7ee <__gethex+0x3b8>
 800f85e:	f016 061f 	ands.w	r6, r6, #31
 800f862:	d0fa      	beq.n	800f85a <__gethex+0x424>
 800f864:	449a      	add	sl, r3
 800f866:	f1c6 0620 	rsb	r6, r6, #32
 800f86a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800f86e:	f000 fa2e 	bl	800fcce <__hi0bits>
 800f872:	42b0      	cmp	r0, r6
 800f874:	dbe7      	blt.n	800f846 <__gethex+0x410>
 800f876:	e7f0      	b.n	800f85a <__gethex+0x424>

0800f878 <L_shift>:
 800f878:	f1c2 0208 	rsb	r2, r2, #8
 800f87c:	0092      	lsls	r2, r2, #2
 800f87e:	b570      	push	{r4, r5, r6, lr}
 800f880:	f1c2 0620 	rsb	r6, r2, #32
 800f884:	6843      	ldr	r3, [r0, #4]
 800f886:	6804      	ldr	r4, [r0, #0]
 800f888:	fa03 f506 	lsl.w	r5, r3, r6
 800f88c:	432c      	orrs	r4, r5
 800f88e:	40d3      	lsrs	r3, r2
 800f890:	6004      	str	r4, [r0, #0]
 800f892:	f840 3f04 	str.w	r3, [r0, #4]!
 800f896:	4288      	cmp	r0, r1
 800f898:	d3f4      	bcc.n	800f884 <L_shift+0xc>
 800f89a:	bd70      	pop	{r4, r5, r6, pc}

0800f89c <__match>:
 800f89c:	b530      	push	{r4, r5, lr}
 800f89e:	6803      	ldr	r3, [r0, #0]
 800f8a0:	3301      	adds	r3, #1
 800f8a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f8a6:	b914      	cbnz	r4, 800f8ae <__match+0x12>
 800f8a8:	6003      	str	r3, [r0, #0]
 800f8aa:	2001      	movs	r0, #1
 800f8ac:	bd30      	pop	{r4, r5, pc}
 800f8ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f8b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f8b6:	2d19      	cmp	r5, #25
 800f8b8:	bf98      	it	ls
 800f8ba:	3220      	addls	r2, #32
 800f8bc:	42a2      	cmp	r2, r4
 800f8be:	d0f0      	beq.n	800f8a2 <__match+0x6>
 800f8c0:	2000      	movs	r0, #0
 800f8c2:	e7f3      	b.n	800f8ac <__match+0x10>

0800f8c4 <__hexnan>:
 800f8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8c8:	680b      	ldr	r3, [r1, #0]
 800f8ca:	6801      	ldr	r1, [r0, #0]
 800f8cc:	115f      	asrs	r7, r3, #5
 800f8ce:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800f8d2:	f013 031f 	ands.w	r3, r3, #31
 800f8d6:	b087      	sub	sp, #28
 800f8d8:	bf18      	it	ne
 800f8da:	3704      	addne	r7, #4
 800f8dc:	2500      	movs	r5, #0
 800f8de:	1f3e      	subs	r6, r7, #4
 800f8e0:	4682      	mov	sl, r0
 800f8e2:	4690      	mov	r8, r2
 800f8e4:	9301      	str	r3, [sp, #4]
 800f8e6:	f847 5c04 	str.w	r5, [r7, #-4]
 800f8ea:	46b1      	mov	r9, r6
 800f8ec:	4634      	mov	r4, r6
 800f8ee:	9502      	str	r5, [sp, #8]
 800f8f0:	46ab      	mov	fp, r5
 800f8f2:	784a      	ldrb	r2, [r1, #1]
 800f8f4:	1c4b      	adds	r3, r1, #1
 800f8f6:	9303      	str	r3, [sp, #12]
 800f8f8:	b342      	cbz	r2, 800f94c <__hexnan+0x88>
 800f8fa:	4610      	mov	r0, r2
 800f8fc:	9105      	str	r1, [sp, #20]
 800f8fe:	9204      	str	r2, [sp, #16]
 800f900:	f7ff fd84 	bl	800f40c <__hexdig_fun>
 800f904:	2800      	cmp	r0, #0
 800f906:	d143      	bne.n	800f990 <__hexnan+0xcc>
 800f908:	9a04      	ldr	r2, [sp, #16]
 800f90a:	9905      	ldr	r1, [sp, #20]
 800f90c:	2a20      	cmp	r2, #32
 800f90e:	d818      	bhi.n	800f942 <__hexnan+0x7e>
 800f910:	9b02      	ldr	r3, [sp, #8]
 800f912:	459b      	cmp	fp, r3
 800f914:	dd13      	ble.n	800f93e <__hexnan+0x7a>
 800f916:	454c      	cmp	r4, r9
 800f918:	d206      	bcs.n	800f928 <__hexnan+0x64>
 800f91a:	2d07      	cmp	r5, #7
 800f91c:	dc04      	bgt.n	800f928 <__hexnan+0x64>
 800f91e:	462a      	mov	r2, r5
 800f920:	4649      	mov	r1, r9
 800f922:	4620      	mov	r0, r4
 800f924:	f7ff ffa8 	bl	800f878 <L_shift>
 800f928:	4544      	cmp	r4, r8
 800f92a:	d944      	bls.n	800f9b6 <__hexnan+0xf2>
 800f92c:	2300      	movs	r3, #0
 800f92e:	f1a4 0904 	sub.w	r9, r4, #4
 800f932:	f844 3c04 	str.w	r3, [r4, #-4]
 800f936:	f8cd b008 	str.w	fp, [sp, #8]
 800f93a:	464c      	mov	r4, r9
 800f93c:	461d      	mov	r5, r3
 800f93e:	9903      	ldr	r1, [sp, #12]
 800f940:	e7d7      	b.n	800f8f2 <__hexnan+0x2e>
 800f942:	2a29      	cmp	r2, #41	; 0x29
 800f944:	d14a      	bne.n	800f9dc <__hexnan+0x118>
 800f946:	3102      	adds	r1, #2
 800f948:	f8ca 1000 	str.w	r1, [sl]
 800f94c:	f1bb 0f00 	cmp.w	fp, #0
 800f950:	d044      	beq.n	800f9dc <__hexnan+0x118>
 800f952:	454c      	cmp	r4, r9
 800f954:	d206      	bcs.n	800f964 <__hexnan+0xa0>
 800f956:	2d07      	cmp	r5, #7
 800f958:	dc04      	bgt.n	800f964 <__hexnan+0xa0>
 800f95a:	462a      	mov	r2, r5
 800f95c:	4649      	mov	r1, r9
 800f95e:	4620      	mov	r0, r4
 800f960:	f7ff ff8a 	bl	800f878 <L_shift>
 800f964:	4544      	cmp	r4, r8
 800f966:	d928      	bls.n	800f9ba <__hexnan+0xf6>
 800f968:	4643      	mov	r3, r8
 800f96a:	f854 2b04 	ldr.w	r2, [r4], #4
 800f96e:	f843 2b04 	str.w	r2, [r3], #4
 800f972:	42a6      	cmp	r6, r4
 800f974:	d2f9      	bcs.n	800f96a <__hexnan+0xa6>
 800f976:	2200      	movs	r2, #0
 800f978:	f843 2b04 	str.w	r2, [r3], #4
 800f97c:	429e      	cmp	r6, r3
 800f97e:	d2fb      	bcs.n	800f978 <__hexnan+0xb4>
 800f980:	6833      	ldr	r3, [r6, #0]
 800f982:	b91b      	cbnz	r3, 800f98c <__hexnan+0xc8>
 800f984:	4546      	cmp	r6, r8
 800f986:	d127      	bne.n	800f9d8 <__hexnan+0x114>
 800f988:	2301      	movs	r3, #1
 800f98a:	6033      	str	r3, [r6, #0]
 800f98c:	2005      	movs	r0, #5
 800f98e:	e026      	b.n	800f9de <__hexnan+0x11a>
 800f990:	3501      	adds	r5, #1
 800f992:	2d08      	cmp	r5, #8
 800f994:	f10b 0b01 	add.w	fp, fp, #1
 800f998:	dd06      	ble.n	800f9a8 <__hexnan+0xe4>
 800f99a:	4544      	cmp	r4, r8
 800f99c:	d9cf      	bls.n	800f93e <__hexnan+0x7a>
 800f99e:	2300      	movs	r3, #0
 800f9a0:	f844 3c04 	str.w	r3, [r4, #-4]
 800f9a4:	2501      	movs	r5, #1
 800f9a6:	3c04      	subs	r4, #4
 800f9a8:	6822      	ldr	r2, [r4, #0]
 800f9aa:	f000 000f 	and.w	r0, r0, #15
 800f9ae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f9b2:	6020      	str	r0, [r4, #0]
 800f9b4:	e7c3      	b.n	800f93e <__hexnan+0x7a>
 800f9b6:	2508      	movs	r5, #8
 800f9b8:	e7c1      	b.n	800f93e <__hexnan+0x7a>
 800f9ba:	9b01      	ldr	r3, [sp, #4]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d0df      	beq.n	800f980 <__hexnan+0xbc>
 800f9c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f9c4:	f1c3 0320 	rsb	r3, r3, #32
 800f9c8:	fa22 f303 	lsr.w	r3, r2, r3
 800f9cc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800f9d0:	401a      	ands	r2, r3
 800f9d2:	f847 2c04 	str.w	r2, [r7, #-4]
 800f9d6:	e7d3      	b.n	800f980 <__hexnan+0xbc>
 800f9d8:	3e04      	subs	r6, #4
 800f9da:	e7d1      	b.n	800f980 <__hexnan+0xbc>
 800f9dc:	2004      	movs	r0, #4
 800f9de:	b007      	add	sp, #28
 800f9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f9e4 <__locale_ctype_ptr_l>:
 800f9e4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800f9e8:	4770      	bx	lr

0800f9ea <__localeconv_l>:
 800f9ea:	30f0      	adds	r0, #240	; 0xf0
 800f9ec:	4770      	bx	lr
	...

0800f9f0 <_localeconv_r>:
 800f9f0:	4b04      	ldr	r3, [pc, #16]	; (800fa04 <_localeconv_r+0x14>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	6a18      	ldr	r0, [r3, #32]
 800f9f6:	4b04      	ldr	r3, [pc, #16]	; (800fa08 <_localeconv_r+0x18>)
 800f9f8:	2800      	cmp	r0, #0
 800f9fa:	bf08      	it	eq
 800f9fc:	4618      	moveq	r0, r3
 800f9fe:	30f0      	adds	r0, #240	; 0xf0
 800fa00:	4770      	bx	lr
 800fa02:	bf00      	nop
 800fa04:	24000018 	.word	0x24000018
 800fa08:	2400007c 	.word	0x2400007c

0800fa0c <_lseek_r>:
 800fa0c:	b538      	push	{r3, r4, r5, lr}
 800fa0e:	4c07      	ldr	r4, [pc, #28]	; (800fa2c <_lseek_r+0x20>)
 800fa10:	4605      	mov	r5, r0
 800fa12:	4608      	mov	r0, r1
 800fa14:	4611      	mov	r1, r2
 800fa16:	2200      	movs	r2, #0
 800fa18:	6022      	str	r2, [r4, #0]
 800fa1a:	461a      	mov	r2, r3
 800fa1c:	f7f2 fa30 	bl	8001e80 <_lseek>
 800fa20:	1c43      	adds	r3, r0, #1
 800fa22:	d102      	bne.n	800fa2a <_lseek_r+0x1e>
 800fa24:	6823      	ldr	r3, [r4, #0]
 800fa26:	b103      	cbz	r3, 800fa2a <_lseek_r+0x1e>
 800fa28:	602b      	str	r3, [r5, #0]
 800fa2a:	bd38      	pop	{r3, r4, r5, pc}
 800fa2c:	24005a68 	.word	0x24005a68

0800fa30 <__swhatbuf_r>:
 800fa30:	b570      	push	{r4, r5, r6, lr}
 800fa32:	460e      	mov	r6, r1
 800fa34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa38:	2900      	cmp	r1, #0
 800fa3a:	b096      	sub	sp, #88	; 0x58
 800fa3c:	4614      	mov	r4, r2
 800fa3e:	461d      	mov	r5, r3
 800fa40:	da07      	bge.n	800fa52 <__swhatbuf_r+0x22>
 800fa42:	2300      	movs	r3, #0
 800fa44:	602b      	str	r3, [r5, #0]
 800fa46:	89b3      	ldrh	r3, [r6, #12]
 800fa48:	061a      	lsls	r2, r3, #24
 800fa4a:	d410      	bmi.n	800fa6e <__swhatbuf_r+0x3e>
 800fa4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa50:	e00e      	b.n	800fa70 <__swhatbuf_r+0x40>
 800fa52:	466a      	mov	r2, sp
 800fa54:	f000 ff36 	bl	80108c4 <_fstat_r>
 800fa58:	2800      	cmp	r0, #0
 800fa5a:	dbf2      	blt.n	800fa42 <__swhatbuf_r+0x12>
 800fa5c:	9a01      	ldr	r2, [sp, #4]
 800fa5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fa62:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fa66:	425a      	negs	r2, r3
 800fa68:	415a      	adcs	r2, r3
 800fa6a:	602a      	str	r2, [r5, #0]
 800fa6c:	e7ee      	b.n	800fa4c <__swhatbuf_r+0x1c>
 800fa6e:	2340      	movs	r3, #64	; 0x40
 800fa70:	2000      	movs	r0, #0
 800fa72:	6023      	str	r3, [r4, #0]
 800fa74:	b016      	add	sp, #88	; 0x58
 800fa76:	bd70      	pop	{r4, r5, r6, pc}

0800fa78 <__smakebuf_r>:
 800fa78:	898b      	ldrh	r3, [r1, #12]
 800fa7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fa7c:	079d      	lsls	r5, r3, #30
 800fa7e:	4606      	mov	r6, r0
 800fa80:	460c      	mov	r4, r1
 800fa82:	d507      	bpl.n	800fa94 <__smakebuf_r+0x1c>
 800fa84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fa88:	6023      	str	r3, [r4, #0]
 800fa8a:	6123      	str	r3, [r4, #16]
 800fa8c:	2301      	movs	r3, #1
 800fa8e:	6163      	str	r3, [r4, #20]
 800fa90:	b002      	add	sp, #8
 800fa92:	bd70      	pop	{r4, r5, r6, pc}
 800fa94:	ab01      	add	r3, sp, #4
 800fa96:	466a      	mov	r2, sp
 800fa98:	f7ff ffca 	bl	800fa30 <__swhatbuf_r>
 800fa9c:	9900      	ldr	r1, [sp, #0]
 800fa9e:	4605      	mov	r5, r0
 800faa0:	4630      	mov	r0, r6
 800faa2:	f7fc ffbf 	bl	800ca24 <_malloc_r>
 800faa6:	b948      	cbnz	r0, 800fabc <__smakebuf_r+0x44>
 800faa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800faac:	059a      	lsls	r2, r3, #22
 800faae:	d4ef      	bmi.n	800fa90 <__smakebuf_r+0x18>
 800fab0:	f023 0303 	bic.w	r3, r3, #3
 800fab4:	f043 0302 	orr.w	r3, r3, #2
 800fab8:	81a3      	strh	r3, [r4, #12]
 800faba:	e7e3      	b.n	800fa84 <__smakebuf_r+0xc>
 800fabc:	4b0d      	ldr	r3, [pc, #52]	; (800faf4 <__smakebuf_r+0x7c>)
 800fabe:	62b3      	str	r3, [r6, #40]	; 0x28
 800fac0:	89a3      	ldrh	r3, [r4, #12]
 800fac2:	6020      	str	r0, [r4, #0]
 800fac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fac8:	81a3      	strh	r3, [r4, #12]
 800faca:	9b00      	ldr	r3, [sp, #0]
 800facc:	6163      	str	r3, [r4, #20]
 800face:	9b01      	ldr	r3, [sp, #4]
 800fad0:	6120      	str	r0, [r4, #16]
 800fad2:	b15b      	cbz	r3, 800faec <__smakebuf_r+0x74>
 800fad4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fad8:	4630      	mov	r0, r6
 800fada:	f000 ff05 	bl	80108e8 <_isatty_r>
 800fade:	b128      	cbz	r0, 800faec <__smakebuf_r+0x74>
 800fae0:	89a3      	ldrh	r3, [r4, #12]
 800fae2:	f023 0303 	bic.w	r3, r3, #3
 800fae6:	f043 0301 	orr.w	r3, r3, #1
 800faea:	81a3      	strh	r3, [r4, #12]
 800faec:	89a3      	ldrh	r3, [r4, #12]
 800faee:	431d      	orrs	r5, r3
 800faf0:	81a5      	strh	r5, [r4, #12]
 800faf2:	e7cd      	b.n	800fa90 <__smakebuf_r+0x18>
 800faf4:	0800c7e5 	.word	0x0800c7e5

0800faf8 <malloc>:
 800faf8:	4b02      	ldr	r3, [pc, #8]	; (800fb04 <malloc+0xc>)
 800fafa:	4601      	mov	r1, r0
 800fafc:	6818      	ldr	r0, [r3, #0]
 800fafe:	f7fc bf91 	b.w	800ca24 <_malloc_r>
 800fb02:	bf00      	nop
 800fb04:	24000018 	.word	0x24000018

0800fb08 <__ascii_mbtowc>:
 800fb08:	b082      	sub	sp, #8
 800fb0a:	b901      	cbnz	r1, 800fb0e <__ascii_mbtowc+0x6>
 800fb0c:	a901      	add	r1, sp, #4
 800fb0e:	b142      	cbz	r2, 800fb22 <__ascii_mbtowc+0x1a>
 800fb10:	b14b      	cbz	r3, 800fb26 <__ascii_mbtowc+0x1e>
 800fb12:	7813      	ldrb	r3, [r2, #0]
 800fb14:	600b      	str	r3, [r1, #0]
 800fb16:	7812      	ldrb	r2, [r2, #0]
 800fb18:	1c10      	adds	r0, r2, #0
 800fb1a:	bf18      	it	ne
 800fb1c:	2001      	movne	r0, #1
 800fb1e:	b002      	add	sp, #8
 800fb20:	4770      	bx	lr
 800fb22:	4610      	mov	r0, r2
 800fb24:	e7fb      	b.n	800fb1e <__ascii_mbtowc+0x16>
 800fb26:	f06f 0001 	mvn.w	r0, #1
 800fb2a:	e7f8      	b.n	800fb1e <__ascii_mbtowc+0x16>

0800fb2c <memcpy>:
 800fb2c:	b510      	push	{r4, lr}
 800fb2e:	1e43      	subs	r3, r0, #1
 800fb30:	440a      	add	r2, r1
 800fb32:	4291      	cmp	r1, r2
 800fb34:	d100      	bne.n	800fb38 <memcpy+0xc>
 800fb36:	bd10      	pop	{r4, pc}
 800fb38:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb40:	e7f7      	b.n	800fb32 <memcpy+0x6>

0800fb42 <__malloc_lock>:
 800fb42:	4770      	bx	lr

0800fb44 <__malloc_unlock>:
 800fb44:	4770      	bx	lr

0800fb46 <_Balloc>:
 800fb46:	b570      	push	{r4, r5, r6, lr}
 800fb48:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fb4a:	4604      	mov	r4, r0
 800fb4c:	460e      	mov	r6, r1
 800fb4e:	b93d      	cbnz	r5, 800fb60 <_Balloc+0x1a>
 800fb50:	2010      	movs	r0, #16
 800fb52:	f7ff ffd1 	bl	800faf8 <malloc>
 800fb56:	6260      	str	r0, [r4, #36]	; 0x24
 800fb58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fb5c:	6005      	str	r5, [r0, #0]
 800fb5e:	60c5      	str	r5, [r0, #12]
 800fb60:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800fb62:	68eb      	ldr	r3, [r5, #12]
 800fb64:	b183      	cbz	r3, 800fb88 <_Balloc+0x42>
 800fb66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb68:	68db      	ldr	r3, [r3, #12]
 800fb6a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800fb6e:	b9b8      	cbnz	r0, 800fba0 <_Balloc+0x5a>
 800fb70:	2101      	movs	r1, #1
 800fb72:	fa01 f506 	lsl.w	r5, r1, r6
 800fb76:	1d6a      	adds	r2, r5, #5
 800fb78:	0092      	lsls	r2, r2, #2
 800fb7a:	4620      	mov	r0, r4
 800fb7c:	f000 fbe2 	bl	8010344 <_calloc_r>
 800fb80:	b160      	cbz	r0, 800fb9c <_Balloc+0x56>
 800fb82:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800fb86:	e00e      	b.n	800fba6 <_Balloc+0x60>
 800fb88:	2221      	movs	r2, #33	; 0x21
 800fb8a:	2104      	movs	r1, #4
 800fb8c:	4620      	mov	r0, r4
 800fb8e:	f000 fbd9 	bl	8010344 <_calloc_r>
 800fb92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb94:	60e8      	str	r0, [r5, #12]
 800fb96:	68db      	ldr	r3, [r3, #12]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d1e4      	bne.n	800fb66 <_Balloc+0x20>
 800fb9c:	2000      	movs	r0, #0
 800fb9e:	bd70      	pop	{r4, r5, r6, pc}
 800fba0:	6802      	ldr	r2, [r0, #0]
 800fba2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800fba6:	2300      	movs	r3, #0
 800fba8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fbac:	e7f7      	b.n	800fb9e <_Balloc+0x58>

0800fbae <_Bfree>:
 800fbae:	b570      	push	{r4, r5, r6, lr}
 800fbb0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800fbb2:	4606      	mov	r6, r0
 800fbb4:	460d      	mov	r5, r1
 800fbb6:	b93c      	cbnz	r4, 800fbc8 <_Bfree+0x1a>
 800fbb8:	2010      	movs	r0, #16
 800fbba:	f7ff ff9d 	bl	800faf8 <malloc>
 800fbbe:	6270      	str	r0, [r6, #36]	; 0x24
 800fbc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fbc4:	6004      	str	r4, [r0, #0]
 800fbc6:	60c4      	str	r4, [r0, #12]
 800fbc8:	b13d      	cbz	r5, 800fbda <_Bfree+0x2c>
 800fbca:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800fbcc:	686a      	ldr	r2, [r5, #4]
 800fbce:	68db      	ldr	r3, [r3, #12]
 800fbd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fbd4:	6029      	str	r1, [r5, #0]
 800fbd6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800fbda:	bd70      	pop	{r4, r5, r6, pc}

0800fbdc <__multadd>:
 800fbdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbe0:	690d      	ldr	r5, [r1, #16]
 800fbe2:	461f      	mov	r7, r3
 800fbe4:	4606      	mov	r6, r0
 800fbe6:	460c      	mov	r4, r1
 800fbe8:	f101 0c14 	add.w	ip, r1, #20
 800fbec:	2300      	movs	r3, #0
 800fbee:	f8dc 0000 	ldr.w	r0, [ip]
 800fbf2:	b281      	uxth	r1, r0
 800fbf4:	fb02 7101 	mla	r1, r2, r1, r7
 800fbf8:	0c0f      	lsrs	r7, r1, #16
 800fbfa:	0c00      	lsrs	r0, r0, #16
 800fbfc:	fb02 7000 	mla	r0, r2, r0, r7
 800fc00:	b289      	uxth	r1, r1
 800fc02:	3301      	adds	r3, #1
 800fc04:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800fc08:	429d      	cmp	r5, r3
 800fc0a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800fc0e:	f84c 1b04 	str.w	r1, [ip], #4
 800fc12:	dcec      	bgt.n	800fbee <__multadd+0x12>
 800fc14:	b1d7      	cbz	r7, 800fc4c <__multadd+0x70>
 800fc16:	68a3      	ldr	r3, [r4, #8]
 800fc18:	42ab      	cmp	r3, r5
 800fc1a:	dc12      	bgt.n	800fc42 <__multadd+0x66>
 800fc1c:	6861      	ldr	r1, [r4, #4]
 800fc1e:	4630      	mov	r0, r6
 800fc20:	3101      	adds	r1, #1
 800fc22:	f7ff ff90 	bl	800fb46 <_Balloc>
 800fc26:	6922      	ldr	r2, [r4, #16]
 800fc28:	3202      	adds	r2, #2
 800fc2a:	f104 010c 	add.w	r1, r4, #12
 800fc2e:	4680      	mov	r8, r0
 800fc30:	0092      	lsls	r2, r2, #2
 800fc32:	300c      	adds	r0, #12
 800fc34:	f7ff ff7a 	bl	800fb2c <memcpy>
 800fc38:	4621      	mov	r1, r4
 800fc3a:	4630      	mov	r0, r6
 800fc3c:	f7ff ffb7 	bl	800fbae <_Bfree>
 800fc40:	4644      	mov	r4, r8
 800fc42:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fc46:	3501      	adds	r5, #1
 800fc48:	615f      	str	r7, [r3, #20]
 800fc4a:	6125      	str	r5, [r4, #16]
 800fc4c:	4620      	mov	r0, r4
 800fc4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fc52 <__s2b>:
 800fc52:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc56:	460c      	mov	r4, r1
 800fc58:	4615      	mov	r5, r2
 800fc5a:	461f      	mov	r7, r3
 800fc5c:	2209      	movs	r2, #9
 800fc5e:	3308      	adds	r3, #8
 800fc60:	4606      	mov	r6, r0
 800fc62:	fb93 f3f2 	sdiv	r3, r3, r2
 800fc66:	2100      	movs	r1, #0
 800fc68:	2201      	movs	r2, #1
 800fc6a:	429a      	cmp	r2, r3
 800fc6c:	db20      	blt.n	800fcb0 <__s2b+0x5e>
 800fc6e:	4630      	mov	r0, r6
 800fc70:	f7ff ff69 	bl	800fb46 <_Balloc>
 800fc74:	9b08      	ldr	r3, [sp, #32]
 800fc76:	6143      	str	r3, [r0, #20]
 800fc78:	2d09      	cmp	r5, #9
 800fc7a:	f04f 0301 	mov.w	r3, #1
 800fc7e:	6103      	str	r3, [r0, #16]
 800fc80:	dd19      	ble.n	800fcb6 <__s2b+0x64>
 800fc82:	f104 0809 	add.w	r8, r4, #9
 800fc86:	46c1      	mov	r9, r8
 800fc88:	442c      	add	r4, r5
 800fc8a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800fc8e:	4601      	mov	r1, r0
 800fc90:	3b30      	subs	r3, #48	; 0x30
 800fc92:	220a      	movs	r2, #10
 800fc94:	4630      	mov	r0, r6
 800fc96:	f7ff ffa1 	bl	800fbdc <__multadd>
 800fc9a:	45a1      	cmp	r9, r4
 800fc9c:	d1f5      	bne.n	800fc8a <__s2b+0x38>
 800fc9e:	eb08 0405 	add.w	r4, r8, r5
 800fca2:	3c08      	subs	r4, #8
 800fca4:	1b2d      	subs	r5, r5, r4
 800fca6:	1963      	adds	r3, r4, r5
 800fca8:	42bb      	cmp	r3, r7
 800fcaa:	db07      	blt.n	800fcbc <__s2b+0x6a>
 800fcac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcb0:	0052      	lsls	r2, r2, #1
 800fcb2:	3101      	adds	r1, #1
 800fcb4:	e7d9      	b.n	800fc6a <__s2b+0x18>
 800fcb6:	340a      	adds	r4, #10
 800fcb8:	2509      	movs	r5, #9
 800fcba:	e7f3      	b.n	800fca4 <__s2b+0x52>
 800fcbc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fcc0:	4601      	mov	r1, r0
 800fcc2:	3b30      	subs	r3, #48	; 0x30
 800fcc4:	220a      	movs	r2, #10
 800fcc6:	4630      	mov	r0, r6
 800fcc8:	f7ff ff88 	bl	800fbdc <__multadd>
 800fccc:	e7eb      	b.n	800fca6 <__s2b+0x54>

0800fcce <__hi0bits>:
 800fcce:	0c02      	lsrs	r2, r0, #16
 800fcd0:	0412      	lsls	r2, r2, #16
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	b9b2      	cbnz	r2, 800fd04 <__hi0bits+0x36>
 800fcd6:	0403      	lsls	r3, r0, #16
 800fcd8:	2010      	movs	r0, #16
 800fcda:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800fcde:	bf04      	itt	eq
 800fce0:	021b      	lsleq	r3, r3, #8
 800fce2:	3008      	addeq	r0, #8
 800fce4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800fce8:	bf04      	itt	eq
 800fcea:	011b      	lsleq	r3, r3, #4
 800fcec:	3004      	addeq	r0, #4
 800fcee:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800fcf2:	bf04      	itt	eq
 800fcf4:	009b      	lsleq	r3, r3, #2
 800fcf6:	3002      	addeq	r0, #2
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	db06      	blt.n	800fd0a <__hi0bits+0x3c>
 800fcfc:	005b      	lsls	r3, r3, #1
 800fcfe:	d503      	bpl.n	800fd08 <__hi0bits+0x3a>
 800fd00:	3001      	adds	r0, #1
 800fd02:	4770      	bx	lr
 800fd04:	2000      	movs	r0, #0
 800fd06:	e7e8      	b.n	800fcda <__hi0bits+0xc>
 800fd08:	2020      	movs	r0, #32
 800fd0a:	4770      	bx	lr

0800fd0c <__lo0bits>:
 800fd0c:	6803      	ldr	r3, [r0, #0]
 800fd0e:	f013 0207 	ands.w	r2, r3, #7
 800fd12:	4601      	mov	r1, r0
 800fd14:	d00b      	beq.n	800fd2e <__lo0bits+0x22>
 800fd16:	07da      	lsls	r2, r3, #31
 800fd18:	d423      	bmi.n	800fd62 <__lo0bits+0x56>
 800fd1a:	0798      	lsls	r0, r3, #30
 800fd1c:	bf49      	itett	mi
 800fd1e:	085b      	lsrmi	r3, r3, #1
 800fd20:	089b      	lsrpl	r3, r3, #2
 800fd22:	2001      	movmi	r0, #1
 800fd24:	600b      	strmi	r3, [r1, #0]
 800fd26:	bf5c      	itt	pl
 800fd28:	600b      	strpl	r3, [r1, #0]
 800fd2a:	2002      	movpl	r0, #2
 800fd2c:	4770      	bx	lr
 800fd2e:	b298      	uxth	r0, r3
 800fd30:	b9a8      	cbnz	r0, 800fd5e <__lo0bits+0x52>
 800fd32:	0c1b      	lsrs	r3, r3, #16
 800fd34:	2010      	movs	r0, #16
 800fd36:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fd3a:	bf04      	itt	eq
 800fd3c:	0a1b      	lsreq	r3, r3, #8
 800fd3e:	3008      	addeq	r0, #8
 800fd40:	071a      	lsls	r2, r3, #28
 800fd42:	bf04      	itt	eq
 800fd44:	091b      	lsreq	r3, r3, #4
 800fd46:	3004      	addeq	r0, #4
 800fd48:	079a      	lsls	r2, r3, #30
 800fd4a:	bf04      	itt	eq
 800fd4c:	089b      	lsreq	r3, r3, #2
 800fd4e:	3002      	addeq	r0, #2
 800fd50:	07da      	lsls	r2, r3, #31
 800fd52:	d402      	bmi.n	800fd5a <__lo0bits+0x4e>
 800fd54:	085b      	lsrs	r3, r3, #1
 800fd56:	d006      	beq.n	800fd66 <__lo0bits+0x5a>
 800fd58:	3001      	adds	r0, #1
 800fd5a:	600b      	str	r3, [r1, #0]
 800fd5c:	4770      	bx	lr
 800fd5e:	4610      	mov	r0, r2
 800fd60:	e7e9      	b.n	800fd36 <__lo0bits+0x2a>
 800fd62:	2000      	movs	r0, #0
 800fd64:	4770      	bx	lr
 800fd66:	2020      	movs	r0, #32
 800fd68:	4770      	bx	lr

0800fd6a <__i2b>:
 800fd6a:	b510      	push	{r4, lr}
 800fd6c:	460c      	mov	r4, r1
 800fd6e:	2101      	movs	r1, #1
 800fd70:	f7ff fee9 	bl	800fb46 <_Balloc>
 800fd74:	2201      	movs	r2, #1
 800fd76:	6144      	str	r4, [r0, #20]
 800fd78:	6102      	str	r2, [r0, #16]
 800fd7a:	bd10      	pop	{r4, pc}

0800fd7c <__multiply>:
 800fd7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd80:	4614      	mov	r4, r2
 800fd82:	690a      	ldr	r2, [r1, #16]
 800fd84:	6923      	ldr	r3, [r4, #16]
 800fd86:	429a      	cmp	r2, r3
 800fd88:	bfb8      	it	lt
 800fd8a:	460b      	movlt	r3, r1
 800fd8c:	4688      	mov	r8, r1
 800fd8e:	bfbc      	itt	lt
 800fd90:	46a0      	movlt	r8, r4
 800fd92:	461c      	movlt	r4, r3
 800fd94:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fd98:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800fd9c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fda0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fda4:	eb07 0609 	add.w	r6, r7, r9
 800fda8:	42b3      	cmp	r3, r6
 800fdaa:	bfb8      	it	lt
 800fdac:	3101      	addlt	r1, #1
 800fdae:	f7ff feca 	bl	800fb46 <_Balloc>
 800fdb2:	f100 0514 	add.w	r5, r0, #20
 800fdb6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800fdba:	462b      	mov	r3, r5
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	4573      	cmp	r3, lr
 800fdc0:	d316      	bcc.n	800fdf0 <__multiply+0x74>
 800fdc2:	f104 0214 	add.w	r2, r4, #20
 800fdc6:	f108 0114 	add.w	r1, r8, #20
 800fdca:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800fdce:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800fdd2:	9300      	str	r3, [sp, #0]
 800fdd4:	9b00      	ldr	r3, [sp, #0]
 800fdd6:	9201      	str	r2, [sp, #4]
 800fdd8:	4293      	cmp	r3, r2
 800fdda:	d80c      	bhi.n	800fdf6 <__multiply+0x7a>
 800fddc:	2e00      	cmp	r6, #0
 800fdde:	dd03      	ble.n	800fde8 <__multiply+0x6c>
 800fde0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d05d      	beq.n	800fea4 <__multiply+0x128>
 800fde8:	6106      	str	r6, [r0, #16]
 800fdea:	b003      	add	sp, #12
 800fdec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdf0:	f843 2b04 	str.w	r2, [r3], #4
 800fdf4:	e7e3      	b.n	800fdbe <__multiply+0x42>
 800fdf6:	f8b2 b000 	ldrh.w	fp, [r2]
 800fdfa:	f1bb 0f00 	cmp.w	fp, #0
 800fdfe:	d023      	beq.n	800fe48 <__multiply+0xcc>
 800fe00:	4689      	mov	r9, r1
 800fe02:	46ac      	mov	ip, r5
 800fe04:	f04f 0800 	mov.w	r8, #0
 800fe08:	f859 4b04 	ldr.w	r4, [r9], #4
 800fe0c:	f8dc a000 	ldr.w	sl, [ip]
 800fe10:	b2a3      	uxth	r3, r4
 800fe12:	fa1f fa8a 	uxth.w	sl, sl
 800fe16:	fb0b a303 	mla	r3, fp, r3, sl
 800fe1a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800fe1e:	f8dc 4000 	ldr.w	r4, [ip]
 800fe22:	4443      	add	r3, r8
 800fe24:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800fe28:	fb0b 840a 	mla	r4, fp, sl, r8
 800fe2c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800fe30:	46e2      	mov	sl, ip
 800fe32:	b29b      	uxth	r3, r3
 800fe34:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800fe38:	454f      	cmp	r7, r9
 800fe3a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800fe3e:	f84a 3b04 	str.w	r3, [sl], #4
 800fe42:	d82b      	bhi.n	800fe9c <__multiply+0x120>
 800fe44:	f8cc 8004 	str.w	r8, [ip, #4]
 800fe48:	9b01      	ldr	r3, [sp, #4]
 800fe4a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800fe4e:	3204      	adds	r2, #4
 800fe50:	f1ba 0f00 	cmp.w	sl, #0
 800fe54:	d020      	beq.n	800fe98 <__multiply+0x11c>
 800fe56:	682b      	ldr	r3, [r5, #0]
 800fe58:	4689      	mov	r9, r1
 800fe5a:	46a8      	mov	r8, r5
 800fe5c:	f04f 0b00 	mov.w	fp, #0
 800fe60:	f8b9 c000 	ldrh.w	ip, [r9]
 800fe64:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800fe68:	fb0a 440c 	mla	r4, sl, ip, r4
 800fe6c:	445c      	add	r4, fp
 800fe6e:	46c4      	mov	ip, r8
 800fe70:	b29b      	uxth	r3, r3
 800fe72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800fe76:	f84c 3b04 	str.w	r3, [ip], #4
 800fe7a:	f859 3b04 	ldr.w	r3, [r9], #4
 800fe7e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800fe82:	0c1b      	lsrs	r3, r3, #16
 800fe84:	fb0a b303 	mla	r3, sl, r3, fp
 800fe88:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800fe8c:	454f      	cmp	r7, r9
 800fe8e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800fe92:	d805      	bhi.n	800fea0 <__multiply+0x124>
 800fe94:	f8c8 3004 	str.w	r3, [r8, #4]
 800fe98:	3504      	adds	r5, #4
 800fe9a:	e79b      	b.n	800fdd4 <__multiply+0x58>
 800fe9c:	46d4      	mov	ip, sl
 800fe9e:	e7b3      	b.n	800fe08 <__multiply+0x8c>
 800fea0:	46e0      	mov	r8, ip
 800fea2:	e7dd      	b.n	800fe60 <__multiply+0xe4>
 800fea4:	3e01      	subs	r6, #1
 800fea6:	e799      	b.n	800fddc <__multiply+0x60>

0800fea8 <__pow5mult>:
 800fea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800feac:	4615      	mov	r5, r2
 800feae:	f012 0203 	ands.w	r2, r2, #3
 800feb2:	4606      	mov	r6, r0
 800feb4:	460f      	mov	r7, r1
 800feb6:	d007      	beq.n	800fec8 <__pow5mult+0x20>
 800feb8:	3a01      	subs	r2, #1
 800feba:	4c21      	ldr	r4, [pc, #132]	; (800ff40 <__pow5mult+0x98>)
 800febc:	2300      	movs	r3, #0
 800febe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fec2:	f7ff fe8b 	bl	800fbdc <__multadd>
 800fec6:	4607      	mov	r7, r0
 800fec8:	10ad      	asrs	r5, r5, #2
 800feca:	d035      	beq.n	800ff38 <__pow5mult+0x90>
 800fecc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fece:	b93c      	cbnz	r4, 800fee0 <__pow5mult+0x38>
 800fed0:	2010      	movs	r0, #16
 800fed2:	f7ff fe11 	bl	800faf8 <malloc>
 800fed6:	6270      	str	r0, [r6, #36]	; 0x24
 800fed8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fedc:	6004      	str	r4, [r0, #0]
 800fede:	60c4      	str	r4, [r0, #12]
 800fee0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fee4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fee8:	b94c      	cbnz	r4, 800fefe <__pow5mult+0x56>
 800feea:	f240 2171 	movw	r1, #625	; 0x271
 800feee:	4630      	mov	r0, r6
 800fef0:	f7ff ff3b 	bl	800fd6a <__i2b>
 800fef4:	2300      	movs	r3, #0
 800fef6:	f8c8 0008 	str.w	r0, [r8, #8]
 800fefa:	4604      	mov	r4, r0
 800fefc:	6003      	str	r3, [r0, #0]
 800fefe:	f04f 0800 	mov.w	r8, #0
 800ff02:	07eb      	lsls	r3, r5, #31
 800ff04:	d50a      	bpl.n	800ff1c <__pow5mult+0x74>
 800ff06:	4639      	mov	r1, r7
 800ff08:	4622      	mov	r2, r4
 800ff0a:	4630      	mov	r0, r6
 800ff0c:	f7ff ff36 	bl	800fd7c <__multiply>
 800ff10:	4639      	mov	r1, r7
 800ff12:	4681      	mov	r9, r0
 800ff14:	4630      	mov	r0, r6
 800ff16:	f7ff fe4a 	bl	800fbae <_Bfree>
 800ff1a:	464f      	mov	r7, r9
 800ff1c:	106d      	asrs	r5, r5, #1
 800ff1e:	d00b      	beq.n	800ff38 <__pow5mult+0x90>
 800ff20:	6820      	ldr	r0, [r4, #0]
 800ff22:	b938      	cbnz	r0, 800ff34 <__pow5mult+0x8c>
 800ff24:	4622      	mov	r2, r4
 800ff26:	4621      	mov	r1, r4
 800ff28:	4630      	mov	r0, r6
 800ff2a:	f7ff ff27 	bl	800fd7c <__multiply>
 800ff2e:	6020      	str	r0, [r4, #0]
 800ff30:	f8c0 8000 	str.w	r8, [r0]
 800ff34:	4604      	mov	r4, r0
 800ff36:	e7e4      	b.n	800ff02 <__pow5mult+0x5a>
 800ff38:	4638      	mov	r0, r7
 800ff3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff3e:	bf00      	nop
 800ff40:	08011eb8 	.word	0x08011eb8

0800ff44 <__lshift>:
 800ff44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff48:	460c      	mov	r4, r1
 800ff4a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ff4e:	6923      	ldr	r3, [r4, #16]
 800ff50:	6849      	ldr	r1, [r1, #4]
 800ff52:	eb0a 0903 	add.w	r9, sl, r3
 800ff56:	68a3      	ldr	r3, [r4, #8]
 800ff58:	4607      	mov	r7, r0
 800ff5a:	4616      	mov	r6, r2
 800ff5c:	f109 0501 	add.w	r5, r9, #1
 800ff60:	42ab      	cmp	r3, r5
 800ff62:	db32      	blt.n	800ffca <__lshift+0x86>
 800ff64:	4638      	mov	r0, r7
 800ff66:	f7ff fdee 	bl	800fb46 <_Balloc>
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	4680      	mov	r8, r0
 800ff6e:	f100 0114 	add.w	r1, r0, #20
 800ff72:	461a      	mov	r2, r3
 800ff74:	4553      	cmp	r3, sl
 800ff76:	db2b      	blt.n	800ffd0 <__lshift+0x8c>
 800ff78:	6920      	ldr	r0, [r4, #16]
 800ff7a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ff7e:	f104 0314 	add.w	r3, r4, #20
 800ff82:	f016 021f 	ands.w	r2, r6, #31
 800ff86:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ff8a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ff8e:	d025      	beq.n	800ffdc <__lshift+0x98>
 800ff90:	f1c2 0e20 	rsb	lr, r2, #32
 800ff94:	2000      	movs	r0, #0
 800ff96:	681e      	ldr	r6, [r3, #0]
 800ff98:	468a      	mov	sl, r1
 800ff9a:	4096      	lsls	r6, r2
 800ff9c:	4330      	orrs	r0, r6
 800ff9e:	f84a 0b04 	str.w	r0, [sl], #4
 800ffa2:	f853 0b04 	ldr.w	r0, [r3], #4
 800ffa6:	459c      	cmp	ip, r3
 800ffa8:	fa20 f00e 	lsr.w	r0, r0, lr
 800ffac:	d814      	bhi.n	800ffd8 <__lshift+0x94>
 800ffae:	6048      	str	r0, [r1, #4]
 800ffb0:	b108      	cbz	r0, 800ffb6 <__lshift+0x72>
 800ffb2:	f109 0502 	add.w	r5, r9, #2
 800ffb6:	3d01      	subs	r5, #1
 800ffb8:	4638      	mov	r0, r7
 800ffba:	f8c8 5010 	str.w	r5, [r8, #16]
 800ffbe:	4621      	mov	r1, r4
 800ffc0:	f7ff fdf5 	bl	800fbae <_Bfree>
 800ffc4:	4640      	mov	r0, r8
 800ffc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffca:	3101      	adds	r1, #1
 800ffcc:	005b      	lsls	r3, r3, #1
 800ffce:	e7c7      	b.n	800ff60 <__lshift+0x1c>
 800ffd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ffd4:	3301      	adds	r3, #1
 800ffd6:	e7cd      	b.n	800ff74 <__lshift+0x30>
 800ffd8:	4651      	mov	r1, sl
 800ffda:	e7dc      	b.n	800ff96 <__lshift+0x52>
 800ffdc:	3904      	subs	r1, #4
 800ffde:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffe2:	f841 2f04 	str.w	r2, [r1, #4]!
 800ffe6:	459c      	cmp	ip, r3
 800ffe8:	d8f9      	bhi.n	800ffde <__lshift+0x9a>
 800ffea:	e7e4      	b.n	800ffb6 <__lshift+0x72>

0800ffec <__mcmp>:
 800ffec:	6903      	ldr	r3, [r0, #16]
 800ffee:	690a      	ldr	r2, [r1, #16]
 800fff0:	1a9b      	subs	r3, r3, r2
 800fff2:	b530      	push	{r4, r5, lr}
 800fff4:	d10c      	bne.n	8010010 <__mcmp+0x24>
 800fff6:	0092      	lsls	r2, r2, #2
 800fff8:	3014      	adds	r0, #20
 800fffa:	3114      	adds	r1, #20
 800fffc:	1884      	adds	r4, r0, r2
 800fffe:	4411      	add	r1, r2
 8010000:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010004:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010008:	4295      	cmp	r5, r2
 801000a:	d003      	beq.n	8010014 <__mcmp+0x28>
 801000c:	d305      	bcc.n	801001a <__mcmp+0x2e>
 801000e:	2301      	movs	r3, #1
 8010010:	4618      	mov	r0, r3
 8010012:	bd30      	pop	{r4, r5, pc}
 8010014:	42a0      	cmp	r0, r4
 8010016:	d3f3      	bcc.n	8010000 <__mcmp+0x14>
 8010018:	e7fa      	b.n	8010010 <__mcmp+0x24>
 801001a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801001e:	e7f7      	b.n	8010010 <__mcmp+0x24>

08010020 <__mdiff>:
 8010020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010024:	460d      	mov	r5, r1
 8010026:	4607      	mov	r7, r0
 8010028:	4611      	mov	r1, r2
 801002a:	4628      	mov	r0, r5
 801002c:	4614      	mov	r4, r2
 801002e:	f7ff ffdd 	bl	800ffec <__mcmp>
 8010032:	1e06      	subs	r6, r0, #0
 8010034:	d108      	bne.n	8010048 <__mdiff+0x28>
 8010036:	4631      	mov	r1, r6
 8010038:	4638      	mov	r0, r7
 801003a:	f7ff fd84 	bl	800fb46 <_Balloc>
 801003e:	2301      	movs	r3, #1
 8010040:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010048:	bfa4      	itt	ge
 801004a:	4623      	movge	r3, r4
 801004c:	462c      	movge	r4, r5
 801004e:	4638      	mov	r0, r7
 8010050:	6861      	ldr	r1, [r4, #4]
 8010052:	bfa6      	itte	ge
 8010054:	461d      	movge	r5, r3
 8010056:	2600      	movge	r6, #0
 8010058:	2601      	movlt	r6, #1
 801005a:	f7ff fd74 	bl	800fb46 <_Balloc>
 801005e:	692b      	ldr	r3, [r5, #16]
 8010060:	60c6      	str	r6, [r0, #12]
 8010062:	6926      	ldr	r6, [r4, #16]
 8010064:	f105 0914 	add.w	r9, r5, #20
 8010068:	f104 0214 	add.w	r2, r4, #20
 801006c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8010070:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8010074:	f100 0514 	add.w	r5, r0, #20
 8010078:	f04f 0e00 	mov.w	lr, #0
 801007c:	f852 ab04 	ldr.w	sl, [r2], #4
 8010080:	f859 4b04 	ldr.w	r4, [r9], #4
 8010084:	fa1e f18a 	uxtah	r1, lr, sl
 8010088:	b2a3      	uxth	r3, r4
 801008a:	1ac9      	subs	r1, r1, r3
 801008c:	0c23      	lsrs	r3, r4, #16
 801008e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8010092:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8010096:	b289      	uxth	r1, r1
 8010098:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801009c:	45c8      	cmp	r8, r9
 801009e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80100a2:	4694      	mov	ip, r2
 80100a4:	f845 3b04 	str.w	r3, [r5], #4
 80100a8:	d8e8      	bhi.n	801007c <__mdiff+0x5c>
 80100aa:	45bc      	cmp	ip, r7
 80100ac:	d304      	bcc.n	80100b8 <__mdiff+0x98>
 80100ae:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80100b2:	b183      	cbz	r3, 80100d6 <__mdiff+0xb6>
 80100b4:	6106      	str	r6, [r0, #16]
 80100b6:	e7c5      	b.n	8010044 <__mdiff+0x24>
 80100b8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80100bc:	fa1e f381 	uxtah	r3, lr, r1
 80100c0:	141a      	asrs	r2, r3, #16
 80100c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80100c6:	b29b      	uxth	r3, r3
 80100c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80100cc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80100d0:	f845 3b04 	str.w	r3, [r5], #4
 80100d4:	e7e9      	b.n	80100aa <__mdiff+0x8a>
 80100d6:	3e01      	subs	r6, #1
 80100d8:	e7e9      	b.n	80100ae <__mdiff+0x8e>
	...

080100dc <__ulp>:
 80100dc:	4b12      	ldr	r3, [pc, #72]	; (8010128 <__ulp+0x4c>)
 80100de:	ee10 2a90 	vmov	r2, s1
 80100e2:	401a      	ands	r2, r3
 80100e4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	dd04      	ble.n	80100f6 <__ulp+0x1a>
 80100ec:	2000      	movs	r0, #0
 80100ee:	4619      	mov	r1, r3
 80100f0:	ec41 0b10 	vmov	d0, r0, r1
 80100f4:	4770      	bx	lr
 80100f6:	425b      	negs	r3, r3
 80100f8:	151b      	asrs	r3, r3, #20
 80100fa:	2b13      	cmp	r3, #19
 80100fc:	f04f 0000 	mov.w	r0, #0
 8010100:	f04f 0100 	mov.w	r1, #0
 8010104:	dc04      	bgt.n	8010110 <__ulp+0x34>
 8010106:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801010a:	fa42 f103 	asr.w	r1, r2, r3
 801010e:	e7ef      	b.n	80100f0 <__ulp+0x14>
 8010110:	3b14      	subs	r3, #20
 8010112:	2b1e      	cmp	r3, #30
 8010114:	f04f 0201 	mov.w	r2, #1
 8010118:	bfda      	itte	le
 801011a:	f1c3 031f 	rsble	r3, r3, #31
 801011e:	fa02 f303 	lslle.w	r3, r2, r3
 8010122:	4613      	movgt	r3, r2
 8010124:	4618      	mov	r0, r3
 8010126:	e7e3      	b.n	80100f0 <__ulp+0x14>
 8010128:	7ff00000 	.word	0x7ff00000

0801012c <__b2d>:
 801012c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801012e:	6905      	ldr	r5, [r0, #16]
 8010130:	f100 0714 	add.w	r7, r0, #20
 8010134:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010138:	1f2e      	subs	r6, r5, #4
 801013a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801013e:	4620      	mov	r0, r4
 8010140:	f7ff fdc5 	bl	800fcce <__hi0bits>
 8010144:	f1c0 0320 	rsb	r3, r0, #32
 8010148:	280a      	cmp	r0, #10
 801014a:	600b      	str	r3, [r1, #0]
 801014c:	f8df c074 	ldr.w	ip, [pc, #116]	; 80101c4 <__b2d+0x98>
 8010150:	dc14      	bgt.n	801017c <__b2d+0x50>
 8010152:	f1c0 0e0b 	rsb	lr, r0, #11
 8010156:	fa24 f10e 	lsr.w	r1, r4, lr
 801015a:	42b7      	cmp	r7, r6
 801015c:	ea41 030c 	orr.w	r3, r1, ip
 8010160:	bf34      	ite	cc
 8010162:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010166:	2100      	movcs	r1, #0
 8010168:	3015      	adds	r0, #21
 801016a:	fa04 f000 	lsl.w	r0, r4, r0
 801016e:	fa21 f10e 	lsr.w	r1, r1, lr
 8010172:	ea40 0201 	orr.w	r2, r0, r1
 8010176:	ec43 2b10 	vmov	d0, r2, r3
 801017a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801017c:	42b7      	cmp	r7, r6
 801017e:	bf3a      	itte	cc
 8010180:	f1a5 0608 	subcc.w	r6, r5, #8
 8010184:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010188:	2100      	movcs	r1, #0
 801018a:	380b      	subs	r0, #11
 801018c:	d015      	beq.n	80101ba <__b2d+0x8e>
 801018e:	4084      	lsls	r4, r0
 8010190:	f1c0 0520 	rsb	r5, r0, #32
 8010194:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8010198:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801019c:	42be      	cmp	r6, r7
 801019e:	fa21 fc05 	lsr.w	ip, r1, r5
 80101a2:	ea44 030c 	orr.w	r3, r4, ip
 80101a6:	bf8c      	ite	hi
 80101a8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80101ac:	2400      	movls	r4, #0
 80101ae:	fa01 f000 	lsl.w	r0, r1, r0
 80101b2:	40ec      	lsrs	r4, r5
 80101b4:	ea40 0204 	orr.w	r2, r0, r4
 80101b8:	e7dd      	b.n	8010176 <__b2d+0x4a>
 80101ba:	ea44 030c 	orr.w	r3, r4, ip
 80101be:	460a      	mov	r2, r1
 80101c0:	e7d9      	b.n	8010176 <__b2d+0x4a>
 80101c2:	bf00      	nop
 80101c4:	3ff00000 	.word	0x3ff00000

080101c8 <__d2b>:
 80101c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80101cc:	460e      	mov	r6, r1
 80101ce:	2101      	movs	r1, #1
 80101d0:	ec59 8b10 	vmov	r8, r9, d0
 80101d4:	4615      	mov	r5, r2
 80101d6:	f7ff fcb6 	bl	800fb46 <_Balloc>
 80101da:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80101de:	4607      	mov	r7, r0
 80101e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80101e4:	bb34      	cbnz	r4, 8010234 <__d2b+0x6c>
 80101e6:	9301      	str	r3, [sp, #4]
 80101e8:	f1b8 0300 	subs.w	r3, r8, #0
 80101ec:	d027      	beq.n	801023e <__d2b+0x76>
 80101ee:	a802      	add	r0, sp, #8
 80101f0:	f840 3d08 	str.w	r3, [r0, #-8]!
 80101f4:	f7ff fd8a 	bl	800fd0c <__lo0bits>
 80101f8:	9900      	ldr	r1, [sp, #0]
 80101fa:	b1f0      	cbz	r0, 801023a <__d2b+0x72>
 80101fc:	9a01      	ldr	r2, [sp, #4]
 80101fe:	f1c0 0320 	rsb	r3, r0, #32
 8010202:	fa02 f303 	lsl.w	r3, r2, r3
 8010206:	430b      	orrs	r3, r1
 8010208:	40c2      	lsrs	r2, r0
 801020a:	617b      	str	r3, [r7, #20]
 801020c:	9201      	str	r2, [sp, #4]
 801020e:	9b01      	ldr	r3, [sp, #4]
 8010210:	61bb      	str	r3, [r7, #24]
 8010212:	2b00      	cmp	r3, #0
 8010214:	bf14      	ite	ne
 8010216:	2102      	movne	r1, #2
 8010218:	2101      	moveq	r1, #1
 801021a:	6139      	str	r1, [r7, #16]
 801021c:	b1c4      	cbz	r4, 8010250 <__d2b+0x88>
 801021e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8010222:	4404      	add	r4, r0
 8010224:	6034      	str	r4, [r6, #0]
 8010226:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801022a:	6028      	str	r0, [r5, #0]
 801022c:	4638      	mov	r0, r7
 801022e:	b003      	add	sp, #12
 8010230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010234:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010238:	e7d5      	b.n	80101e6 <__d2b+0x1e>
 801023a:	6179      	str	r1, [r7, #20]
 801023c:	e7e7      	b.n	801020e <__d2b+0x46>
 801023e:	a801      	add	r0, sp, #4
 8010240:	f7ff fd64 	bl	800fd0c <__lo0bits>
 8010244:	9b01      	ldr	r3, [sp, #4]
 8010246:	617b      	str	r3, [r7, #20]
 8010248:	2101      	movs	r1, #1
 801024a:	6139      	str	r1, [r7, #16]
 801024c:	3020      	adds	r0, #32
 801024e:	e7e5      	b.n	801021c <__d2b+0x54>
 8010250:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8010254:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010258:	6030      	str	r0, [r6, #0]
 801025a:	6918      	ldr	r0, [r3, #16]
 801025c:	f7ff fd37 	bl	800fcce <__hi0bits>
 8010260:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8010264:	e7e1      	b.n	801022a <__d2b+0x62>

08010266 <__ratio>:
 8010266:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801026a:	4688      	mov	r8, r1
 801026c:	4669      	mov	r1, sp
 801026e:	4681      	mov	r9, r0
 8010270:	f7ff ff5c 	bl	801012c <__b2d>
 8010274:	a901      	add	r1, sp, #4
 8010276:	4640      	mov	r0, r8
 8010278:	ec57 6b10 	vmov	r6, r7, d0
 801027c:	ee10 4a10 	vmov	r4, s0
 8010280:	f7ff ff54 	bl	801012c <__b2d>
 8010284:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010288:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801028c:	eba3 0c02 	sub.w	ip, r3, r2
 8010290:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010294:	1a9b      	subs	r3, r3, r2
 8010296:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801029a:	ec51 0b10 	vmov	r0, r1, d0
 801029e:	2b00      	cmp	r3, #0
 80102a0:	ee10 aa10 	vmov	sl, s0
 80102a4:	bfce      	itee	gt
 80102a6:	463a      	movgt	r2, r7
 80102a8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80102ac:	460a      	movle	r2, r1
 80102ae:	463d      	mov	r5, r7
 80102b0:	468b      	mov	fp, r1
 80102b2:	bfcc      	ite	gt
 80102b4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80102b8:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80102bc:	ec45 4b17 	vmov	d7, r4, r5
 80102c0:	ec4b ab16 	vmov	d6, sl, fp
 80102c4:	ee87 0b06 	vdiv.f64	d0, d7, d6
 80102c8:	b003      	add	sp, #12
 80102ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080102ce <__copybits>:
 80102ce:	3901      	subs	r1, #1
 80102d0:	b510      	push	{r4, lr}
 80102d2:	1149      	asrs	r1, r1, #5
 80102d4:	6914      	ldr	r4, [r2, #16]
 80102d6:	3101      	adds	r1, #1
 80102d8:	f102 0314 	add.w	r3, r2, #20
 80102dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80102e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80102e4:	42a3      	cmp	r3, r4
 80102e6:	4602      	mov	r2, r0
 80102e8:	d303      	bcc.n	80102f2 <__copybits+0x24>
 80102ea:	2300      	movs	r3, #0
 80102ec:	428a      	cmp	r2, r1
 80102ee:	d305      	bcc.n	80102fc <__copybits+0x2e>
 80102f0:	bd10      	pop	{r4, pc}
 80102f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80102f6:	f840 2b04 	str.w	r2, [r0], #4
 80102fa:	e7f3      	b.n	80102e4 <__copybits+0x16>
 80102fc:	f842 3b04 	str.w	r3, [r2], #4
 8010300:	e7f4      	b.n	80102ec <__copybits+0x1e>

08010302 <__any_on>:
 8010302:	f100 0214 	add.w	r2, r0, #20
 8010306:	6900      	ldr	r0, [r0, #16]
 8010308:	114b      	asrs	r3, r1, #5
 801030a:	4298      	cmp	r0, r3
 801030c:	b510      	push	{r4, lr}
 801030e:	db11      	blt.n	8010334 <__any_on+0x32>
 8010310:	dd0a      	ble.n	8010328 <__any_on+0x26>
 8010312:	f011 011f 	ands.w	r1, r1, #31
 8010316:	d007      	beq.n	8010328 <__any_on+0x26>
 8010318:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801031c:	fa24 f001 	lsr.w	r0, r4, r1
 8010320:	fa00 f101 	lsl.w	r1, r0, r1
 8010324:	428c      	cmp	r4, r1
 8010326:	d10b      	bne.n	8010340 <__any_on+0x3e>
 8010328:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801032c:	4293      	cmp	r3, r2
 801032e:	d803      	bhi.n	8010338 <__any_on+0x36>
 8010330:	2000      	movs	r0, #0
 8010332:	bd10      	pop	{r4, pc}
 8010334:	4603      	mov	r3, r0
 8010336:	e7f7      	b.n	8010328 <__any_on+0x26>
 8010338:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801033c:	2900      	cmp	r1, #0
 801033e:	d0f5      	beq.n	801032c <__any_on+0x2a>
 8010340:	2001      	movs	r0, #1
 8010342:	e7f6      	b.n	8010332 <__any_on+0x30>

08010344 <_calloc_r>:
 8010344:	b538      	push	{r3, r4, r5, lr}
 8010346:	fb02 f401 	mul.w	r4, r2, r1
 801034a:	4621      	mov	r1, r4
 801034c:	f7fc fb6a 	bl	800ca24 <_malloc_r>
 8010350:	4605      	mov	r5, r0
 8010352:	b118      	cbz	r0, 801035c <_calloc_r+0x18>
 8010354:	4622      	mov	r2, r4
 8010356:	2100      	movs	r1, #0
 8010358:	f7fc fb0e 	bl	800c978 <memset>
 801035c:	4628      	mov	r0, r5
 801035e:	bd38      	pop	{r3, r4, r5, pc}

08010360 <__ssputs_r>:
 8010360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010364:	688e      	ldr	r6, [r1, #8]
 8010366:	429e      	cmp	r6, r3
 8010368:	4682      	mov	sl, r0
 801036a:	460c      	mov	r4, r1
 801036c:	4690      	mov	r8, r2
 801036e:	4699      	mov	r9, r3
 8010370:	d837      	bhi.n	80103e2 <__ssputs_r+0x82>
 8010372:	898a      	ldrh	r2, [r1, #12]
 8010374:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010378:	d031      	beq.n	80103de <__ssputs_r+0x7e>
 801037a:	6825      	ldr	r5, [r4, #0]
 801037c:	6909      	ldr	r1, [r1, #16]
 801037e:	1a6f      	subs	r7, r5, r1
 8010380:	6965      	ldr	r5, [r4, #20]
 8010382:	2302      	movs	r3, #2
 8010384:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010388:	fb95 f5f3 	sdiv	r5, r5, r3
 801038c:	f109 0301 	add.w	r3, r9, #1
 8010390:	443b      	add	r3, r7
 8010392:	429d      	cmp	r5, r3
 8010394:	bf38      	it	cc
 8010396:	461d      	movcc	r5, r3
 8010398:	0553      	lsls	r3, r2, #21
 801039a:	d530      	bpl.n	80103fe <__ssputs_r+0x9e>
 801039c:	4629      	mov	r1, r5
 801039e:	f7fc fb41 	bl	800ca24 <_malloc_r>
 80103a2:	4606      	mov	r6, r0
 80103a4:	b950      	cbnz	r0, 80103bc <__ssputs_r+0x5c>
 80103a6:	230c      	movs	r3, #12
 80103a8:	f8ca 3000 	str.w	r3, [sl]
 80103ac:	89a3      	ldrh	r3, [r4, #12]
 80103ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80103b2:	81a3      	strh	r3, [r4, #12]
 80103b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80103b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103bc:	463a      	mov	r2, r7
 80103be:	6921      	ldr	r1, [r4, #16]
 80103c0:	f7ff fbb4 	bl	800fb2c <memcpy>
 80103c4:	89a3      	ldrh	r3, [r4, #12]
 80103c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80103ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103ce:	81a3      	strh	r3, [r4, #12]
 80103d0:	6126      	str	r6, [r4, #16]
 80103d2:	6165      	str	r5, [r4, #20]
 80103d4:	443e      	add	r6, r7
 80103d6:	1bed      	subs	r5, r5, r7
 80103d8:	6026      	str	r6, [r4, #0]
 80103da:	60a5      	str	r5, [r4, #8]
 80103dc:	464e      	mov	r6, r9
 80103de:	454e      	cmp	r6, r9
 80103e0:	d900      	bls.n	80103e4 <__ssputs_r+0x84>
 80103e2:	464e      	mov	r6, r9
 80103e4:	4632      	mov	r2, r6
 80103e6:	4641      	mov	r1, r8
 80103e8:	6820      	ldr	r0, [r4, #0]
 80103ea:	f000 fa8d 	bl	8010908 <memmove>
 80103ee:	68a3      	ldr	r3, [r4, #8]
 80103f0:	1b9b      	subs	r3, r3, r6
 80103f2:	60a3      	str	r3, [r4, #8]
 80103f4:	6823      	ldr	r3, [r4, #0]
 80103f6:	441e      	add	r6, r3
 80103f8:	6026      	str	r6, [r4, #0]
 80103fa:	2000      	movs	r0, #0
 80103fc:	e7dc      	b.n	80103b8 <__ssputs_r+0x58>
 80103fe:	462a      	mov	r2, r5
 8010400:	f000 fa9b 	bl	801093a <_realloc_r>
 8010404:	4606      	mov	r6, r0
 8010406:	2800      	cmp	r0, #0
 8010408:	d1e2      	bne.n	80103d0 <__ssputs_r+0x70>
 801040a:	6921      	ldr	r1, [r4, #16]
 801040c:	4650      	mov	r0, sl
 801040e:	f7fc fabb 	bl	800c988 <_free_r>
 8010412:	e7c8      	b.n	80103a6 <__ssputs_r+0x46>

08010414 <_svfiprintf_r>:
 8010414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010418:	461d      	mov	r5, r3
 801041a:	898b      	ldrh	r3, [r1, #12]
 801041c:	061f      	lsls	r7, r3, #24
 801041e:	b09d      	sub	sp, #116	; 0x74
 8010420:	4680      	mov	r8, r0
 8010422:	460c      	mov	r4, r1
 8010424:	4616      	mov	r6, r2
 8010426:	d50f      	bpl.n	8010448 <_svfiprintf_r+0x34>
 8010428:	690b      	ldr	r3, [r1, #16]
 801042a:	b96b      	cbnz	r3, 8010448 <_svfiprintf_r+0x34>
 801042c:	2140      	movs	r1, #64	; 0x40
 801042e:	f7fc faf9 	bl	800ca24 <_malloc_r>
 8010432:	6020      	str	r0, [r4, #0]
 8010434:	6120      	str	r0, [r4, #16]
 8010436:	b928      	cbnz	r0, 8010444 <_svfiprintf_r+0x30>
 8010438:	230c      	movs	r3, #12
 801043a:	f8c8 3000 	str.w	r3, [r8]
 801043e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010442:	e0c8      	b.n	80105d6 <_svfiprintf_r+0x1c2>
 8010444:	2340      	movs	r3, #64	; 0x40
 8010446:	6163      	str	r3, [r4, #20]
 8010448:	2300      	movs	r3, #0
 801044a:	9309      	str	r3, [sp, #36]	; 0x24
 801044c:	2320      	movs	r3, #32
 801044e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010452:	2330      	movs	r3, #48	; 0x30
 8010454:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010458:	9503      	str	r5, [sp, #12]
 801045a:	f04f 0b01 	mov.w	fp, #1
 801045e:	4637      	mov	r7, r6
 8010460:	463d      	mov	r5, r7
 8010462:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010466:	b10b      	cbz	r3, 801046c <_svfiprintf_r+0x58>
 8010468:	2b25      	cmp	r3, #37	; 0x25
 801046a:	d13e      	bne.n	80104ea <_svfiprintf_r+0xd6>
 801046c:	ebb7 0a06 	subs.w	sl, r7, r6
 8010470:	d00b      	beq.n	801048a <_svfiprintf_r+0x76>
 8010472:	4653      	mov	r3, sl
 8010474:	4632      	mov	r2, r6
 8010476:	4621      	mov	r1, r4
 8010478:	4640      	mov	r0, r8
 801047a:	f7ff ff71 	bl	8010360 <__ssputs_r>
 801047e:	3001      	adds	r0, #1
 8010480:	f000 80a4 	beq.w	80105cc <_svfiprintf_r+0x1b8>
 8010484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010486:	4453      	add	r3, sl
 8010488:	9309      	str	r3, [sp, #36]	; 0x24
 801048a:	783b      	ldrb	r3, [r7, #0]
 801048c:	2b00      	cmp	r3, #0
 801048e:	f000 809d 	beq.w	80105cc <_svfiprintf_r+0x1b8>
 8010492:	2300      	movs	r3, #0
 8010494:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010498:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801049c:	9304      	str	r3, [sp, #16]
 801049e:	9307      	str	r3, [sp, #28]
 80104a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80104a4:	931a      	str	r3, [sp, #104]	; 0x68
 80104a6:	462f      	mov	r7, r5
 80104a8:	2205      	movs	r2, #5
 80104aa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80104ae:	4850      	ldr	r0, [pc, #320]	; (80105f0 <_svfiprintf_r+0x1dc>)
 80104b0:	f7ef ff1e 	bl	80002f0 <memchr>
 80104b4:	9b04      	ldr	r3, [sp, #16]
 80104b6:	b9d0      	cbnz	r0, 80104ee <_svfiprintf_r+0xda>
 80104b8:	06d9      	lsls	r1, r3, #27
 80104ba:	bf44      	itt	mi
 80104bc:	2220      	movmi	r2, #32
 80104be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80104c2:	071a      	lsls	r2, r3, #28
 80104c4:	bf44      	itt	mi
 80104c6:	222b      	movmi	r2, #43	; 0x2b
 80104c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80104cc:	782a      	ldrb	r2, [r5, #0]
 80104ce:	2a2a      	cmp	r2, #42	; 0x2a
 80104d0:	d015      	beq.n	80104fe <_svfiprintf_r+0xea>
 80104d2:	9a07      	ldr	r2, [sp, #28]
 80104d4:	462f      	mov	r7, r5
 80104d6:	2000      	movs	r0, #0
 80104d8:	250a      	movs	r5, #10
 80104da:	4639      	mov	r1, r7
 80104dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80104e0:	3b30      	subs	r3, #48	; 0x30
 80104e2:	2b09      	cmp	r3, #9
 80104e4:	d94d      	bls.n	8010582 <_svfiprintf_r+0x16e>
 80104e6:	b1b8      	cbz	r0, 8010518 <_svfiprintf_r+0x104>
 80104e8:	e00f      	b.n	801050a <_svfiprintf_r+0xf6>
 80104ea:	462f      	mov	r7, r5
 80104ec:	e7b8      	b.n	8010460 <_svfiprintf_r+0x4c>
 80104ee:	4a40      	ldr	r2, [pc, #256]	; (80105f0 <_svfiprintf_r+0x1dc>)
 80104f0:	1a80      	subs	r0, r0, r2
 80104f2:	fa0b f000 	lsl.w	r0, fp, r0
 80104f6:	4318      	orrs	r0, r3
 80104f8:	9004      	str	r0, [sp, #16]
 80104fa:	463d      	mov	r5, r7
 80104fc:	e7d3      	b.n	80104a6 <_svfiprintf_r+0x92>
 80104fe:	9a03      	ldr	r2, [sp, #12]
 8010500:	1d11      	adds	r1, r2, #4
 8010502:	6812      	ldr	r2, [r2, #0]
 8010504:	9103      	str	r1, [sp, #12]
 8010506:	2a00      	cmp	r2, #0
 8010508:	db01      	blt.n	801050e <_svfiprintf_r+0xfa>
 801050a:	9207      	str	r2, [sp, #28]
 801050c:	e004      	b.n	8010518 <_svfiprintf_r+0x104>
 801050e:	4252      	negs	r2, r2
 8010510:	f043 0302 	orr.w	r3, r3, #2
 8010514:	9207      	str	r2, [sp, #28]
 8010516:	9304      	str	r3, [sp, #16]
 8010518:	783b      	ldrb	r3, [r7, #0]
 801051a:	2b2e      	cmp	r3, #46	; 0x2e
 801051c:	d10c      	bne.n	8010538 <_svfiprintf_r+0x124>
 801051e:	787b      	ldrb	r3, [r7, #1]
 8010520:	2b2a      	cmp	r3, #42	; 0x2a
 8010522:	d133      	bne.n	801058c <_svfiprintf_r+0x178>
 8010524:	9b03      	ldr	r3, [sp, #12]
 8010526:	1d1a      	adds	r2, r3, #4
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	9203      	str	r2, [sp, #12]
 801052c:	2b00      	cmp	r3, #0
 801052e:	bfb8      	it	lt
 8010530:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010534:	3702      	adds	r7, #2
 8010536:	9305      	str	r3, [sp, #20]
 8010538:	4d2e      	ldr	r5, [pc, #184]	; (80105f4 <_svfiprintf_r+0x1e0>)
 801053a:	7839      	ldrb	r1, [r7, #0]
 801053c:	2203      	movs	r2, #3
 801053e:	4628      	mov	r0, r5
 8010540:	f7ef fed6 	bl	80002f0 <memchr>
 8010544:	b138      	cbz	r0, 8010556 <_svfiprintf_r+0x142>
 8010546:	2340      	movs	r3, #64	; 0x40
 8010548:	1b40      	subs	r0, r0, r5
 801054a:	fa03 f000 	lsl.w	r0, r3, r0
 801054e:	9b04      	ldr	r3, [sp, #16]
 8010550:	4303      	orrs	r3, r0
 8010552:	3701      	adds	r7, #1
 8010554:	9304      	str	r3, [sp, #16]
 8010556:	7839      	ldrb	r1, [r7, #0]
 8010558:	4827      	ldr	r0, [pc, #156]	; (80105f8 <_svfiprintf_r+0x1e4>)
 801055a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801055e:	2206      	movs	r2, #6
 8010560:	1c7e      	adds	r6, r7, #1
 8010562:	f7ef fec5 	bl	80002f0 <memchr>
 8010566:	2800      	cmp	r0, #0
 8010568:	d038      	beq.n	80105dc <_svfiprintf_r+0x1c8>
 801056a:	4b24      	ldr	r3, [pc, #144]	; (80105fc <_svfiprintf_r+0x1e8>)
 801056c:	bb13      	cbnz	r3, 80105b4 <_svfiprintf_r+0x1a0>
 801056e:	9b03      	ldr	r3, [sp, #12]
 8010570:	3307      	adds	r3, #7
 8010572:	f023 0307 	bic.w	r3, r3, #7
 8010576:	3308      	adds	r3, #8
 8010578:	9303      	str	r3, [sp, #12]
 801057a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801057c:	444b      	add	r3, r9
 801057e:	9309      	str	r3, [sp, #36]	; 0x24
 8010580:	e76d      	b.n	801045e <_svfiprintf_r+0x4a>
 8010582:	fb05 3202 	mla	r2, r5, r2, r3
 8010586:	2001      	movs	r0, #1
 8010588:	460f      	mov	r7, r1
 801058a:	e7a6      	b.n	80104da <_svfiprintf_r+0xc6>
 801058c:	2300      	movs	r3, #0
 801058e:	3701      	adds	r7, #1
 8010590:	9305      	str	r3, [sp, #20]
 8010592:	4619      	mov	r1, r3
 8010594:	250a      	movs	r5, #10
 8010596:	4638      	mov	r0, r7
 8010598:	f810 2b01 	ldrb.w	r2, [r0], #1
 801059c:	3a30      	subs	r2, #48	; 0x30
 801059e:	2a09      	cmp	r2, #9
 80105a0:	d903      	bls.n	80105aa <_svfiprintf_r+0x196>
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d0c8      	beq.n	8010538 <_svfiprintf_r+0x124>
 80105a6:	9105      	str	r1, [sp, #20]
 80105a8:	e7c6      	b.n	8010538 <_svfiprintf_r+0x124>
 80105aa:	fb05 2101 	mla	r1, r5, r1, r2
 80105ae:	2301      	movs	r3, #1
 80105b0:	4607      	mov	r7, r0
 80105b2:	e7f0      	b.n	8010596 <_svfiprintf_r+0x182>
 80105b4:	ab03      	add	r3, sp, #12
 80105b6:	9300      	str	r3, [sp, #0]
 80105b8:	4622      	mov	r2, r4
 80105ba:	4b11      	ldr	r3, [pc, #68]	; (8010600 <_svfiprintf_r+0x1ec>)
 80105bc:	a904      	add	r1, sp, #16
 80105be:	4640      	mov	r0, r8
 80105c0:	f7fc fb12 	bl	800cbe8 <_printf_float>
 80105c4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80105c8:	4681      	mov	r9, r0
 80105ca:	d1d6      	bne.n	801057a <_svfiprintf_r+0x166>
 80105cc:	89a3      	ldrh	r3, [r4, #12]
 80105ce:	065b      	lsls	r3, r3, #25
 80105d0:	f53f af35 	bmi.w	801043e <_svfiprintf_r+0x2a>
 80105d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80105d6:	b01d      	add	sp, #116	; 0x74
 80105d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105dc:	ab03      	add	r3, sp, #12
 80105de:	9300      	str	r3, [sp, #0]
 80105e0:	4622      	mov	r2, r4
 80105e2:	4b07      	ldr	r3, [pc, #28]	; (8010600 <_svfiprintf_r+0x1ec>)
 80105e4:	a904      	add	r1, sp, #16
 80105e6:	4640      	mov	r0, r8
 80105e8:	f7fc fda0 	bl	800d12c <_printf_i>
 80105ec:	e7ea      	b.n	80105c4 <_svfiprintf_r+0x1b0>
 80105ee:	bf00      	nop
 80105f0:	08011ec4 	.word	0x08011ec4
 80105f4:	08011eca 	.word	0x08011eca
 80105f8:	08011ece 	.word	0x08011ece
 80105fc:	0800cbe9 	.word	0x0800cbe9
 8010600:	08010361 	.word	0x08010361

08010604 <__sfputc_r>:
 8010604:	6893      	ldr	r3, [r2, #8]
 8010606:	3b01      	subs	r3, #1
 8010608:	2b00      	cmp	r3, #0
 801060a:	b410      	push	{r4}
 801060c:	6093      	str	r3, [r2, #8]
 801060e:	da08      	bge.n	8010622 <__sfputc_r+0x1e>
 8010610:	6994      	ldr	r4, [r2, #24]
 8010612:	42a3      	cmp	r3, r4
 8010614:	db01      	blt.n	801061a <__sfputc_r+0x16>
 8010616:	290a      	cmp	r1, #10
 8010618:	d103      	bne.n	8010622 <__sfputc_r+0x1e>
 801061a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801061e:	f7fe b801 	b.w	800e624 <__swbuf_r>
 8010622:	6813      	ldr	r3, [r2, #0]
 8010624:	1c58      	adds	r0, r3, #1
 8010626:	6010      	str	r0, [r2, #0]
 8010628:	7019      	strb	r1, [r3, #0]
 801062a:	4608      	mov	r0, r1
 801062c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010630:	4770      	bx	lr

08010632 <__sfputs_r>:
 8010632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010634:	4606      	mov	r6, r0
 8010636:	460f      	mov	r7, r1
 8010638:	4614      	mov	r4, r2
 801063a:	18d5      	adds	r5, r2, r3
 801063c:	42ac      	cmp	r4, r5
 801063e:	d101      	bne.n	8010644 <__sfputs_r+0x12>
 8010640:	2000      	movs	r0, #0
 8010642:	e007      	b.n	8010654 <__sfputs_r+0x22>
 8010644:	463a      	mov	r2, r7
 8010646:	f814 1b01 	ldrb.w	r1, [r4], #1
 801064a:	4630      	mov	r0, r6
 801064c:	f7ff ffda 	bl	8010604 <__sfputc_r>
 8010650:	1c43      	adds	r3, r0, #1
 8010652:	d1f3      	bne.n	801063c <__sfputs_r+0xa>
 8010654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010658 <_vfiprintf_r>:
 8010658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801065c:	460c      	mov	r4, r1
 801065e:	b09d      	sub	sp, #116	; 0x74
 8010660:	4617      	mov	r7, r2
 8010662:	461d      	mov	r5, r3
 8010664:	4606      	mov	r6, r0
 8010666:	b118      	cbz	r0, 8010670 <_vfiprintf_r+0x18>
 8010668:	6983      	ldr	r3, [r0, #24]
 801066a:	b90b      	cbnz	r3, 8010670 <_vfiprintf_r+0x18>
 801066c:	f7fc f8d6 	bl	800c81c <__sinit>
 8010670:	4b7c      	ldr	r3, [pc, #496]	; (8010864 <_vfiprintf_r+0x20c>)
 8010672:	429c      	cmp	r4, r3
 8010674:	d158      	bne.n	8010728 <_vfiprintf_r+0xd0>
 8010676:	6874      	ldr	r4, [r6, #4]
 8010678:	89a3      	ldrh	r3, [r4, #12]
 801067a:	0718      	lsls	r0, r3, #28
 801067c:	d55e      	bpl.n	801073c <_vfiprintf_r+0xe4>
 801067e:	6923      	ldr	r3, [r4, #16]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d05b      	beq.n	801073c <_vfiprintf_r+0xe4>
 8010684:	2300      	movs	r3, #0
 8010686:	9309      	str	r3, [sp, #36]	; 0x24
 8010688:	2320      	movs	r3, #32
 801068a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801068e:	2330      	movs	r3, #48	; 0x30
 8010690:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010694:	9503      	str	r5, [sp, #12]
 8010696:	f04f 0b01 	mov.w	fp, #1
 801069a:	46b8      	mov	r8, r7
 801069c:	4645      	mov	r5, r8
 801069e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80106a2:	b10b      	cbz	r3, 80106a8 <_vfiprintf_r+0x50>
 80106a4:	2b25      	cmp	r3, #37	; 0x25
 80106a6:	d154      	bne.n	8010752 <_vfiprintf_r+0xfa>
 80106a8:	ebb8 0a07 	subs.w	sl, r8, r7
 80106ac:	d00b      	beq.n	80106c6 <_vfiprintf_r+0x6e>
 80106ae:	4653      	mov	r3, sl
 80106b0:	463a      	mov	r2, r7
 80106b2:	4621      	mov	r1, r4
 80106b4:	4630      	mov	r0, r6
 80106b6:	f7ff ffbc 	bl	8010632 <__sfputs_r>
 80106ba:	3001      	adds	r0, #1
 80106bc:	f000 80c2 	beq.w	8010844 <_vfiprintf_r+0x1ec>
 80106c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106c2:	4453      	add	r3, sl
 80106c4:	9309      	str	r3, [sp, #36]	; 0x24
 80106c6:	f898 3000 	ldrb.w	r3, [r8]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	f000 80ba 	beq.w	8010844 <_vfiprintf_r+0x1ec>
 80106d0:	2300      	movs	r3, #0
 80106d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80106d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80106da:	9304      	str	r3, [sp, #16]
 80106dc:	9307      	str	r3, [sp, #28]
 80106de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80106e2:	931a      	str	r3, [sp, #104]	; 0x68
 80106e4:	46a8      	mov	r8, r5
 80106e6:	2205      	movs	r2, #5
 80106e8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80106ec:	485e      	ldr	r0, [pc, #376]	; (8010868 <_vfiprintf_r+0x210>)
 80106ee:	f7ef fdff 	bl	80002f0 <memchr>
 80106f2:	9b04      	ldr	r3, [sp, #16]
 80106f4:	bb78      	cbnz	r0, 8010756 <_vfiprintf_r+0xfe>
 80106f6:	06d9      	lsls	r1, r3, #27
 80106f8:	bf44      	itt	mi
 80106fa:	2220      	movmi	r2, #32
 80106fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010700:	071a      	lsls	r2, r3, #28
 8010702:	bf44      	itt	mi
 8010704:	222b      	movmi	r2, #43	; 0x2b
 8010706:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801070a:	782a      	ldrb	r2, [r5, #0]
 801070c:	2a2a      	cmp	r2, #42	; 0x2a
 801070e:	d02a      	beq.n	8010766 <_vfiprintf_r+0x10e>
 8010710:	9a07      	ldr	r2, [sp, #28]
 8010712:	46a8      	mov	r8, r5
 8010714:	2000      	movs	r0, #0
 8010716:	250a      	movs	r5, #10
 8010718:	4641      	mov	r1, r8
 801071a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801071e:	3b30      	subs	r3, #48	; 0x30
 8010720:	2b09      	cmp	r3, #9
 8010722:	d969      	bls.n	80107f8 <_vfiprintf_r+0x1a0>
 8010724:	b360      	cbz	r0, 8010780 <_vfiprintf_r+0x128>
 8010726:	e024      	b.n	8010772 <_vfiprintf_r+0x11a>
 8010728:	4b50      	ldr	r3, [pc, #320]	; (801086c <_vfiprintf_r+0x214>)
 801072a:	429c      	cmp	r4, r3
 801072c:	d101      	bne.n	8010732 <_vfiprintf_r+0xda>
 801072e:	68b4      	ldr	r4, [r6, #8]
 8010730:	e7a2      	b.n	8010678 <_vfiprintf_r+0x20>
 8010732:	4b4f      	ldr	r3, [pc, #316]	; (8010870 <_vfiprintf_r+0x218>)
 8010734:	429c      	cmp	r4, r3
 8010736:	bf08      	it	eq
 8010738:	68f4      	ldreq	r4, [r6, #12]
 801073a:	e79d      	b.n	8010678 <_vfiprintf_r+0x20>
 801073c:	4621      	mov	r1, r4
 801073e:	4630      	mov	r0, r6
 8010740:	f7fd ffd4 	bl	800e6ec <__swsetup_r>
 8010744:	2800      	cmp	r0, #0
 8010746:	d09d      	beq.n	8010684 <_vfiprintf_r+0x2c>
 8010748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801074c:	b01d      	add	sp, #116	; 0x74
 801074e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010752:	46a8      	mov	r8, r5
 8010754:	e7a2      	b.n	801069c <_vfiprintf_r+0x44>
 8010756:	4a44      	ldr	r2, [pc, #272]	; (8010868 <_vfiprintf_r+0x210>)
 8010758:	1a80      	subs	r0, r0, r2
 801075a:	fa0b f000 	lsl.w	r0, fp, r0
 801075e:	4318      	orrs	r0, r3
 8010760:	9004      	str	r0, [sp, #16]
 8010762:	4645      	mov	r5, r8
 8010764:	e7be      	b.n	80106e4 <_vfiprintf_r+0x8c>
 8010766:	9a03      	ldr	r2, [sp, #12]
 8010768:	1d11      	adds	r1, r2, #4
 801076a:	6812      	ldr	r2, [r2, #0]
 801076c:	9103      	str	r1, [sp, #12]
 801076e:	2a00      	cmp	r2, #0
 8010770:	db01      	blt.n	8010776 <_vfiprintf_r+0x11e>
 8010772:	9207      	str	r2, [sp, #28]
 8010774:	e004      	b.n	8010780 <_vfiprintf_r+0x128>
 8010776:	4252      	negs	r2, r2
 8010778:	f043 0302 	orr.w	r3, r3, #2
 801077c:	9207      	str	r2, [sp, #28]
 801077e:	9304      	str	r3, [sp, #16]
 8010780:	f898 3000 	ldrb.w	r3, [r8]
 8010784:	2b2e      	cmp	r3, #46	; 0x2e
 8010786:	d10e      	bne.n	80107a6 <_vfiprintf_r+0x14e>
 8010788:	f898 3001 	ldrb.w	r3, [r8, #1]
 801078c:	2b2a      	cmp	r3, #42	; 0x2a
 801078e:	d138      	bne.n	8010802 <_vfiprintf_r+0x1aa>
 8010790:	9b03      	ldr	r3, [sp, #12]
 8010792:	1d1a      	adds	r2, r3, #4
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	9203      	str	r2, [sp, #12]
 8010798:	2b00      	cmp	r3, #0
 801079a:	bfb8      	it	lt
 801079c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80107a0:	f108 0802 	add.w	r8, r8, #2
 80107a4:	9305      	str	r3, [sp, #20]
 80107a6:	4d33      	ldr	r5, [pc, #204]	; (8010874 <_vfiprintf_r+0x21c>)
 80107a8:	f898 1000 	ldrb.w	r1, [r8]
 80107ac:	2203      	movs	r2, #3
 80107ae:	4628      	mov	r0, r5
 80107b0:	f7ef fd9e 	bl	80002f0 <memchr>
 80107b4:	b140      	cbz	r0, 80107c8 <_vfiprintf_r+0x170>
 80107b6:	2340      	movs	r3, #64	; 0x40
 80107b8:	1b40      	subs	r0, r0, r5
 80107ba:	fa03 f000 	lsl.w	r0, r3, r0
 80107be:	9b04      	ldr	r3, [sp, #16]
 80107c0:	4303      	orrs	r3, r0
 80107c2:	f108 0801 	add.w	r8, r8, #1
 80107c6:	9304      	str	r3, [sp, #16]
 80107c8:	f898 1000 	ldrb.w	r1, [r8]
 80107cc:	482a      	ldr	r0, [pc, #168]	; (8010878 <_vfiprintf_r+0x220>)
 80107ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80107d2:	2206      	movs	r2, #6
 80107d4:	f108 0701 	add.w	r7, r8, #1
 80107d8:	f7ef fd8a 	bl	80002f0 <memchr>
 80107dc:	2800      	cmp	r0, #0
 80107de:	d037      	beq.n	8010850 <_vfiprintf_r+0x1f8>
 80107e0:	4b26      	ldr	r3, [pc, #152]	; (801087c <_vfiprintf_r+0x224>)
 80107e2:	bb1b      	cbnz	r3, 801082c <_vfiprintf_r+0x1d4>
 80107e4:	9b03      	ldr	r3, [sp, #12]
 80107e6:	3307      	adds	r3, #7
 80107e8:	f023 0307 	bic.w	r3, r3, #7
 80107ec:	3308      	adds	r3, #8
 80107ee:	9303      	str	r3, [sp, #12]
 80107f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107f2:	444b      	add	r3, r9
 80107f4:	9309      	str	r3, [sp, #36]	; 0x24
 80107f6:	e750      	b.n	801069a <_vfiprintf_r+0x42>
 80107f8:	fb05 3202 	mla	r2, r5, r2, r3
 80107fc:	2001      	movs	r0, #1
 80107fe:	4688      	mov	r8, r1
 8010800:	e78a      	b.n	8010718 <_vfiprintf_r+0xc0>
 8010802:	2300      	movs	r3, #0
 8010804:	f108 0801 	add.w	r8, r8, #1
 8010808:	9305      	str	r3, [sp, #20]
 801080a:	4619      	mov	r1, r3
 801080c:	250a      	movs	r5, #10
 801080e:	4640      	mov	r0, r8
 8010810:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010814:	3a30      	subs	r2, #48	; 0x30
 8010816:	2a09      	cmp	r2, #9
 8010818:	d903      	bls.n	8010822 <_vfiprintf_r+0x1ca>
 801081a:	2b00      	cmp	r3, #0
 801081c:	d0c3      	beq.n	80107a6 <_vfiprintf_r+0x14e>
 801081e:	9105      	str	r1, [sp, #20]
 8010820:	e7c1      	b.n	80107a6 <_vfiprintf_r+0x14e>
 8010822:	fb05 2101 	mla	r1, r5, r1, r2
 8010826:	2301      	movs	r3, #1
 8010828:	4680      	mov	r8, r0
 801082a:	e7f0      	b.n	801080e <_vfiprintf_r+0x1b6>
 801082c:	ab03      	add	r3, sp, #12
 801082e:	9300      	str	r3, [sp, #0]
 8010830:	4622      	mov	r2, r4
 8010832:	4b13      	ldr	r3, [pc, #76]	; (8010880 <_vfiprintf_r+0x228>)
 8010834:	a904      	add	r1, sp, #16
 8010836:	4630      	mov	r0, r6
 8010838:	f7fc f9d6 	bl	800cbe8 <_printf_float>
 801083c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8010840:	4681      	mov	r9, r0
 8010842:	d1d5      	bne.n	80107f0 <_vfiprintf_r+0x198>
 8010844:	89a3      	ldrh	r3, [r4, #12]
 8010846:	065b      	lsls	r3, r3, #25
 8010848:	f53f af7e 	bmi.w	8010748 <_vfiprintf_r+0xf0>
 801084c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801084e:	e77d      	b.n	801074c <_vfiprintf_r+0xf4>
 8010850:	ab03      	add	r3, sp, #12
 8010852:	9300      	str	r3, [sp, #0]
 8010854:	4622      	mov	r2, r4
 8010856:	4b0a      	ldr	r3, [pc, #40]	; (8010880 <_vfiprintf_r+0x228>)
 8010858:	a904      	add	r1, sp, #16
 801085a:	4630      	mov	r0, r6
 801085c:	f7fc fc66 	bl	800d12c <_printf_i>
 8010860:	e7ec      	b.n	801083c <_vfiprintf_r+0x1e4>
 8010862:	bf00      	nop
 8010864:	08011cdc 	.word	0x08011cdc
 8010868:	08011ec4 	.word	0x08011ec4
 801086c:	08011cfc 	.word	0x08011cfc
 8010870:	08011cbc 	.word	0x08011cbc
 8010874:	08011eca 	.word	0x08011eca
 8010878:	08011ece 	.word	0x08011ece
 801087c:	0800cbe9 	.word	0x0800cbe9
 8010880:	08010633 	.word	0x08010633

08010884 <_read_r>:
 8010884:	b538      	push	{r3, r4, r5, lr}
 8010886:	4c07      	ldr	r4, [pc, #28]	; (80108a4 <_read_r+0x20>)
 8010888:	4605      	mov	r5, r0
 801088a:	4608      	mov	r0, r1
 801088c:	4611      	mov	r1, r2
 801088e:	2200      	movs	r2, #0
 8010890:	6022      	str	r2, [r4, #0]
 8010892:	461a      	mov	r2, r3
 8010894:	f7f1 fa94 	bl	8001dc0 <_read>
 8010898:	1c43      	adds	r3, r0, #1
 801089a:	d102      	bne.n	80108a2 <_read_r+0x1e>
 801089c:	6823      	ldr	r3, [r4, #0]
 801089e:	b103      	cbz	r3, 80108a2 <_read_r+0x1e>
 80108a0:	602b      	str	r3, [r5, #0]
 80108a2:	bd38      	pop	{r3, r4, r5, pc}
 80108a4:	24005a68 	.word	0x24005a68

080108a8 <__ascii_wctomb>:
 80108a8:	b149      	cbz	r1, 80108be <__ascii_wctomb+0x16>
 80108aa:	2aff      	cmp	r2, #255	; 0xff
 80108ac:	bf85      	ittet	hi
 80108ae:	238a      	movhi	r3, #138	; 0x8a
 80108b0:	6003      	strhi	r3, [r0, #0]
 80108b2:	700a      	strbls	r2, [r1, #0]
 80108b4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80108b8:	bf98      	it	ls
 80108ba:	2001      	movls	r0, #1
 80108bc:	4770      	bx	lr
 80108be:	4608      	mov	r0, r1
 80108c0:	4770      	bx	lr
	...

080108c4 <_fstat_r>:
 80108c4:	b538      	push	{r3, r4, r5, lr}
 80108c6:	4c07      	ldr	r4, [pc, #28]	; (80108e4 <_fstat_r+0x20>)
 80108c8:	2300      	movs	r3, #0
 80108ca:	4605      	mov	r5, r0
 80108cc:	4608      	mov	r0, r1
 80108ce:	4611      	mov	r1, r2
 80108d0:	6023      	str	r3, [r4, #0]
 80108d2:	f7f1 faba 	bl	8001e4a <_fstat>
 80108d6:	1c43      	adds	r3, r0, #1
 80108d8:	d102      	bne.n	80108e0 <_fstat_r+0x1c>
 80108da:	6823      	ldr	r3, [r4, #0]
 80108dc:	b103      	cbz	r3, 80108e0 <_fstat_r+0x1c>
 80108de:	602b      	str	r3, [r5, #0]
 80108e0:	bd38      	pop	{r3, r4, r5, pc}
 80108e2:	bf00      	nop
 80108e4:	24005a68 	.word	0x24005a68

080108e8 <_isatty_r>:
 80108e8:	b538      	push	{r3, r4, r5, lr}
 80108ea:	4c06      	ldr	r4, [pc, #24]	; (8010904 <_isatty_r+0x1c>)
 80108ec:	2300      	movs	r3, #0
 80108ee:	4605      	mov	r5, r0
 80108f0:	4608      	mov	r0, r1
 80108f2:	6023      	str	r3, [r4, #0]
 80108f4:	f7f1 fab9 	bl	8001e6a <_isatty>
 80108f8:	1c43      	adds	r3, r0, #1
 80108fa:	d102      	bne.n	8010902 <_isatty_r+0x1a>
 80108fc:	6823      	ldr	r3, [r4, #0]
 80108fe:	b103      	cbz	r3, 8010902 <_isatty_r+0x1a>
 8010900:	602b      	str	r3, [r5, #0]
 8010902:	bd38      	pop	{r3, r4, r5, pc}
 8010904:	24005a68 	.word	0x24005a68

08010908 <memmove>:
 8010908:	4288      	cmp	r0, r1
 801090a:	b510      	push	{r4, lr}
 801090c:	eb01 0302 	add.w	r3, r1, r2
 8010910:	d807      	bhi.n	8010922 <memmove+0x1a>
 8010912:	1e42      	subs	r2, r0, #1
 8010914:	4299      	cmp	r1, r3
 8010916:	d00a      	beq.n	801092e <memmove+0x26>
 8010918:	f811 4b01 	ldrb.w	r4, [r1], #1
 801091c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010920:	e7f8      	b.n	8010914 <memmove+0xc>
 8010922:	4283      	cmp	r3, r0
 8010924:	d9f5      	bls.n	8010912 <memmove+0xa>
 8010926:	1881      	adds	r1, r0, r2
 8010928:	1ad2      	subs	r2, r2, r3
 801092a:	42d3      	cmn	r3, r2
 801092c:	d100      	bne.n	8010930 <memmove+0x28>
 801092e:	bd10      	pop	{r4, pc}
 8010930:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010934:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010938:	e7f7      	b.n	801092a <memmove+0x22>

0801093a <_realloc_r>:
 801093a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801093c:	4607      	mov	r7, r0
 801093e:	4614      	mov	r4, r2
 8010940:	460e      	mov	r6, r1
 8010942:	b921      	cbnz	r1, 801094e <_realloc_r+0x14>
 8010944:	4611      	mov	r1, r2
 8010946:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801094a:	f7fc b86b 	b.w	800ca24 <_malloc_r>
 801094e:	b922      	cbnz	r2, 801095a <_realloc_r+0x20>
 8010950:	f7fc f81a 	bl	800c988 <_free_r>
 8010954:	4625      	mov	r5, r4
 8010956:	4628      	mov	r0, r5
 8010958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801095a:	f000 f814 	bl	8010986 <_malloc_usable_size_r>
 801095e:	42a0      	cmp	r0, r4
 8010960:	d20f      	bcs.n	8010982 <_realloc_r+0x48>
 8010962:	4621      	mov	r1, r4
 8010964:	4638      	mov	r0, r7
 8010966:	f7fc f85d 	bl	800ca24 <_malloc_r>
 801096a:	4605      	mov	r5, r0
 801096c:	2800      	cmp	r0, #0
 801096e:	d0f2      	beq.n	8010956 <_realloc_r+0x1c>
 8010970:	4631      	mov	r1, r6
 8010972:	4622      	mov	r2, r4
 8010974:	f7ff f8da 	bl	800fb2c <memcpy>
 8010978:	4631      	mov	r1, r6
 801097a:	4638      	mov	r0, r7
 801097c:	f7fc f804 	bl	800c988 <_free_r>
 8010980:	e7e9      	b.n	8010956 <_realloc_r+0x1c>
 8010982:	4635      	mov	r5, r6
 8010984:	e7e7      	b.n	8010956 <_realloc_r+0x1c>

08010986 <_malloc_usable_size_r>:
 8010986:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801098a:	1f18      	subs	r0, r3, #4
 801098c:	2b00      	cmp	r3, #0
 801098e:	bfbc      	itt	lt
 8010990:	580b      	ldrlt	r3, [r1, r0]
 8010992:	18c0      	addlt	r0, r0, r3
 8010994:	4770      	bx	lr
	...

08010998 <sin>:
 8010998:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801099a:	eeb0 7b40 	vmov.f64	d7, d0
 801099e:	ee17 3a90 	vmov	r3, s15
 80109a2:	4a19      	ldr	r2, [pc, #100]	; (8010a08 <sin+0x70>)
 80109a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80109a8:	4293      	cmp	r3, r2
 80109aa:	dc05      	bgt.n	80109b8 <sin+0x20>
 80109ac:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8010a00 <sin+0x68>
 80109b0:	2000      	movs	r0, #0
 80109b2:	f000 fded 	bl	8011590 <__kernel_sin>
 80109b6:	e004      	b.n	80109c2 <sin+0x2a>
 80109b8:	4a14      	ldr	r2, [pc, #80]	; (8010a0c <sin+0x74>)
 80109ba:	4293      	cmp	r3, r2
 80109bc:	dd04      	ble.n	80109c8 <sin+0x30>
 80109be:	ee30 0b40 	vsub.f64	d0, d0, d0
 80109c2:	b005      	add	sp, #20
 80109c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80109c8:	4668      	mov	r0, sp
 80109ca:	f000 f99d 	bl	8010d08 <__ieee754_rem_pio2>
 80109ce:	f000 0003 	and.w	r0, r0, #3
 80109d2:	2801      	cmp	r0, #1
 80109d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80109d8:	ed9d 0b00 	vldr	d0, [sp]
 80109dc:	d004      	beq.n	80109e8 <sin+0x50>
 80109de:	2802      	cmp	r0, #2
 80109e0:	d005      	beq.n	80109ee <sin+0x56>
 80109e2:	b950      	cbnz	r0, 80109fa <sin+0x62>
 80109e4:	2001      	movs	r0, #1
 80109e6:	e7e4      	b.n	80109b2 <sin+0x1a>
 80109e8:	f000 faca 	bl	8010f80 <__kernel_cos>
 80109ec:	e7e9      	b.n	80109c2 <sin+0x2a>
 80109ee:	2001      	movs	r0, #1
 80109f0:	f000 fdce 	bl	8011590 <__kernel_sin>
 80109f4:	eeb1 0b40 	vneg.f64	d0, d0
 80109f8:	e7e3      	b.n	80109c2 <sin+0x2a>
 80109fa:	f000 fac1 	bl	8010f80 <__kernel_cos>
 80109fe:	e7f9      	b.n	80109f4 <sin+0x5c>
	...
 8010a08:	3fe921fb 	.word	0x3fe921fb
 8010a0c:	7fefffff 	.word	0x7fefffff

08010a10 <exp>:
 8010a10:	b510      	push	{r4, lr}
 8010a12:	ed2d 8b04 	vpush	{d8-d9}
 8010a16:	eeb0 8b40 	vmov.f64	d8, d0
 8010a1a:	4c33      	ldr	r4, [pc, #204]	; (8010ae8 <exp+0xd8>)
 8010a1c:	b08a      	sub	sp, #40	; 0x28
 8010a1e:	f000 f86b 	bl	8010af8 <__ieee754_exp>
 8010a22:	f994 3000 	ldrsb.w	r3, [r4]
 8010a26:	eeb0 9b40 	vmov.f64	d9, d0
 8010a2a:	3301      	adds	r3, #1
 8010a2c:	d029      	beq.n	8010a82 <exp+0x72>
 8010a2e:	eeb0 0b48 	vmov.f64	d0, d8
 8010a32:	f000 fe0e 	bl	8011652 <finite>
 8010a36:	b320      	cbz	r0, 8010a82 <exp+0x72>
 8010a38:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8010ad8 <exp+0xc8>
 8010a3c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a44:	dd2e      	ble.n	8010aa4 <exp+0x94>
 8010a46:	2303      	movs	r3, #3
 8010a48:	9300      	str	r3, [sp, #0]
 8010a4a:	4b28      	ldr	r3, [pc, #160]	; (8010aec <exp+0xdc>)
 8010a4c:	9301      	str	r3, [sp, #4]
 8010a4e:	2300      	movs	r3, #0
 8010a50:	9308      	str	r3, [sp, #32]
 8010a52:	f994 3000 	ldrsb.w	r3, [r4]
 8010a56:	ed8d 8b04 	vstr	d8, [sp, #16]
 8010a5a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010a5e:	b9b3      	cbnz	r3, 8010a8e <exp+0x7e>
 8010a60:	4b23      	ldr	r3, [pc, #140]	; (8010af0 <exp+0xe0>)
 8010a62:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8010a66:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010a6a:	4668      	mov	r0, sp
 8010a6c:	f000 fe74 	bl	8011758 <matherr>
 8010a70:	b198      	cbz	r0, 8010a9a <exp+0x8a>
 8010a72:	9b08      	ldr	r3, [sp, #32]
 8010a74:	b11b      	cbz	r3, 8010a7e <exp+0x6e>
 8010a76:	f7fb fdc9 	bl	800c60c <__errno>
 8010a7a:	9b08      	ldr	r3, [sp, #32]
 8010a7c:	6003      	str	r3, [r0, #0]
 8010a7e:	ed9d 9b06 	vldr	d9, [sp, #24]
 8010a82:	eeb0 0b49 	vmov.f64	d0, d9
 8010a86:	b00a      	add	sp, #40	; 0x28
 8010a88:	ecbd 8b04 	vpop	{d8-d9}
 8010a8c:	bd10      	pop	{r4, pc}
 8010a8e:	4919      	ldr	r1, [pc, #100]	; (8010af4 <exp+0xe4>)
 8010a90:	2000      	movs	r0, #0
 8010a92:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010a96:	2b02      	cmp	r3, #2
 8010a98:	d1e7      	bne.n	8010a6a <exp+0x5a>
 8010a9a:	f7fb fdb7 	bl	800c60c <__errno>
 8010a9e:	2322      	movs	r3, #34	; 0x22
 8010aa0:	6003      	str	r3, [r0, #0]
 8010aa2:	e7e6      	b.n	8010a72 <exp+0x62>
 8010aa4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8010ae0 <exp+0xd0>
 8010aa8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ab0:	d5e7      	bpl.n	8010a82 <exp+0x72>
 8010ab2:	2304      	movs	r3, #4
 8010ab4:	9300      	str	r3, [sp, #0]
 8010ab6:	4b0d      	ldr	r3, [pc, #52]	; (8010aec <exp+0xdc>)
 8010ab8:	9301      	str	r3, [sp, #4]
 8010aba:	2300      	movs	r3, #0
 8010abc:	9308      	str	r3, [sp, #32]
 8010abe:	2200      	movs	r2, #0
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010ac6:	ed8d 8b04 	vstr	d8, [sp, #16]
 8010aca:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010ace:	f994 3000 	ldrsb.w	r3, [r4]
 8010ad2:	e7e0      	b.n	8010a96 <exp+0x86>
 8010ad4:	f3af 8000 	nop.w
 8010ad8:	fefa39ef 	.word	0xfefa39ef
 8010adc:	40862e42 	.word	0x40862e42
 8010ae0:	d52d3051 	.word	0xd52d3051
 8010ae4:	c0874910 	.word	0xc0874910
 8010ae8:	240001e8 	.word	0x240001e8
 8010aec:	08011fd6 	.word	0x08011fd6
 8010af0:	47efffff 	.word	0x47efffff
 8010af4:	7ff00000 	.word	0x7ff00000

08010af8 <__ieee754_exp>:
 8010af8:	ee10 1a90 	vmov	r1, s1
 8010afc:	4b7a      	ldr	r3, [pc, #488]	; (8010ce8 <__ieee754_exp+0x1f0>)
 8010afe:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8010b02:	429a      	cmp	r2, r3
 8010b04:	b082      	sub	sp, #8
 8010b06:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8010b0a:	d928      	bls.n	8010b5e <__ieee754_exp+0x66>
 8010b0c:	4b77      	ldr	r3, [pc, #476]	; (8010cec <__ieee754_exp+0x1f4>)
 8010b0e:	429a      	cmp	r2, r3
 8010b10:	d90f      	bls.n	8010b32 <__ieee754_exp+0x3a>
 8010b12:	ee10 3a10 	vmov	r3, s0
 8010b16:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010b1a:	430b      	orrs	r3, r1
 8010b1c:	d003      	beq.n	8010b26 <__ieee754_exp+0x2e>
 8010b1e:	ee30 0b00 	vadd.f64	d0, d0, d0
 8010b22:	b002      	add	sp, #8
 8010b24:	4770      	bx	lr
 8010b26:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8010c80 <__ieee754_exp+0x188>
 8010b2a:	2800      	cmp	r0, #0
 8010b2c:	fe00 0b07 	vseleq.f64	d0, d0, d7
 8010b30:	e7f7      	b.n	8010b22 <__ieee754_exp+0x2a>
 8010b32:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8010c88 <__ieee754_exp+0x190>
 8010b36:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8010b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b3e:	dd04      	ble.n	8010b4a <__ieee754_exp+0x52>
 8010b40:	ed9f 0b53 	vldr	d0, [pc, #332]	; 8010c90 <__ieee754_exp+0x198>
 8010b44:	ee20 0b00 	vmul.f64	d0, d0, d0
 8010b48:	e7eb      	b.n	8010b22 <__ieee754_exp+0x2a>
 8010b4a:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8010c98 <__ieee754_exp+0x1a0>
 8010b4e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8010b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b56:	d505      	bpl.n	8010b64 <__ieee754_exp+0x6c>
 8010b58:	ed9f 0b49 	vldr	d0, [pc, #292]	; 8010c80 <__ieee754_exp+0x188>
 8010b5c:	e7e1      	b.n	8010b22 <__ieee754_exp+0x2a>
 8010b5e:	4b64      	ldr	r3, [pc, #400]	; (8010cf0 <__ieee754_exp+0x1f8>)
 8010b60:	429a      	cmp	r2, r3
 8010b62:	d956      	bls.n	8010c12 <__ieee754_exp+0x11a>
 8010b64:	4b63      	ldr	r3, [pc, #396]	; (8010cf4 <__ieee754_exp+0x1fc>)
 8010b66:	429a      	cmp	r2, r3
 8010b68:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8010b6c:	d838      	bhi.n	8010be0 <__ieee754_exp+0xe8>
 8010b6e:	4b62      	ldr	r3, [pc, #392]	; (8010cf8 <__ieee754_exp+0x200>)
 8010b70:	4413      	add	r3, r2
 8010b72:	ed93 6b00 	vldr	d6, [r3]
 8010b76:	4b61      	ldr	r3, [pc, #388]	; (8010cfc <__ieee754_exp+0x204>)
 8010b78:	ee30 6b46 	vsub.f64	d6, d0, d6
 8010b7c:	4413      	add	r3, r2
 8010b7e:	ed93 7b00 	vldr	d7, [r3]
 8010b82:	f1c0 0301 	rsb	r3, r0, #1
 8010b86:	1a1b      	subs	r3, r3, r0
 8010b88:	ee36 0b47 	vsub.f64	d0, d6, d7
 8010b8c:	ed9f 4b44 	vldr	d4, [pc, #272]	; 8010ca0 <__ieee754_exp+0x1a8>
 8010b90:	ee20 5b00 	vmul.f64	d5, d0, d0
 8010b94:	ed9f 3b44 	vldr	d3, [pc, #272]	; 8010ca8 <__ieee754_exp+0x1b0>
 8010b98:	eea5 3b04 	vfma.f64	d3, d5, d4
 8010b9c:	ed9f 4b44 	vldr	d4, [pc, #272]	; 8010cb0 <__ieee754_exp+0x1b8>
 8010ba0:	eea3 4b05 	vfma.f64	d4, d3, d5
 8010ba4:	ed9f 3b44 	vldr	d3, [pc, #272]	; 8010cb8 <__ieee754_exp+0x1c0>
 8010ba8:	eea4 3b05 	vfma.f64	d3, d4, d5
 8010bac:	ed9f 4b44 	vldr	d4, [pc, #272]	; 8010cc0 <__ieee754_exp+0x1c8>
 8010bb0:	eea3 4b05 	vfma.f64	d4, d3, d5
 8010bb4:	eeb0 3b40 	vmov.f64	d3, d0
 8010bb8:	eea4 3b45 	vfms.f64	d3, d4, d5
 8010bbc:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8010bc0:	eeb0 5b43 	vmov.f64	d5, d3
 8010bc4:	ee20 2b03 	vmul.f64	d2, d0, d3
 8010bc8:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 8010bcc:	bba3      	cbnz	r3, 8010c38 <__ieee754_exp+0x140>
 8010bce:	ee35 5b44 	vsub.f64	d5, d5, d4
 8010bd2:	ee82 7b05 	vdiv.f64	d7, d2, d5
 8010bd6:	ee37 0b40 	vsub.f64	d0, d7, d0
 8010bda:	ee33 0b40 	vsub.f64	d0, d3, d0
 8010bde:	e7a0      	b.n	8010b22 <__ieee754_exp+0x2a>
 8010be0:	4b47      	ldr	r3, [pc, #284]	; (8010d00 <__ieee754_exp+0x208>)
 8010be2:	4413      	add	r3, r2
 8010be4:	ed93 7b00 	vldr	d7, [r3]
 8010be8:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8010cc8 <__ieee754_exp+0x1d0>
 8010bec:	ed9f 5b38 	vldr	d5, [pc, #224]	; 8010cd0 <__ieee754_exp+0x1d8>
 8010bf0:	eea0 7b06 	vfma.f64	d7, d0, d6
 8010bf4:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8010cd8 <__ieee754_exp+0x1e0>
 8010bf8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8010bfc:	ee17 3a90 	vmov	r3, s15
 8010c00:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010c04:	eea7 0b46 	vfms.f64	d0, d7, d6
 8010c08:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010c0c:	eeb0 6b40 	vmov.f64	d6, d0
 8010c10:	e7ba      	b.n	8010b88 <__ieee754_exp+0x90>
 8010c12:	4b3c      	ldr	r3, [pc, #240]	; (8010d04 <__ieee754_exp+0x20c>)
 8010c14:	429a      	cmp	r2, r3
 8010c16:	d80d      	bhi.n	8010c34 <__ieee754_exp+0x13c>
 8010c18:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8010c1c:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8010c90 <__ieee754_exp+0x198>
 8010c20:	ee30 5b05 	vadd.f64	d5, d0, d5
 8010c24:	eeb4 5bc4 	vcmpe.f64	d5, d4
 8010c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c2c:	dd02      	ble.n	8010c34 <__ieee754_exp+0x13c>
 8010c2e:	ee30 0b04 	vadd.f64	d0, d0, d4
 8010c32:	e776      	b.n	8010b22 <__ieee754_exp+0x2a>
 8010c34:	2300      	movs	r3, #0
 8010c36:	e7a9      	b.n	8010b8c <__ieee754_exp+0x94>
 8010c38:	f46f 717f 	mvn.w	r1, #1020	; 0x3fc
 8010c3c:	ee34 5b45 	vsub.f64	d5, d4, d5
 8010c40:	428b      	cmp	r3, r1
 8010c42:	ee82 4b05 	vdiv.f64	d4, d2, d5
 8010c46:	ee37 7b44 	vsub.f64	d7, d7, d4
 8010c4a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010c4e:	ee33 7b47 	vsub.f64	d7, d3, d7
 8010c52:	ed8d 7b00 	vstr	d7, [sp]
 8010c56:	9a01      	ldr	r2, [sp, #4]
 8010c58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c5c:	db04      	blt.n	8010c68 <__ieee754_exp+0x170>
 8010c5e:	eb02 5103 	add.w	r1, r2, r3, lsl #20
 8010c62:	ec41 0b10 	vmov	d0, r0, r1
 8010c66:	e75c      	b.n	8010b22 <__ieee754_exp+0x2a>
 8010c68:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8010c6c:	eb02 5103 	add.w	r1, r2, r3, lsl #20
 8010c70:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8010ce0 <__ieee754_exp+0x1e8>
 8010c74:	ec41 0b10 	vmov	d0, r0, r1
 8010c78:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010c7c:	e751      	b.n	8010b22 <__ieee754_exp+0x2a>
 8010c7e:	bf00      	nop
	...
 8010c88:	fefa39ef 	.word	0xfefa39ef
 8010c8c:	40862e42 	.word	0x40862e42
 8010c90:	8800759c 	.word	0x8800759c
 8010c94:	7e37e43c 	.word	0x7e37e43c
 8010c98:	d52d3051 	.word	0xd52d3051
 8010c9c:	c0874910 	.word	0xc0874910
 8010ca0:	72bea4d0 	.word	0x72bea4d0
 8010ca4:	3e663769 	.word	0x3e663769
 8010ca8:	c5d26bf1 	.word	0xc5d26bf1
 8010cac:	bebbbd41 	.word	0xbebbbd41
 8010cb0:	af25de2c 	.word	0xaf25de2c
 8010cb4:	3f11566a 	.word	0x3f11566a
 8010cb8:	16bebd93 	.word	0x16bebd93
 8010cbc:	bf66c16c 	.word	0xbf66c16c
 8010cc0:	5555553e 	.word	0x5555553e
 8010cc4:	3fc55555 	.word	0x3fc55555
 8010cc8:	652b82fe 	.word	0x652b82fe
 8010ccc:	3ff71547 	.word	0x3ff71547
 8010cd0:	35793c76 	.word	0x35793c76
 8010cd4:	3dea39ef 	.word	0x3dea39ef
 8010cd8:	fee00000 	.word	0xfee00000
 8010cdc:	3fe62e42 	.word	0x3fe62e42
 8010ce0:	00000000 	.word	0x00000000
 8010ce4:	01700000 	.word	0x01700000
 8010ce8:	40862e41 	.word	0x40862e41
 8010cec:	7fefffff 	.word	0x7fefffff
 8010cf0:	3fd62e42 	.word	0x3fd62e42
 8010cf4:	3ff0a2b1 	.word	0x3ff0a2b1
 8010cf8:	08011ff0 	.word	0x08011ff0
 8010cfc:	08012000 	.word	0x08012000
 8010d00:	08011fe0 	.word	0x08011fe0
 8010d04:	3e2fffff 	.word	0x3e2fffff

08010d08 <__ieee754_rem_pio2>:
 8010d08:	b570      	push	{r4, r5, r6, lr}
 8010d0a:	eeb0 7b40 	vmov.f64	d7, d0
 8010d0e:	ee17 5a90 	vmov	r5, s15
 8010d12:	4b95      	ldr	r3, [pc, #596]	; (8010f68 <__ieee754_rem_pio2+0x260>)
 8010d14:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010d18:	429e      	cmp	r6, r3
 8010d1a:	b088      	sub	sp, #32
 8010d1c:	4604      	mov	r4, r0
 8010d1e:	dc07      	bgt.n	8010d30 <__ieee754_rem_pio2+0x28>
 8010d20:	2200      	movs	r2, #0
 8010d22:	2300      	movs	r3, #0
 8010d24:	ed84 0b00 	vstr	d0, [r4]
 8010d28:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010d2c:	2000      	movs	r0, #0
 8010d2e:	e01b      	b.n	8010d68 <__ieee754_rem_pio2+0x60>
 8010d30:	4b8e      	ldr	r3, [pc, #568]	; (8010f6c <__ieee754_rem_pio2+0x264>)
 8010d32:	429e      	cmp	r6, r3
 8010d34:	dc3b      	bgt.n	8010dae <__ieee754_rem_pio2+0xa6>
 8010d36:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8010d3a:	2d00      	cmp	r5, #0
 8010d3c:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8010f28 <__ieee754_rem_pio2+0x220>
 8010d40:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8010d44:	dd19      	ble.n	8010d7a <__ieee754_rem_pio2+0x72>
 8010d46:	ee30 7b46 	vsub.f64	d7, d0, d6
 8010d4a:	429e      	cmp	r6, r3
 8010d4c:	d00e      	beq.n	8010d6c <__ieee754_rem_pio2+0x64>
 8010d4e:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8010f30 <__ieee754_rem_pio2+0x228>
 8010d52:	ee37 5b46 	vsub.f64	d5, d7, d6
 8010d56:	ee37 7b45 	vsub.f64	d7, d7, d5
 8010d5a:	ed84 5b00 	vstr	d5, [r4]
 8010d5e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010d62:	ed84 7b02 	vstr	d7, [r4, #8]
 8010d66:	2001      	movs	r0, #1
 8010d68:	b008      	add	sp, #32
 8010d6a:	bd70      	pop	{r4, r5, r6, pc}
 8010d6c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8010f38 <__ieee754_rem_pio2+0x230>
 8010d70:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010d74:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8010f40 <__ieee754_rem_pio2+0x238>
 8010d78:	e7eb      	b.n	8010d52 <__ieee754_rem_pio2+0x4a>
 8010d7a:	429e      	cmp	r6, r3
 8010d7c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8010d80:	d00e      	beq.n	8010da0 <__ieee754_rem_pio2+0x98>
 8010d82:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8010f30 <__ieee754_rem_pio2+0x228>
 8010d86:	ee37 5b06 	vadd.f64	d5, d7, d6
 8010d8a:	ee37 7b45 	vsub.f64	d7, d7, d5
 8010d8e:	ed84 5b00 	vstr	d5, [r4]
 8010d92:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010d96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010d9a:	ed84 7b02 	vstr	d7, [r4, #8]
 8010d9e:	e7e3      	b.n	8010d68 <__ieee754_rem_pio2+0x60>
 8010da0:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8010f38 <__ieee754_rem_pio2+0x230>
 8010da4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010da8:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8010f40 <__ieee754_rem_pio2+0x238>
 8010dac:	e7eb      	b.n	8010d86 <__ieee754_rem_pio2+0x7e>
 8010dae:	4b70      	ldr	r3, [pc, #448]	; (8010f70 <__ieee754_rem_pio2+0x268>)
 8010db0:	429e      	cmp	r6, r3
 8010db2:	dc6c      	bgt.n	8010e8e <__ieee754_rem_pio2+0x186>
 8010db4:	f000 fc44 	bl	8011640 <fabs>
 8010db8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8010dbc:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8010f48 <__ieee754_rem_pio2+0x240>
 8010dc0:	eea0 7b06 	vfma.f64	d7, d0, d6
 8010dc4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8010dc8:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8010dcc:	ee17 0a90 	vmov	r0, s15
 8010dd0:	eeb1 5b44 	vneg.f64	d5, d4
 8010dd4:	ed9f 7b54 	vldr	d7, [pc, #336]	; 8010f28 <__ieee754_rem_pio2+0x220>
 8010dd8:	eea5 0b07 	vfma.f64	d0, d5, d7
 8010ddc:	ed9f 7b54 	vldr	d7, [pc, #336]	; 8010f30 <__ieee754_rem_pio2+0x228>
 8010de0:	281f      	cmp	r0, #31
 8010de2:	ee24 7b07 	vmul.f64	d7, d4, d7
 8010de6:	ee30 6b47 	vsub.f64	d6, d0, d7
 8010dea:	dc08      	bgt.n	8010dfe <__ieee754_rem_pio2+0xf6>
 8010dec:	1e42      	subs	r2, r0, #1
 8010dee:	4b61      	ldr	r3, [pc, #388]	; (8010f74 <__ieee754_rem_pio2+0x26c>)
 8010df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010df4:	42b3      	cmp	r3, r6
 8010df6:	d002      	beq.n	8010dfe <__ieee754_rem_pio2+0xf6>
 8010df8:	ed84 6b00 	vstr	d6, [r4]
 8010dfc:	e022      	b.n	8010e44 <__ieee754_rem_pio2+0x13c>
 8010dfe:	ee16 3a90 	vmov	r3, s13
 8010e02:	1536      	asrs	r6, r6, #20
 8010e04:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8010e08:	1af3      	subs	r3, r6, r3
 8010e0a:	2b10      	cmp	r3, #16
 8010e0c:	ddf4      	ble.n	8010df8 <__ieee754_rem_pio2+0xf0>
 8010e0e:	eeb0 6b40 	vmov.f64	d6, d0
 8010e12:	ed9f 3b49 	vldr	d3, [pc, #292]	; 8010f38 <__ieee754_rem_pio2+0x230>
 8010e16:	eea5 6b03 	vfma.f64	d6, d5, d3
 8010e1a:	ee30 7b46 	vsub.f64	d7, d0, d6
 8010e1e:	eea5 7b03 	vfma.f64	d7, d5, d3
 8010e22:	ed9f 3b47 	vldr	d3, [pc, #284]	; 8010f40 <__ieee754_rem_pio2+0x238>
 8010e26:	ee94 7b03 	vfnms.f64	d7, d4, d3
 8010e2a:	ee36 3b47 	vsub.f64	d3, d6, d7
 8010e2e:	ee13 3a90 	vmov	r3, s7
 8010e32:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8010e36:	1af6      	subs	r6, r6, r3
 8010e38:	2e31      	cmp	r6, #49	; 0x31
 8010e3a:	dc17      	bgt.n	8010e6c <__ieee754_rem_pio2+0x164>
 8010e3c:	eeb0 0b46 	vmov.f64	d0, d6
 8010e40:	ed84 3b00 	vstr	d3, [r4]
 8010e44:	ed94 6b00 	vldr	d6, [r4]
 8010e48:	2d00      	cmp	r5, #0
 8010e4a:	ee30 0b46 	vsub.f64	d0, d0, d6
 8010e4e:	ee30 7b47 	vsub.f64	d7, d0, d7
 8010e52:	ed84 7b02 	vstr	d7, [r4, #8]
 8010e56:	da87      	bge.n	8010d68 <__ieee754_rem_pio2+0x60>
 8010e58:	eeb1 6b46 	vneg.f64	d6, d6
 8010e5c:	ed84 6b00 	vstr	d6, [r4]
 8010e60:	eeb1 7b47 	vneg.f64	d7, d7
 8010e64:	4240      	negs	r0, r0
 8010e66:	ed84 7b02 	vstr	d7, [r4, #8]
 8010e6a:	e77d      	b.n	8010d68 <__ieee754_rem_pio2+0x60>
 8010e6c:	ed9f 3b38 	vldr	d3, [pc, #224]	; 8010f50 <__ieee754_rem_pio2+0x248>
 8010e70:	eeb0 0b46 	vmov.f64	d0, d6
 8010e74:	eea5 0b03 	vfma.f64	d0, d5, d3
 8010e78:	ee36 7b40 	vsub.f64	d7, d6, d0
 8010e7c:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8010f58 <__ieee754_rem_pio2+0x250>
 8010e80:	eea5 7b03 	vfma.f64	d7, d5, d3
 8010e84:	ee94 7b06 	vfnms.f64	d7, d4, d6
 8010e88:	ee30 6b47 	vsub.f64	d6, d0, d7
 8010e8c:	e7b4      	b.n	8010df8 <__ieee754_rem_pio2+0xf0>
 8010e8e:	4b3a      	ldr	r3, [pc, #232]	; (8010f78 <__ieee754_rem_pio2+0x270>)
 8010e90:	429e      	cmp	r6, r3
 8010e92:	dd06      	ble.n	8010ea2 <__ieee754_rem_pio2+0x19a>
 8010e94:	ee30 7b40 	vsub.f64	d7, d0, d0
 8010e98:	ed80 7b02 	vstr	d7, [r0, #8]
 8010e9c:	ed80 7b00 	vstr	d7, [r0]
 8010ea0:	e744      	b.n	8010d2c <__ieee754_rem_pio2+0x24>
 8010ea2:	1532      	asrs	r2, r6, #20
 8010ea4:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8010ea8:	ee10 0a10 	vmov	r0, s0
 8010eac:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8010eb0:	ec41 0b17 	vmov	d7, r0, r1
 8010eb4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8010eb8:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8010f60 <__ieee754_rem_pio2+0x258>
 8010ebc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8010ec0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010ec4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010ec8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010ecc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8010ed0:	a908      	add	r1, sp, #32
 8010ed2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8010ed6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010eda:	ed8d 6b04 	vstr	d6, [sp, #16]
 8010ede:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010ee2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010ee6:	2303      	movs	r3, #3
 8010ee8:	ed31 7b02 	vldmdb	r1!, {d7}
 8010eec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ef4:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8010ef8:	d013      	beq.n	8010f22 <__ieee754_rem_pio2+0x21a>
 8010efa:	4920      	ldr	r1, [pc, #128]	; (8010f7c <__ieee754_rem_pio2+0x274>)
 8010efc:	9101      	str	r1, [sp, #4]
 8010efe:	2102      	movs	r1, #2
 8010f00:	9100      	str	r1, [sp, #0]
 8010f02:	a802      	add	r0, sp, #8
 8010f04:	4621      	mov	r1, r4
 8010f06:	f000 f8a7 	bl	8011058 <__kernel_rem_pio2>
 8010f0a:	2d00      	cmp	r5, #0
 8010f0c:	f6bf af2c 	bge.w	8010d68 <__ieee754_rem_pio2+0x60>
 8010f10:	ed94 7b00 	vldr	d7, [r4]
 8010f14:	eeb1 7b47 	vneg.f64	d7, d7
 8010f18:	ed84 7b00 	vstr	d7, [r4]
 8010f1c:	ed94 7b02 	vldr	d7, [r4, #8]
 8010f20:	e79e      	b.n	8010e60 <__ieee754_rem_pio2+0x158>
 8010f22:	4603      	mov	r3, r0
 8010f24:	e7e0      	b.n	8010ee8 <__ieee754_rem_pio2+0x1e0>
 8010f26:	bf00      	nop
 8010f28:	54400000 	.word	0x54400000
 8010f2c:	3ff921fb 	.word	0x3ff921fb
 8010f30:	1a626331 	.word	0x1a626331
 8010f34:	3dd0b461 	.word	0x3dd0b461
 8010f38:	1a600000 	.word	0x1a600000
 8010f3c:	3dd0b461 	.word	0x3dd0b461
 8010f40:	2e037073 	.word	0x2e037073
 8010f44:	3ba3198a 	.word	0x3ba3198a
 8010f48:	6dc9c883 	.word	0x6dc9c883
 8010f4c:	3fe45f30 	.word	0x3fe45f30
 8010f50:	2e000000 	.word	0x2e000000
 8010f54:	3ba3198a 	.word	0x3ba3198a
 8010f58:	252049c1 	.word	0x252049c1
 8010f5c:	397b839a 	.word	0x397b839a
 8010f60:	00000000 	.word	0x00000000
 8010f64:	41700000 	.word	0x41700000
 8010f68:	3fe921fb 	.word	0x3fe921fb
 8010f6c:	4002d97b 	.word	0x4002d97b
 8010f70:	413921fb 	.word	0x413921fb
 8010f74:	08012010 	.word	0x08012010
 8010f78:	7fefffff 	.word	0x7fefffff
 8010f7c:	08012090 	.word	0x08012090

08010f80 <__kernel_cos>:
 8010f80:	ee10 1a90 	vmov	r1, s1
 8010f84:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8010f88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010f8c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8010f90:	da05      	bge.n	8010f9e <__kernel_cos+0x1e>
 8010f92:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 8010f96:	ee16 3a90 	vmov	r3, s13
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d03d      	beq.n	801101a <__kernel_cos+0x9a>
 8010f9e:	ee20 4b00 	vmul.f64	d4, d0, d0
 8010fa2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8010fa6:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 8011020 <__kernel_cos+0xa0>
 8010faa:	ee21 1b40 	vnmul.f64	d1, d1, d0
 8010fae:	ee24 6b06 	vmul.f64	d6, d4, d6
 8010fb2:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8011028 <__kernel_cos+0xa8>
 8010fb6:	eea4 5b03 	vfma.f64	d5, d4, d3
 8010fba:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 8011030 <__kernel_cos+0xb0>
 8010fbe:	eea5 3b04 	vfma.f64	d3, d5, d4
 8010fc2:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8011038 <__kernel_cos+0xb8>
 8010fc6:	eea3 5b04 	vfma.f64	d5, d3, d4
 8010fca:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 8011040 <__kernel_cos+0xc0>
 8010fce:	4b20      	ldr	r3, [pc, #128]	; (8011050 <__kernel_cos+0xd0>)
 8010fd0:	eea5 3b04 	vfma.f64	d3, d5, d4
 8010fd4:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8011048 <__kernel_cos+0xc8>
 8010fd8:	4299      	cmp	r1, r3
 8010fda:	eea3 5b04 	vfma.f64	d5, d3, d4
 8010fde:	ee25 5b04 	vmul.f64	d5, d5, d4
 8010fe2:	eea4 1b05 	vfma.f64	d1, d4, d5
 8010fe6:	dc04      	bgt.n	8010ff2 <__kernel_cos+0x72>
 8010fe8:	ee36 6b41 	vsub.f64	d6, d6, d1
 8010fec:	ee37 0b46 	vsub.f64	d0, d7, d6
 8010ff0:	4770      	bx	lr
 8010ff2:	4b18      	ldr	r3, [pc, #96]	; (8011054 <__kernel_cos+0xd4>)
 8010ff4:	4299      	cmp	r1, r3
 8010ff6:	dc0d      	bgt.n	8011014 <__kernel_cos+0x94>
 8010ff8:	2200      	movs	r2, #0
 8010ffa:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8010ffe:	ec43 2b15 	vmov	d5, r2, r3
 8011002:	ee37 0b45 	vsub.f64	d0, d7, d5
 8011006:	ee36 6b45 	vsub.f64	d6, d6, d5
 801100a:	ee36 6b41 	vsub.f64	d6, d6, d1
 801100e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8011012:	4770      	bx	lr
 8011014:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8011018:	e7f3      	b.n	8011002 <__kernel_cos+0x82>
 801101a:	eeb0 0b47 	vmov.f64	d0, d7
 801101e:	4770      	bx	lr
 8011020:	be8838d4 	.word	0xbe8838d4
 8011024:	bda8fae9 	.word	0xbda8fae9
 8011028:	bdb4b1c4 	.word	0xbdb4b1c4
 801102c:	3e21ee9e 	.word	0x3e21ee9e
 8011030:	809c52ad 	.word	0x809c52ad
 8011034:	be927e4f 	.word	0xbe927e4f
 8011038:	19cb1590 	.word	0x19cb1590
 801103c:	3efa01a0 	.word	0x3efa01a0
 8011040:	16c15177 	.word	0x16c15177
 8011044:	bf56c16c 	.word	0xbf56c16c
 8011048:	5555554c 	.word	0x5555554c
 801104c:	3fa55555 	.word	0x3fa55555
 8011050:	3fd33332 	.word	0x3fd33332
 8011054:	3fe90000 	.word	0x3fe90000

08011058 <__kernel_rem_pio2>:
 8011058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801105c:	ed2d 8b06 	vpush	{d8-d10}
 8011060:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8011064:	469b      	mov	fp, r3
 8011066:	460e      	mov	r6, r1
 8011068:	4bc7      	ldr	r3, [pc, #796]	; (8011388 <__kernel_rem_pio2+0x330>)
 801106a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 801106c:	9002      	str	r0, [sp, #8]
 801106e:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8011072:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 8011074:	1ed1      	subs	r1, r2, #3
 8011076:	2318      	movs	r3, #24
 8011078:	f06f 0417 	mvn.w	r4, #23
 801107c:	fb91 f1f3 	sdiv	r1, r1, r3
 8011080:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8011084:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 8011088:	fb01 4404 	mla	r4, r1, r4, r4
 801108c:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8011370 <__kernel_rem_pio2+0x318>
 8011090:	4414      	add	r4, r2
 8011092:	eba1 050a 	sub.w	r5, r1, sl
 8011096:	aa1a      	add	r2, sp, #104	; 0x68
 8011098:	eb09 070a 	add.w	r7, r9, sl
 801109c:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 80110a0:	4696      	mov	lr, r2
 80110a2:	2300      	movs	r3, #0
 80110a4:	42bb      	cmp	r3, r7
 80110a6:	dd0f      	ble.n	80110c8 <__kernel_rem_pio2+0x70>
 80110a8:	af6a      	add	r7, sp, #424	; 0x1a8
 80110aa:	2200      	movs	r2, #0
 80110ac:	454a      	cmp	r2, r9
 80110ae:	dc28      	bgt.n	8011102 <__kernel_rem_pio2+0xaa>
 80110b0:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 80110b4:	eb0b 0302 	add.w	r3, fp, r2
 80110b8:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 80110bc:	9d02      	ldr	r5, [sp, #8]
 80110be:	ed9f 7bac 	vldr	d7, [pc, #688]	; 8011370 <__kernel_rem_pio2+0x318>
 80110c2:	f04f 0c00 	mov.w	ip, #0
 80110c6:	e016      	b.n	80110f6 <__kernel_rem_pio2+0x9e>
 80110c8:	42dd      	cmn	r5, r3
 80110ca:	d409      	bmi.n	80110e0 <__kernel_rem_pio2+0x88>
 80110cc:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80110d0:	ee07 2a90 	vmov	s15, r2
 80110d4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80110d8:	ecae 7b02 	vstmia	lr!, {d7}
 80110dc:	3301      	adds	r3, #1
 80110de:	e7e1      	b.n	80110a4 <__kernel_rem_pio2+0x4c>
 80110e0:	eeb0 7b46 	vmov.f64	d7, d6
 80110e4:	e7f8      	b.n	80110d8 <__kernel_rem_pio2+0x80>
 80110e6:	ecb5 5b02 	vldmia	r5!, {d5}
 80110ea:	ed33 6b02 	vldmdb	r3!, {d6}
 80110ee:	f10c 0c01 	add.w	ip, ip, #1
 80110f2:	eea5 7b06 	vfma.f64	d7, d5, d6
 80110f6:	45d4      	cmp	ip, sl
 80110f8:	ddf5      	ble.n	80110e6 <__kernel_rem_pio2+0x8e>
 80110fa:	eca7 7b02 	vstmia	r7!, {d7}
 80110fe:	3201      	adds	r2, #1
 8011100:	e7d4      	b.n	80110ac <__kernel_rem_pio2+0x54>
 8011102:	ab06      	add	r3, sp, #24
 8011104:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8011108:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 8011378 <__kernel_rem_pio2+0x320>
 801110c:	ed9f ab9c 	vldr	d10, [pc, #624]	; 8011380 <__kernel_rem_pio2+0x328>
 8011110:	9304      	str	r3, [sp, #16]
 8011112:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8011116:	9303      	str	r3, [sp, #12]
 8011118:	464d      	mov	r5, r9
 801111a:	ab92      	add	r3, sp, #584	; 0x248
 801111c:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 8011120:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011124:	3f01      	subs	r7, #1
 8011126:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 801112a:	00ff      	lsls	r7, r7, #3
 801112c:	ab92      	add	r3, sp, #584	; 0x248
 801112e:	19da      	adds	r2, r3, r7
 8011130:	3a98      	subs	r2, #152	; 0x98
 8011132:	2300      	movs	r3, #0
 8011134:	1ae9      	subs	r1, r5, r3
 8011136:	2900      	cmp	r1, #0
 8011138:	dc4e      	bgt.n	80111d8 <__kernel_rem_pio2+0x180>
 801113a:	4620      	mov	r0, r4
 801113c:	f000 fb10 	bl	8011760 <scalbn>
 8011140:	eeb0 8b40 	vmov.f64	d8, d0
 8011144:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8011148:	ee28 0b00 	vmul.f64	d0, d8, d0
 801114c:	f000 fa8c 	bl	8011668 <floor>
 8011150:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8011154:	eea0 8b47 	vfms.f64	d8, d0, d7
 8011158:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801115c:	2c00      	cmp	r4, #0
 801115e:	edcd 7a01 	vstr	s15, [sp, #4]
 8011162:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011166:	ee38 8b47 	vsub.f64	d8, d8, d7
 801116a:	dd4a      	ble.n	8011202 <__kernel_rem_pio2+0x1aa>
 801116c:	1e69      	subs	r1, r5, #1
 801116e:	ab06      	add	r3, sp, #24
 8011170:	f1c4 0018 	rsb	r0, r4, #24
 8011174:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8011178:	9a01      	ldr	r2, [sp, #4]
 801117a:	fa4c f300 	asr.w	r3, ip, r0
 801117e:	441a      	add	r2, r3
 8011180:	4083      	lsls	r3, r0
 8011182:	9201      	str	r2, [sp, #4]
 8011184:	ebac 0203 	sub.w	r2, ip, r3
 8011188:	ab06      	add	r3, sp, #24
 801118a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 801118e:	f1c4 0317 	rsb	r3, r4, #23
 8011192:	fa42 f803 	asr.w	r8, r2, r3
 8011196:	f1b8 0f00 	cmp.w	r8, #0
 801119a:	dd43      	ble.n	8011224 <__kernel_rem_pio2+0x1cc>
 801119c:	9b01      	ldr	r3, [sp, #4]
 801119e:	2000      	movs	r0, #0
 80111a0:	3301      	adds	r3, #1
 80111a2:	9301      	str	r3, [sp, #4]
 80111a4:	4601      	mov	r1, r0
 80111a6:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 80111aa:	4285      	cmp	r5, r0
 80111ac:	dc6e      	bgt.n	801128c <__kernel_rem_pio2+0x234>
 80111ae:	2c00      	cmp	r4, #0
 80111b0:	dd04      	ble.n	80111bc <__kernel_rem_pio2+0x164>
 80111b2:	2c01      	cmp	r4, #1
 80111b4:	d07f      	beq.n	80112b6 <__kernel_rem_pio2+0x25e>
 80111b6:	2c02      	cmp	r4, #2
 80111b8:	f000 8087 	beq.w	80112ca <__kernel_rem_pio2+0x272>
 80111bc:	f1b8 0f02 	cmp.w	r8, #2
 80111c0:	d130      	bne.n	8011224 <__kernel_rem_pio2+0x1cc>
 80111c2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80111c6:	ee30 8b48 	vsub.f64	d8, d0, d8
 80111ca:	b359      	cbz	r1, 8011224 <__kernel_rem_pio2+0x1cc>
 80111cc:	4620      	mov	r0, r4
 80111ce:	f000 fac7 	bl	8011760 <scalbn>
 80111d2:	ee38 8b40 	vsub.f64	d8, d8, d0
 80111d6:	e025      	b.n	8011224 <__kernel_rem_pio2+0x1cc>
 80111d8:	ee20 7b09 	vmul.f64	d7, d0, d9
 80111dc:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80111e0:	a806      	add	r0, sp, #24
 80111e2:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80111e6:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80111ea:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80111ee:	ee10 1a10 	vmov	r1, s0
 80111f2:	ed32 0b02 	vldmdb	r2!, {d0}
 80111f6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80111fa:	ee37 0b00 	vadd.f64	d0, d7, d0
 80111fe:	3301      	adds	r3, #1
 8011200:	e798      	b.n	8011134 <__kernel_rem_pio2+0xdc>
 8011202:	d106      	bne.n	8011212 <__kernel_rem_pio2+0x1ba>
 8011204:	1e6b      	subs	r3, r5, #1
 8011206:	aa06      	add	r2, sp, #24
 8011208:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801120c:	ea4f 58e2 	mov.w	r8, r2, asr #23
 8011210:	e7c1      	b.n	8011196 <__kernel_rem_pio2+0x13e>
 8011212:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011216:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801121a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801121e:	da32      	bge.n	8011286 <__kernel_rem_pio2+0x22e>
 8011220:	f04f 0800 	mov.w	r8, #0
 8011224:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801122c:	f040 80b0 	bne.w	8011390 <__kernel_rem_pio2+0x338>
 8011230:	1e6b      	subs	r3, r5, #1
 8011232:	4618      	mov	r0, r3
 8011234:	2200      	movs	r2, #0
 8011236:	4548      	cmp	r0, r9
 8011238:	da4e      	bge.n	80112d8 <__kernel_rem_pio2+0x280>
 801123a:	2a00      	cmp	r2, #0
 801123c:	f000 8088 	beq.w	8011350 <__kernel_rem_pio2+0x2f8>
 8011240:	aa06      	add	r2, sp, #24
 8011242:	3c18      	subs	r4, #24
 8011244:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8011248:	2900      	cmp	r1, #0
 801124a:	f000 808e 	beq.w	801136a <__kernel_rem_pio2+0x312>
 801124e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011252:	4620      	mov	r0, r4
 8011254:	9302      	str	r3, [sp, #8]
 8011256:	f000 fa83 	bl	8011760 <scalbn>
 801125a:	9b02      	ldr	r3, [sp, #8]
 801125c:	aa6a      	add	r2, sp, #424	; 0x1a8
 801125e:	00d9      	lsls	r1, r3, #3
 8011260:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8011378 <__kernel_rem_pio2+0x320>
 8011264:	1850      	adds	r0, r2, r1
 8011266:	f100 0508 	add.w	r5, r0, #8
 801126a:	461c      	mov	r4, r3
 801126c:	2c00      	cmp	r4, #0
 801126e:	f280 80bd 	bge.w	80113ec <__kernel_rem_pio2+0x394>
 8011272:	2500      	movs	r5, #0
 8011274:	1b5c      	subs	r4, r3, r5
 8011276:	2c00      	cmp	r4, #0
 8011278:	f2c0 80dd 	blt.w	8011436 <__kernel_rem_pio2+0x3de>
 801127c:	4f43      	ldr	r7, [pc, #268]	; (801138c <__kernel_rem_pio2+0x334>)
 801127e:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 8011370 <__kernel_rem_pio2+0x318>
 8011282:	2400      	movs	r4, #0
 8011284:	e0cb      	b.n	801141e <__kernel_rem_pio2+0x3c6>
 8011286:	f04f 0802 	mov.w	r8, #2
 801128a:	e787      	b.n	801119c <__kernel_rem_pio2+0x144>
 801128c:	ab06      	add	r3, sp, #24
 801128e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011292:	b949      	cbnz	r1, 80112a8 <__kernel_rem_pio2+0x250>
 8011294:	b12b      	cbz	r3, 80112a2 <__kernel_rem_pio2+0x24a>
 8011296:	aa06      	add	r2, sp, #24
 8011298:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801129c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80112a0:	2301      	movs	r3, #1
 80112a2:	3001      	adds	r0, #1
 80112a4:	4619      	mov	r1, r3
 80112a6:	e780      	b.n	80111aa <__kernel_rem_pio2+0x152>
 80112a8:	aa06      	add	r2, sp, #24
 80112aa:	ebac 0303 	sub.w	r3, ip, r3
 80112ae:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80112b2:	460b      	mov	r3, r1
 80112b4:	e7f5      	b.n	80112a2 <__kernel_rem_pio2+0x24a>
 80112b6:	1e68      	subs	r0, r5, #1
 80112b8:	ab06      	add	r3, sp, #24
 80112ba:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80112be:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80112c2:	aa06      	add	r2, sp, #24
 80112c4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80112c8:	e778      	b.n	80111bc <__kernel_rem_pio2+0x164>
 80112ca:	1e68      	subs	r0, r5, #1
 80112cc:	ab06      	add	r3, sp, #24
 80112ce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80112d2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80112d6:	e7f4      	b.n	80112c2 <__kernel_rem_pio2+0x26a>
 80112d8:	a906      	add	r1, sp, #24
 80112da:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80112de:	3801      	subs	r0, #1
 80112e0:	430a      	orrs	r2, r1
 80112e2:	e7a8      	b.n	8011236 <__kernel_rem_pio2+0x1de>
 80112e4:	f10c 0c01 	add.w	ip, ip, #1
 80112e8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80112ec:	2a00      	cmp	r2, #0
 80112ee:	d0f9      	beq.n	80112e4 <__kernel_rem_pio2+0x28c>
 80112f0:	eb0b 0305 	add.w	r3, fp, r5
 80112f4:	aa1a      	add	r2, sp, #104	; 0x68
 80112f6:	00db      	lsls	r3, r3, #3
 80112f8:	1898      	adds	r0, r3, r2
 80112fa:	3008      	adds	r0, #8
 80112fc:	1c69      	adds	r1, r5, #1
 80112fe:	3708      	adds	r7, #8
 8011300:	2200      	movs	r2, #0
 8011302:	4465      	add	r5, ip
 8011304:	9005      	str	r0, [sp, #20]
 8011306:	428d      	cmp	r5, r1
 8011308:	f6ff af07 	blt.w	801111a <__kernel_rem_pio2+0xc2>
 801130c:	a81a      	add	r0, sp, #104	; 0x68
 801130e:	eb02 0c03 	add.w	ip, r2, r3
 8011312:	4484      	add	ip, r0
 8011314:	9803      	ldr	r0, [sp, #12]
 8011316:	f8dd e008 	ldr.w	lr, [sp, #8]
 801131a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 801131e:	9001      	str	r0, [sp, #4]
 8011320:	ee07 0a90 	vmov	s15, r0
 8011324:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011328:	9805      	ldr	r0, [sp, #20]
 801132a:	ed8c 7b00 	vstr	d7, [ip]
 801132e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8011370 <__kernel_rem_pio2+0x318>
 8011332:	eb00 0802 	add.w	r8, r0, r2
 8011336:	f04f 0c00 	mov.w	ip, #0
 801133a:	45d4      	cmp	ip, sl
 801133c:	dd0c      	ble.n	8011358 <__kernel_rem_pio2+0x300>
 801133e:	eb02 0c07 	add.w	ip, r2, r7
 8011342:	a86a      	add	r0, sp, #424	; 0x1a8
 8011344:	4484      	add	ip, r0
 8011346:	ed8c 7b02 	vstr	d7, [ip, #8]
 801134a:	3101      	adds	r1, #1
 801134c:	3208      	adds	r2, #8
 801134e:	e7da      	b.n	8011306 <__kernel_rem_pio2+0x2ae>
 8011350:	9b04      	ldr	r3, [sp, #16]
 8011352:	f04f 0c01 	mov.w	ip, #1
 8011356:	e7c7      	b.n	80112e8 <__kernel_rem_pio2+0x290>
 8011358:	ecbe 5b02 	vldmia	lr!, {d5}
 801135c:	ed38 6b02 	vldmdb	r8!, {d6}
 8011360:	f10c 0c01 	add.w	ip, ip, #1
 8011364:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011368:	e7e7      	b.n	801133a <__kernel_rem_pio2+0x2e2>
 801136a:	3b01      	subs	r3, #1
 801136c:	e768      	b.n	8011240 <__kernel_rem_pio2+0x1e8>
 801136e:	bf00      	nop
	...
 801137c:	3e700000 	.word	0x3e700000
 8011380:	00000000 	.word	0x00000000
 8011384:	41700000 	.word	0x41700000
 8011388:	080121d8 	.word	0x080121d8
 801138c:	08012198 	.word	0x08012198
 8011390:	4260      	negs	r0, r4
 8011392:	eeb0 0b48 	vmov.f64	d0, d8
 8011396:	f000 f9e3 	bl	8011760 <scalbn>
 801139a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8011578 <__kernel_rem_pio2+0x520>
 801139e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80113a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113a6:	db18      	blt.n	80113da <__kernel_rem_pio2+0x382>
 80113a8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8011580 <__kernel_rem_pio2+0x528>
 80113ac:	ee20 7b07 	vmul.f64	d7, d0, d7
 80113b0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80113b4:	aa06      	add	r2, sp, #24
 80113b6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80113ba:	eea5 0b46 	vfms.f64	d0, d5, d6
 80113be:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80113c2:	a906      	add	r1, sp, #24
 80113c4:	ee10 3a10 	vmov	r3, s0
 80113c8:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80113cc:	1c6b      	adds	r3, r5, #1
 80113ce:	ee17 2a10 	vmov	r2, s14
 80113d2:	3418      	adds	r4, #24
 80113d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80113d8:	e739      	b.n	801124e <__kernel_rem_pio2+0x1f6>
 80113da:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80113de:	aa06      	add	r2, sp, #24
 80113e0:	ee10 3a10 	vmov	r3, s0
 80113e4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80113e8:	462b      	mov	r3, r5
 80113ea:	e730      	b.n	801124e <__kernel_rem_pio2+0x1f6>
 80113ec:	aa06      	add	r2, sp, #24
 80113ee:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80113f2:	9202      	str	r2, [sp, #8]
 80113f4:	ee07 2a90 	vmov	s15, r2
 80113f8:	3c01      	subs	r4, #1
 80113fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80113fe:	ee27 7b00 	vmul.f64	d7, d7, d0
 8011402:	ee20 0b06 	vmul.f64	d0, d0, d6
 8011406:	ed25 7b02 	vstmdb	r5!, {d7}
 801140a:	e72f      	b.n	801126c <__kernel_rem_pio2+0x214>
 801140c:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 8011410:	ecb7 5b02 	vldmia	r7!, {d5}
 8011414:	ed9c 6b00 	vldr	d6, [ip]
 8011418:	3401      	adds	r4, #1
 801141a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801141e:	454c      	cmp	r4, r9
 8011420:	dc01      	bgt.n	8011426 <__kernel_rem_pio2+0x3ce>
 8011422:	42a5      	cmp	r5, r4
 8011424:	daf2      	bge.n	801140c <__kernel_rem_pio2+0x3b4>
 8011426:	aa42      	add	r2, sp, #264	; 0x108
 8011428:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 801142c:	ed84 7b00 	vstr	d7, [r4]
 8011430:	3501      	adds	r5, #1
 8011432:	3808      	subs	r0, #8
 8011434:	e71e      	b.n	8011274 <__kernel_rem_pio2+0x21c>
 8011436:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8011438:	2a03      	cmp	r2, #3
 801143a:	d84e      	bhi.n	80114da <__kernel_rem_pio2+0x482>
 801143c:	e8df f002 	tbb	[pc, r2]
 8011440:	021f1f3e 	.word	0x021f1f3e
 8011444:	3108      	adds	r1, #8
 8011446:	aa42      	add	r2, sp, #264	; 0x108
 8011448:	4411      	add	r1, r2
 801144a:	4608      	mov	r0, r1
 801144c:	461c      	mov	r4, r3
 801144e:	2c00      	cmp	r4, #0
 8011450:	dc61      	bgt.n	8011516 <__kernel_rem_pio2+0x4be>
 8011452:	4608      	mov	r0, r1
 8011454:	461c      	mov	r4, r3
 8011456:	2c01      	cmp	r4, #1
 8011458:	dc6d      	bgt.n	8011536 <__kernel_rem_pio2+0x4de>
 801145a:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8011588 <__kernel_rem_pio2+0x530>
 801145e:	2b01      	cmp	r3, #1
 8011460:	dc79      	bgt.n	8011556 <__kernel_rem_pio2+0x4fe>
 8011462:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8011466:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 801146a:	f1b8 0f00 	cmp.w	r8, #0
 801146e:	d178      	bne.n	8011562 <__kernel_rem_pio2+0x50a>
 8011470:	ed86 5b00 	vstr	d5, [r6]
 8011474:	ed86 6b02 	vstr	d6, [r6, #8]
 8011478:	ed86 7b04 	vstr	d7, [r6, #16]
 801147c:	e02d      	b.n	80114da <__kernel_rem_pio2+0x482>
 801147e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8011588 <__kernel_rem_pio2+0x530>
 8011482:	3108      	adds	r1, #8
 8011484:	aa42      	add	r2, sp, #264	; 0x108
 8011486:	4411      	add	r1, r2
 8011488:	4618      	mov	r0, r3
 801148a:	2800      	cmp	r0, #0
 801148c:	da34      	bge.n	80114f8 <__kernel_rem_pio2+0x4a0>
 801148e:	f1b8 0f00 	cmp.w	r8, #0
 8011492:	d037      	beq.n	8011504 <__kernel_rem_pio2+0x4ac>
 8011494:	eeb1 7b46 	vneg.f64	d7, d6
 8011498:	ed86 7b00 	vstr	d7, [r6]
 801149c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 80114a0:	a844      	add	r0, sp, #272	; 0x110
 80114a2:	2101      	movs	r1, #1
 80114a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80114a8:	428b      	cmp	r3, r1
 80114aa:	da2e      	bge.n	801150a <__kernel_rem_pio2+0x4b2>
 80114ac:	f1b8 0f00 	cmp.w	r8, #0
 80114b0:	d001      	beq.n	80114b6 <__kernel_rem_pio2+0x45e>
 80114b2:	eeb1 7b47 	vneg.f64	d7, d7
 80114b6:	ed86 7b02 	vstr	d7, [r6, #8]
 80114ba:	e00e      	b.n	80114da <__kernel_rem_pio2+0x482>
 80114bc:	aa92      	add	r2, sp, #584	; 0x248
 80114be:	ed9f 7b32 	vldr	d7, [pc, #200]	; 8011588 <__kernel_rem_pio2+0x530>
 80114c2:	4411      	add	r1, r2
 80114c4:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	da0f      	bge.n	80114ec <__kernel_rem_pio2+0x494>
 80114cc:	f1b8 0f00 	cmp.w	r8, #0
 80114d0:	d001      	beq.n	80114d6 <__kernel_rem_pio2+0x47e>
 80114d2:	eeb1 7b47 	vneg.f64	d7, d7
 80114d6:	ed86 7b00 	vstr	d7, [r6]
 80114da:	9b01      	ldr	r3, [sp, #4]
 80114dc:	f003 0007 	and.w	r0, r3, #7
 80114e0:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 80114e4:	ecbd 8b06 	vpop	{d8-d10}
 80114e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114ec:	ed31 6b02 	vldmdb	r1!, {d6}
 80114f0:	3b01      	subs	r3, #1
 80114f2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80114f6:	e7e7      	b.n	80114c8 <__kernel_rem_pio2+0x470>
 80114f8:	ed31 7b02 	vldmdb	r1!, {d7}
 80114fc:	3801      	subs	r0, #1
 80114fe:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011502:	e7c2      	b.n	801148a <__kernel_rem_pio2+0x432>
 8011504:	eeb0 7b46 	vmov.f64	d7, d6
 8011508:	e7c6      	b.n	8011498 <__kernel_rem_pio2+0x440>
 801150a:	ecb0 6b02 	vldmia	r0!, {d6}
 801150e:	3101      	adds	r1, #1
 8011510:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011514:	e7c8      	b.n	80114a8 <__kernel_rem_pio2+0x450>
 8011516:	ed10 7b04 	vldr	d7, [r0, #-16]
 801151a:	ed30 5b02 	vldmdb	r0!, {d5}
 801151e:	3c01      	subs	r4, #1
 8011520:	ee37 6b05 	vadd.f64	d6, d7, d5
 8011524:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011528:	ed00 6b02 	vstr	d6, [r0, #-8]
 801152c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011530:	ed80 7b00 	vstr	d7, [r0]
 8011534:	e78b      	b.n	801144e <__kernel_rem_pio2+0x3f6>
 8011536:	ed10 7b04 	vldr	d7, [r0, #-16]
 801153a:	ed30 5b02 	vldmdb	r0!, {d5}
 801153e:	3c01      	subs	r4, #1
 8011540:	ee37 6b05 	vadd.f64	d6, d7, d5
 8011544:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011548:	ed00 6b02 	vstr	d6, [r0, #-8]
 801154c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011550:	ed80 7b00 	vstr	d7, [r0]
 8011554:	e77f      	b.n	8011456 <__kernel_rem_pio2+0x3fe>
 8011556:	ed31 6b02 	vldmdb	r1!, {d6}
 801155a:	3b01      	subs	r3, #1
 801155c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011560:	e77d      	b.n	801145e <__kernel_rem_pio2+0x406>
 8011562:	eeb1 5b45 	vneg.f64	d5, d5
 8011566:	eeb1 6b46 	vneg.f64	d6, d6
 801156a:	ed86 5b00 	vstr	d5, [r6]
 801156e:	eeb1 7b47 	vneg.f64	d7, d7
 8011572:	ed86 6b02 	vstr	d6, [r6, #8]
 8011576:	e77f      	b.n	8011478 <__kernel_rem_pio2+0x420>
 8011578:	00000000 	.word	0x00000000
 801157c:	41700000 	.word	0x41700000
 8011580:	00000000 	.word	0x00000000
 8011584:	3e700000 	.word	0x3e700000
	...

08011590 <__kernel_sin>:
 8011590:	ee10 3a90 	vmov	r3, s1
 8011594:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011598:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801159c:	da04      	bge.n	80115a8 <__kernel_sin+0x18>
 801159e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80115a2:	ee17 3a90 	vmov	r3, s15
 80115a6:	b35b      	cbz	r3, 8011600 <__kernel_sin+0x70>
 80115a8:	ee20 6b00 	vmul.f64	d6, d0, d0
 80115ac:	ee20 5b06 	vmul.f64	d5, d0, d6
 80115b0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8011608 <__kernel_sin+0x78>
 80115b4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011610 <__kernel_sin+0x80>
 80115b8:	eea6 4b07 	vfma.f64	d4, d6, d7
 80115bc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011618 <__kernel_sin+0x88>
 80115c0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80115c4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011620 <__kernel_sin+0x90>
 80115c8:	eea7 4b06 	vfma.f64	d4, d7, d6
 80115cc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011628 <__kernel_sin+0x98>
 80115d0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80115d4:	b930      	cbnz	r0, 80115e4 <__kernel_sin+0x54>
 80115d6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011630 <__kernel_sin+0xa0>
 80115da:	eea6 4b07 	vfma.f64	d4, d6, d7
 80115de:	eea4 0b05 	vfma.f64	d0, d4, d5
 80115e2:	4770      	bx	lr
 80115e4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80115e8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80115ec:	eea1 7b04 	vfma.f64	d7, d1, d4
 80115f0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80115f4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8011638 <__kernel_sin+0xa8>
 80115f8:	eea5 1b07 	vfma.f64	d1, d5, d7
 80115fc:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011600:	4770      	bx	lr
 8011602:	bf00      	nop
 8011604:	f3af 8000 	nop.w
 8011608:	5acfd57c 	.word	0x5acfd57c
 801160c:	3de5d93a 	.word	0x3de5d93a
 8011610:	8a2b9ceb 	.word	0x8a2b9ceb
 8011614:	be5ae5e6 	.word	0xbe5ae5e6
 8011618:	57b1fe7d 	.word	0x57b1fe7d
 801161c:	3ec71de3 	.word	0x3ec71de3
 8011620:	19c161d5 	.word	0x19c161d5
 8011624:	bf2a01a0 	.word	0xbf2a01a0
 8011628:	1110f8a6 	.word	0x1110f8a6
 801162c:	3f811111 	.word	0x3f811111
 8011630:	55555549 	.word	0x55555549
 8011634:	bfc55555 	.word	0xbfc55555
 8011638:	55555549 	.word	0x55555549
 801163c:	3fc55555 	.word	0x3fc55555

08011640 <fabs>:
 8011640:	ec51 0b10 	vmov	r0, r1, d0
 8011644:	ee10 2a10 	vmov	r2, s0
 8011648:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801164c:	ec43 2b10 	vmov	d0, r2, r3
 8011650:	4770      	bx	lr

08011652 <finite>:
 8011652:	ee10 3a90 	vmov	r3, s1
 8011656:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801165a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801165e:	0fc0      	lsrs	r0, r0, #31
 8011660:	4770      	bx	lr
 8011662:	0000      	movs	r0, r0
 8011664:	0000      	movs	r0, r0
	...

08011668 <floor>:
 8011668:	ee10 1a90 	vmov	r1, s1
 801166c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011670:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8011674:	2b13      	cmp	r3, #19
 8011676:	b530      	push	{r4, r5, lr}
 8011678:	ee10 0a10 	vmov	r0, s0
 801167c:	ee10 5a10 	vmov	r5, s0
 8011680:	dc33      	bgt.n	80116ea <floor+0x82>
 8011682:	2b00      	cmp	r3, #0
 8011684:	da17      	bge.n	80116b6 <floor+0x4e>
 8011686:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8011748 <floor+0xe0>
 801168a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801168e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011696:	dd09      	ble.n	80116ac <floor+0x44>
 8011698:	2900      	cmp	r1, #0
 801169a:	da50      	bge.n	801173e <floor+0xd6>
 801169c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80116a0:	4a2b      	ldr	r2, [pc, #172]	; (8011750 <floor+0xe8>)
 80116a2:	4303      	orrs	r3, r0
 80116a4:	2000      	movs	r0, #0
 80116a6:	4283      	cmp	r3, r0
 80116a8:	bf18      	it	ne
 80116aa:	4611      	movne	r1, r2
 80116ac:	460b      	mov	r3, r1
 80116ae:	4602      	mov	r2, r0
 80116b0:	ec43 2b10 	vmov	d0, r2, r3
 80116b4:	e020      	b.n	80116f8 <floor+0x90>
 80116b6:	4a27      	ldr	r2, [pc, #156]	; (8011754 <floor+0xec>)
 80116b8:	411a      	asrs	r2, r3
 80116ba:	ea01 0402 	and.w	r4, r1, r2
 80116be:	4304      	orrs	r4, r0
 80116c0:	d01a      	beq.n	80116f8 <floor+0x90>
 80116c2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8011748 <floor+0xe0>
 80116c6:	ee30 0b07 	vadd.f64	d0, d0, d7
 80116ca:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80116ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116d2:	ddeb      	ble.n	80116ac <floor+0x44>
 80116d4:	2900      	cmp	r1, #0
 80116d6:	bfbe      	ittt	lt
 80116d8:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80116dc:	fa40 f303 	asrlt.w	r3, r0, r3
 80116e0:	18c9      	addlt	r1, r1, r3
 80116e2:	ea21 0102 	bic.w	r1, r1, r2
 80116e6:	2000      	movs	r0, #0
 80116e8:	e7e0      	b.n	80116ac <floor+0x44>
 80116ea:	2b33      	cmp	r3, #51	; 0x33
 80116ec:	dd05      	ble.n	80116fa <floor+0x92>
 80116ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80116f2:	d101      	bne.n	80116f8 <floor+0x90>
 80116f4:	ee30 0b00 	vadd.f64	d0, d0, d0
 80116f8:	bd30      	pop	{r4, r5, pc}
 80116fa:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80116fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011702:	40e2      	lsrs	r2, r4
 8011704:	4202      	tst	r2, r0
 8011706:	d0f7      	beq.n	80116f8 <floor+0x90>
 8011708:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8011748 <floor+0xe0>
 801170c:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011710:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011718:	ddc8      	ble.n	80116ac <floor+0x44>
 801171a:	2900      	cmp	r1, #0
 801171c:	da02      	bge.n	8011724 <floor+0xbc>
 801171e:	2b14      	cmp	r3, #20
 8011720:	d103      	bne.n	801172a <floor+0xc2>
 8011722:	3101      	adds	r1, #1
 8011724:	ea20 0002 	bic.w	r0, r0, r2
 8011728:	e7c0      	b.n	80116ac <floor+0x44>
 801172a:	2401      	movs	r4, #1
 801172c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011730:	fa04 f303 	lsl.w	r3, r4, r3
 8011734:	4418      	add	r0, r3
 8011736:	42a8      	cmp	r0, r5
 8011738:	bf38      	it	cc
 801173a:	1909      	addcc	r1, r1, r4
 801173c:	e7f2      	b.n	8011724 <floor+0xbc>
 801173e:	2000      	movs	r0, #0
 8011740:	4601      	mov	r1, r0
 8011742:	e7b3      	b.n	80116ac <floor+0x44>
 8011744:	f3af 8000 	nop.w
 8011748:	8800759c 	.word	0x8800759c
 801174c:	7e37e43c 	.word	0x7e37e43c
 8011750:	bff00000 	.word	0xbff00000
 8011754:	000fffff 	.word	0x000fffff

08011758 <matherr>:
 8011758:	2000      	movs	r0, #0
 801175a:	4770      	bx	lr
 801175c:	0000      	movs	r0, r0
	...

08011760 <scalbn>:
 8011760:	b500      	push	{lr}
 8011762:	ed2d 8b02 	vpush	{d8}
 8011766:	b083      	sub	sp, #12
 8011768:	ed8d 0b00 	vstr	d0, [sp]
 801176c:	9b01      	ldr	r3, [sp, #4]
 801176e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011772:	b9a2      	cbnz	r2, 801179e <scalbn+0x3e>
 8011774:	9a00      	ldr	r2, [sp, #0]
 8011776:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801177a:	4313      	orrs	r3, r2
 801177c:	d03a      	beq.n	80117f4 <scalbn+0x94>
 801177e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011838 <scalbn+0xd8>
 8011782:	4b35      	ldr	r3, [pc, #212]	; (8011858 <scalbn+0xf8>)
 8011784:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011788:	4298      	cmp	r0, r3
 801178a:	ed8d 7b00 	vstr	d7, [sp]
 801178e:	da11      	bge.n	80117b4 <scalbn+0x54>
 8011790:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8011840 <scalbn+0xe0>
 8011794:	ed9d 6b00 	vldr	d6, [sp]
 8011798:	ee27 7b06 	vmul.f64	d7, d7, d6
 801179c:	e007      	b.n	80117ae <scalbn+0x4e>
 801179e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80117a2:	428a      	cmp	r2, r1
 80117a4:	d10a      	bne.n	80117bc <scalbn+0x5c>
 80117a6:	ed9d 7b00 	vldr	d7, [sp]
 80117aa:	ee37 7b07 	vadd.f64	d7, d7, d7
 80117ae:	ed8d 7b00 	vstr	d7, [sp]
 80117b2:	e01f      	b.n	80117f4 <scalbn+0x94>
 80117b4:	9b01      	ldr	r3, [sp, #4]
 80117b6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80117ba:	3a36      	subs	r2, #54	; 0x36
 80117bc:	4402      	add	r2, r0
 80117be:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80117c2:	428a      	cmp	r2, r1
 80117c4:	dd0a      	ble.n	80117dc <scalbn+0x7c>
 80117c6:	ed9f 8b20 	vldr	d8, [pc, #128]	; 8011848 <scalbn+0xe8>
 80117ca:	eeb0 0b48 	vmov.f64	d0, d8
 80117ce:	ed9d 1b00 	vldr	d1, [sp]
 80117d2:	f000 f843 	bl	801185c <copysign>
 80117d6:	ee20 7b08 	vmul.f64	d7, d0, d8
 80117da:	e7e8      	b.n	80117ae <scalbn+0x4e>
 80117dc:	2a00      	cmp	r2, #0
 80117de:	dd10      	ble.n	8011802 <scalbn+0xa2>
 80117e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80117e4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80117e8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80117ec:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80117f0:	e9cd 0100 	strd	r0, r1, [sp]
 80117f4:	ed9d 0b00 	vldr	d0, [sp]
 80117f8:	b003      	add	sp, #12
 80117fa:	ecbd 8b02 	vpop	{d8}
 80117fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8011802:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011806:	da06      	bge.n	8011816 <scalbn+0xb6>
 8011808:	f24c 3350 	movw	r3, #50000	; 0xc350
 801180c:	4298      	cmp	r0, r3
 801180e:	dcda      	bgt.n	80117c6 <scalbn+0x66>
 8011810:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 8011840 <scalbn+0xe0>
 8011814:	e7d9      	b.n	80117ca <scalbn+0x6a>
 8011816:	e9dd 0100 	ldrd	r0, r1, [sp]
 801181a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801181e:	3236      	adds	r2, #54	; 0x36
 8011820:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011824:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011828:	ec41 0b17 	vmov	d7, r0, r1
 801182c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8011850 <scalbn+0xf0>
 8011830:	e7b2      	b.n	8011798 <scalbn+0x38>
 8011832:	bf00      	nop
 8011834:	f3af 8000 	nop.w
 8011838:	00000000 	.word	0x00000000
 801183c:	43500000 	.word	0x43500000
 8011840:	c2f8f359 	.word	0xc2f8f359
 8011844:	01a56e1f 	.word	0x01a56e1f
 8011848:	8800759c 	.word	0x8800759c
 801184c:	7e37e43c 	.word	0x7e37e43c
 8011850:	00000000 	.word	0x00000000
 8011854:	3c900000 	.word	0x3c900000
 8011858:	ffff3cb0 	.word	0xffff3cb0

0801185c <copysign>:
 801185c:	ec51 0b10 	vmov	r0, r1, d0
 8011860:	ee11 0a90 	vmov	r0, s3
 8011864:	ee10 2a10 	vmov	r2, s0
 8011868:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801186c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8011870:	ea41 0300 	orr.w	r3, r1, r0
 8011874:	ec43 2b10 	vmov	d0, r2, r3
 8011878:	4770      	bx	lr
	...

0801187c <_init>:
 801187c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801187e:	bf00      	nop
 8011880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011882:	bc08      	pop	{r3}
 8011884:	469e      	mov	lr, r3
 8011886:	4770      	bx	lr

08011888 <_fini>:
 8011888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801188a:	bf00      	nop
 801188c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801188e:	bc08      	pop	{r3}
 8011890:	469e      	mov	lr, r3
 8011892:	4770      	bx	lr
